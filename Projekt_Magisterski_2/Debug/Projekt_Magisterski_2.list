
Projekt_Magisterski_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0f4  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800f238  0800f238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa0c  0800fa0c  000111f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fa0c  0800fa0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa14  0800fa14  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa14  0800fa14  00010a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fa18  0800fa18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800fa1c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af8  200001f0  0800fc0c  000111f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ce8  0800fc0c  00011ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fc2  00000000  00000000  00011219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049c6  00000000  00000000  0002b1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  0002fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c0  00000000  00000000  00031448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c441  00000000  00000000  00032708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021418  00000000  00000000  0004eb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009acc0  00000000  00000000  0006ff61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ac21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000782c  00000000  00000000  0010ac64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00112490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f21c 	.word	0x0800f21c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800f21c 	.word	0x0800f21c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b98c 	b.w	80014bc <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f806 	bl	80011bc <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__udivmoddi4>:
 80011bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	9d08      	ldr	r5, [sp, #32]
 80011c2:	468e      	mov	lr, r1
 80011c4:	4604      	mov	r4, r0
 80011c6:	4688      	mov	r8, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14a      	bne.n	8001262 <__udivmoddi4+0xa6>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	4617      	mov	r7, r2
 80011d0:	d962      	bls.n	8001298 <__udivmoddi4+0xdc>
 80011d2:	fab2 f682 	clz	r6, r2
 80011d6:	b14e      	cbz	r6, 80011ec <__udivmoddi4+0x30>
 80011d8:	f1c6 0320 	rsb	r3, r6, #32
 80011dc:	fa01 f806 	lsl.w	r8, r1, r6
 80011e0:	fa20 f303 	lsr.w	r3, r0, r3
 80011e4:	40b7      	lsls	r7, r6
 80011e6:	ea43 0808 	orr.w	r8, r3, r8
 80011ea:	40b4      	lsls	r4, r6
 80011ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80011f4:	fa1f fc87 	uxth.w	ip, r7
 80011f8:	fb0e 8811 	mls	r8, lr, r1, r8
 80011fc:	fb01 f20c 	mul.w	r2, r1, ip
 8001200:	0c23      	lsrs	r3, r4, #16
 8001202:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001206:	429a      	cmp	r2, r3
 8001208:	d909      	bls.n	800121e <__udivmoddi4+0x62>
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	f101 30ff 	add.w	r0, r1, #4294967295
 8001210:	f080 80eb 	bcs.w	80013ea <__udivmoddi4+0x22e>
 8001214:	429a      	cmp	r2, r3
 8001216:	f240 80e8 	bls.w	80013ea <__udivmoddi4+0x22e>
 800121a:	3902      	subs	r1, #2
 800121c:	443b      	add	r3, r7
 800121e:	1a9a      	subs	r2, r3, r2
 8001220:	fbb2 f0fe 	udiv	r0, r2, lr
 8001224:	fb0e 2210 	mls	r2, lr, r0, r2
 8001228:	fb00 fc0c 	mul.w	ip, r0, ip
 800122c:	b2a3      	uxth	r3, r4
 800122e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001232:	459c      	cmp	ip, r3
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x8e>
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 80d7 	bcs.w	80013ee <__udivmoddi4+0x232>
 8001240:	459c      	cmp	ip, r3
 8001242:	f240 80d4 	bls.w	80013ee <__udivmoddi4+0x232>
 8001246:	443b      	add	r3, r7
 8001248:	3802      	subs	r0, #2
 800124a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800124e:	2100      	movs	r1, #0
 8001250:	eba3 030c 	sub.w	r3, r3, ip
 8001254:	b11d      	cbz	r5, 800125e <__udivmoddi4+0xa2>
 8001256:	2200      	movs	r2, #0
 8001258:	40f3      	lsrs	r3, r6
 800125a:	e9c5 3200 	strd	r3, r2, [r5]
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	428b      	cmp	r3, r1
 8001264:	d905      	bls.n	8001272 <__udivmoddi4+0xb6>
 8001266:	b10d      	cbz	r5, 800126c <__udivmoddi4+0xb0>
 8001268:	e9c5 0100 	strd	r0, r1, [r5]
 800126c:	2100      	movs	r1, #0
 800126e:	4608      	mov	r0, r1
 8001270:	e7f5      	b.n	800125e <__udivmoddi4+0xa2>
 8001272:	fab3 f183 	clz	r1, r3
 8001276:	2900      	cmp	r1, #0
 8001278:	d146      	bne.n	8001308 <__udivmoddi4+0x14c>
 800127a:	4573      	cmp	r3, lr
 800127c:	d302      	bcc.n	8001284 <__udivmoddi4+0xc8>
 800127e:	4282      	cmp	r2, r0
 8001280:	f200 8108 	bhi.w	8001494 <__udivmoddi4+0x2d8>
 8001284:	1a84      	subs	r4, r0, r2
 8001286:	eb6e 0203 	sbc.w	r2, lr, r3
 800128a:	2001      	movs	r0, #1
 800128c:	4690      	mov	r8, r2
 800128e:	2d00      	cmp	r5, #0
 8001290:	d0e5      	beq.n	800125e <__udivmoddi4+0xa2>
 8001292:	e9c5 4800 	strd	r4, r8, [r5]
 8001296:	e7e2      	b.n	800125e <__udivmoddi4+0xa2>
 8001298:	2a00      	cmp	r2, #0
 800129a:	f000 8091 	beq.w	80013c0 <__udivmoddi4+0x204>
 800129e:	fab2 f682 	clz	r6, r2
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	f040 80a5 	bne.w	80013f2 <__udivmoddi4+0x236>
 80012a8:	1a8a      	subs	r2, r1, r2
 80012aa:	2101      	movs	r1, #1
 80012ac:	0c03      	lsrs	r3, r0, #16
 80012ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b2:	b280      	uxth	r0, r0
 80012b4:	b2bc      	uxth	r4, r7
 80012b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80012ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80012be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012c2:	fb04 f20c 	mul.w	r2, r4, ip
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d907      	bls.n	80012da <__udivmoddi4+0x11e>
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0x11c>
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f200 80e3 	bhi.w	800149e <__udivmoddi4+0x2e2>
 80012d8:	46c4      	mov	ip, r8
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80012e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80012e4:	fb02 f404 	mul.w	r4, r2, r4
 80012e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012ec:	429c      	cmp	r4, r3
 80012ee:	d907      	bls.n	8001300 <__udivmoddi4+0x144>
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80012f6:	d202      	bcs.n	80012fe <__udivmoddi4+0x142>
 80012f8:	429c      	cmp	r4, r3
 80012fa:	f200 80cd 	bhi.w	8001498 <__udivmoddi4+0x2dc>
 80012fe:	4602      	mov	r2, r0
 8001300:	1b1b      	subs	r3, r3, r4
 8001302:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001306:	e7a5      	b.n	8001254 <__udivmoddi4+0x98>
 8001308:	f1c1 0620 	rsb	r6, r1, #32
 800130c:	408b      	lsls	r3, r1
 800130e:	fa22 f706 	lsr.w	r7, r2, r6
 8001312:	431f      	orrs	r7, r3
 8001314:	fa2e fa06 	lsr.w	sl, lr, r6
 8001318:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800131c:	fbba f8f9 	udiv	r8, sl, r9
 8001320:	fa0e fe01 	lsl.w	lr, lr, r1
 8001324:	fa20 f306 	lsr.w	r3, r0, r6
 8001328:	fb09 aa18 	mls	sl, r9, r8, sl
 800132c:	fa1f fc87 	uxth.w	ip, r7
 8001330:	ea43 030e 	orr.w	r3, r3, lr
 8001334:	fa00 fe01 	lsl.w	lr, r0, r1
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c1c      	lsrs	r4, r3, #16
 800133e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001342:	42a0      	cmp	r0, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	d90a      	bls.n	8001360 <__udivmoddi4+0x1a4>
 800134a:	193c      	adds	r4, r7, r4
 800134c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001350:	f080 809e 	bcs.w	8001490 <__udivmoddi4+0x2d4>
 8001354:	42a0      	cmp	r0, r4
 8001356:	f240 809b 	bls.w	8001490 <__udivmoddi4+0x2d4>
 800135a:	f1a8 0802 	sub.w	r8, r8, #2
 800135e:	443c      	add	r4, r7
 8001360:	1a24      	subs	r4, r4, r0
 8001362:	b298      	uxth	r0, r3
 8001364:	fbb4 f3f9 	udiv	r3, r4, r9
 8001368:	fb09 4413 	mls	r4, r9, r3, r4
 800136c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001370:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001374:	45a4      	cmp	ip, r4
 8001376:	d909      	bls.n	800138c <__udivmoddi4+0x1d0>
 8001378:	193c      	adds	r4, r7, r4
 800137a:	f103 30ff 	add.w	r0, r3, #4294967295
 800137e:	f080 8085 	bcs.w	800148c <__udivmoddi4+0x2d0>
 8001382:	45a4      	cmp	ip, r4
 8001384:	f240 8082 	bls.w	800148c <__udivmoddi4+0x2d0>
 8001388:	3b02      	subs	r3, #2
 800138a:	443c      	add	r4, r7
 800138c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001390:	eba4 040c 	sub.w	r4, r4, ip
 8001394:	fba0 8c02 	umull	r8, ip, r0, r2
 8001398:	4564      	cmp	r4, ip
 800139a:	4643      	mov	r3, r8
 800139c:	46e1      	mov	r9, ip
 800139e:	d364      	bcc.n	800146a <__udivmoddi4+0x2ae>
 80013a0:	d061      	beq.n	8001466 <__udivmoddi4+0x2aa>
 80013a2:	b15d      	cbz	r5, 80013bc <__udivmoddi4+0x200>
 80013a4:	ebbe 0203 	subs.w	r2, lr, r3
 80013a8:	eb64 0409 	sbc.w	r4, r4, r9
 80013ac:	fa04 f606 	lsl.w	r6, r4, r6
 80013b0:	fa22 f301 	lsr.w	r3, r2, r1
 80013b4:	431e      	orrs	r6, r3
 80013b6:	40cc      	lsrs	r4, r1
 80013b8:	e9c5 6400 	strd	r6, r4, [r5]
 80013bc:	2100      	movs	r1, #0
 80013be:	e74e      	b.n	800125e <__udivmoddi4+0xa2>
 80013c0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013c4:	0c01      	lsrs	r1, r0, #16
 80013c6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013ca:	b280      	uxth	r0, r0
 80013cc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013d0:	463b      	mov	r3, r7
 80013d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80013d6:	4638      	mov	r0, r7
 80013d8:	463c      	mov	r4, r7
 80013da:	46b8      	mov	r8, r7
 80013dc:	46be      	mov	lr, r7
 80013de:	2620      	movs	r6, #32
 80013e0:	eba2 0208 	sub.w	r2, r2, r8
 80013e4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013e8:	e765      	b.n	80012b6 <__udivmoddi4+0xfa>
 80013ea:	4601      	mov	r1, r0
 80013ec:	e717      	b.n	800121e <__udivmoddi4+0x62>
 80013ee:	4610      	mov	r0, r2
 80013f0:	e72b      	b.n	800124a <__udivmoddi4+0x8e>
 80013f2:	f1c6 0120 	rsb	r1, r6, #32
 80013f6:	fa2e fc01 	lsr.w	ip, lr, r1
 80013fa:	40b7      	lsls	r7, r6
 80013fc:	fa0e fe06 	lsl.w	lr, lr, r6
 8001400:	fa20 f101 	lsr.w	r1, r0, r1
 8001404:	ea41 010e 	orr.w	r1, r1, lr
 8001408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800140c:	fbbc f8fe 	udiv	r8, ip, lr
 8001410:	b2bc      	uxth	r4, r7
 8001412:	fb0e cc18 	mls	ip, lr, r8, ip
 8001416:	fb08 f904 	mul.w	r9, r8, r4
 800141a:	0c0a      	lsrs	r2, r1, #16
 800141c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001420:	40b0      	lsls	r0, r6
 8001422:	4591      	cmp	r9, r2
 8001424:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001428:	b280      	uxth	r0, r0
 800142a:	d93e      	bls.n	80014aa <__udivmoddi4+0x2ee>
 800142c:	18ba      	adds	r2, r7, r2
 800142e:	f108 3cff 	add.w	ip, r8, #4294967295
 8001432:	d201      	bcs.n	8001438 <__udivmoddi4+0x27c>
 8001434:	4591      	cmp	r9, r2
 8001436:	d81f      	bhi.n	8001478 <__udivmoddi4+0x2bc>
 8001438:	eba2 0209 	sub.w	r2, r2, r9
 800143c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001440:	fb09 f804 	mul.w	r8, r9, r4
 8001444:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001448:	b28a      	uxth	r2, r1
 800144a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800144e:	4542      	cmp	r2, r8
 8001450:	d229      	bcs.n	80014a6 <__udivmoddi4+0x2ea>
 8001452:	18ba      	adds	r2, r7, r2
 8001454:	f109 31ff 	add.w	r1, r9, #4294967295
 8001458:	d2c2      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145a:	4542      	cmp	r2, r8
 800145c:	d2c0      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145e:	f1a9 0102 	sub.w	r1, r9, #2
 8001462:	443a      	add	r2, r7
 8001464:	e7bc      	b.n	80013e0 <__udivmoddi4+0x224>
 8001466:	45c6      	cmp	lr, r8
 8001468:	d29b      	bcs.n	80013a2 <__udivmoddi4+0x1e6>
 800146a:	ebb8 0302 	subs.w	r3, r8, r2
 800146e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001472:	3801      	subs	r0, #1
 8001474:	46e1      	mov	r9, ip
 8001476:	e794      	b.n	80013a2 <__udivmoddi4+0x1e6>
 8001478:	eba7 0909 	sub.w	r9, r7, r9
 800147c:	444a      	add	r2, r9
 800147e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001482:	f1a8 0c02 	sub.w	ip, r8, #2
 8001486:	fb09 f804 	mul.w	r8, r9, r4
 800148a:	e7db      	b.n	8001444 <__udivmoddi4+0x288>
 800148c:	4603      	mov	r3, r0
 800148e:	e77d      	b.n	800138c <__udivmoddi4+0x1d0>
 8001490:	46d0      	mov	r8, sl
 8001492:	e765      	b.n	8001360 <__udivmoddi4+0x1a4>
 8001494:	4608      	mov	r0, r1
 8001496:	e6fa      	b.n	800128e <__udivmoddi4+0xd2>
 8001498:	443b      	add	r3, r7
 800149a:	3a02      	subs	r2, #2
 800149c:	e730      	b.n	8001300 <__udivmoddi4+0x144>
 800149e:	f1ac 0c02 	sub.w	ip, ip, #2
 80014a2:	443b      	add	r3, r7
 80014a4:	e719      	b.n	80012da <__udivmoddi4+0x11e>
 80014a6:	4649      	mov	r1, r9
 80014a8:	e79a      	b.n	80013e0 <__udivmoddi4+0x224>
 80014aa:	eba2 0209 	sub.w	r2, r2, r9
 80014ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80014b2:	46c4      	mov	ip, r8
 80014b4:	fb09 f804 	mul.w	r8, r9, r4
 80014b8:	e7c4      	b.n	8001444 <__udivmoddi4+0x288>
 80014ba:	bf00      	nop

080014bc <__aeabi_idiv0>:
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	4b80      	ldr	r3, [pc, #512]	@ (80016d8 <MX_GPIO_Init+0x218>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a7f      	ldr	r2, [pc, #508]	@ (80016d8 <MX_GPIO_Init+0x218>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b7d      	ldr	r3, [pc, #500]	@ (80016d8 <MX_GPIO_Init+0x218>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	4b7a      	ldr	r3, [pc, #488]	@ (80016d8 <MX_GPIO_Init+0x218>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a79      	ldr	r2, [pc, #484]	@ (80016d8 <MX_GPIO_Init+0x218>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b77      	ldr	r3, [pc, #476]	@ (80016d8 <MX_GPIO_Init+0x218>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b74      	ldr	r3, [pc, #464]	@ (80016d8 <MX_GPIO_Init+0x218>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a73      	ldr	r2, [pc, #460]	@ (80016d8 <MX_GPIO_Init+0x218>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b71      	ldr	r3, [pc, #452]	@ (80016d8 <MX_GPIO_Init+0x218>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b6e      	ldr	r3, [pc, #440]	@ (80016d8 <MX_GPIO_Init+0x218>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a6d      	ldr	r2, [pc, #436]	@ (80016d8 <MX_GPIO_Init+0x218>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b6b      	ldr	r3, [pc, #428]	@ (80016d8 <MX_GPIO_Init+0x218>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, temp_1_Pin|temp_3_Pin|temp_2_Pin|DB7_Pin
 8001536:	2200      	movs	r2, #0
 8001538:	f240 316d 	movw	r1, #877	@ 0x36d
 800153c:	4867      	ldr	r0, [pc, #412]	@ (80016dc <MX_GPIO_Init+0x21c>)
 800153e:	f004 faf4 	bl	8005b2a <HAL_GPIO_WritePin>
                          |DB6_Pin|DB5_Pin|DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RS_Pin|RES_2_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	21e0      	movs	r1, #224	@ 0xe0
 8001546:	4866      	ldr	r0, [pc, #408]	@ (80016e0 <MX_GPIO_Init+0x220>)
 8001548:	f004 faef 	bl	8005b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2110      	movs	r1, #16
 8001550:	4862      	ldr	r0, [pc, #392]	@ (80016dc <MX_GPIO_Init+0x21c>)
 8001552:	f004 faea 	bl	8005b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_2_Pin|CS_1_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2106      	movs	r1, #6
 800155a:	4862      	ldr	r0, [pc, #392]	@ (80016e4 <MX_GPIO_Init+0x224>)
 800155c:	f004 fae5 	bl	8005b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|WENT_Pin, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001566:	485e      	ldr	r0, [pc, #376]	@ (80016e0 <MX_GPIO_Init+0x220>)
 8001568:	f004 fadf 	bl	8005b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RES_1_Pin|EN_Pin|RW_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8001572:	485c      	ldr	r0, [pc, #368]	@ (80016e4 <MX_GPIO_Init+0x224>)
 8001574:	f004 fad9 	bl	8005b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4853      	ldr	r0, [pc, #332]	@ (80016dc <MX_GPIO_Init+0x21c>)
 8001590:	f004 f924 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : temp_1_Pin temp_3_Pin temp_2_Pin */
  GPIO_InitStruct.Pin = temp_1_Pin|temp_3_Pin|temp_2_Pin;
 8001594:	230d      	movs	r3, #13
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001598:	2311      	movs	r3, #17
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	484c      	ldr	r0, [pc, #304]	@ (80016dc <MX_GPIO_Init+0x21c>)
 80015ac:	f004 f916 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RS_Pin RES_2_Pin WENT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RS_Pin|RES_2_Pin|WENT_Pin;
 80015b0:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4845      	ldr	r0, [pc, #276]	@ (80016e0 <MX_GPIO_Init+0x220>)
 80015ca:	f004 f907 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_3_Pin */
  GPIO_InitStruct.Pin = CS_3_Pin;
 80015ce:	2310      	movs	r3, #16
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015da:	2301      	movs	r3, #1
 80015dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_3_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	483d      	ldr	r0, [pc, #244]	@ (80016dc <MX_GPIO_Init+0x21c>)
 80015e6:	f004 f8f9 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin DB5_Pin DB4_Pin */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|DB5_Pin|DB4_Pin;
 80015ea:	f44f 7358 	mov.w	r3, #864	@ 0x360
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4836      	ldr	r0, [pc, #216]	@ (80016dc <MX_GPIO_Init+0x21c>)
 8001604:	f004 f8ea 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_2_Pin CS_1_Pin */
  GPIO_InitStruct.Pin = CS_2_Pin|CS_1_Pin;
 8001608:	2306      	movs	r3, #6
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4831      	ldr	r0, [pc, #196]	@ (80016e4 <MX_GPIO_Init+0x224>)
 8001620:	f004 f8dc 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : iSW_exti_Pin */
  GPIO_InitStruct.Pin = iSW_exti_Pin;
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001628:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162e:	2301      	movs	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(iSW_exti_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4828      	ldr	r0, [pc, #160]	@ (80016dc <MX_GPIO_Init+0x21c>)
 800163a:	f004 f8cf 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800163e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4822      	ldr	r0, [pc, #136]	@ (80016e0 <MX_GPIO_Init+0x220>)
 8001658:	f004 f8c0 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : iDT_Pin */
  GPIO_InitStruct.Pin = iDT_Pin;
 800165c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001666:	2302      	movs	r3, #2
 8001668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(iDT_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	481b      	ldr	r0, [pc, #108]	@ (80016e0 <MX_GPIO_Init+0x220>)
 8001672:	f004 f8b3 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : iCLK_exti_Pin */
  GPIO_InitStruct.Pin = iCLK_exti_Pin;
 8001676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800167c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(iCLK_exti_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4814      	ldr	r0, [pc, #80]	@ (80016e0 <MX_GPIO_Init+0x220>)
 800168e:	f004 f8a5 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_1_Pin EN_Pin RW_Pin */
  GPIO_InitStruct.Pin = RES_1_Pin|EN_Pin|RW_Pin;
 8001692:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	480e      	ldr	r0, [pc, #56]	@ (80016e4 <MX_GPIO_Init+0x224>)
 80016ac:	f004 f896 	bl	80057dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2017      	movs	r0, #23
 80016b6:	f003 fdb6 	bl	8005226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ba:	2017      	movs	r0, #23
 80016bc:	f003 fdcf 	bl	800525e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2028      	movs	r0, #40	@ 0x28
 80016c6:	f003 fdae 	bl	8005226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ca:	2028      	movs	r0, #40	@ 0x28
 80016cc:	f003 fdc7 	bl	800525e <HAL_NVIC_EnableIRQ>

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400

080016e8 <lcdEnablePulse>:
Mode_t _display;

uint8_t lcd_menu_display = 0;
uint8_t lcd_menu_idx = 0;

void lcdEnablePulse(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f2:	4808      	ldr	r0, [pc, #32]	@ (8001714 <lcdEnablePulse+0x2c>)
 80016f4:	f004 fa19 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80016f8:	2005      	movs	r0, #5
 80016fa:	f003 fc9b 	bl	8005034 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001704:	4803      	ldr	r0, [pc, #12]	@ (8001714 <lcdEnablePulse+0x2c>)
 8001706:	f004 fa10 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800170a:	2005      	movs	r0, #5
 800170c:	f003 fc92 	bl	8005034 <HAL_Delay>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40020400 	.word	0x40020400

08001718 <lcdSend4Bits>:

void lcdSend4Bits(uint8_t data) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001730:	4815      	ldr	r0, [pc, #84]	@ (8001788 <lcdSend4Bits+0x70>)
 8001732:	f004 f9fa 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	105b      	asrs	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001748:	480f      	ldr	r0, [pc, #60]	@ (8001788 <lcdSend4Bits+0x70>)
 800174a:	f004 f9ee 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	109b      	asrs	r3, r3, #2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	2140      	movs	r1, #64	@ 0x40
 800175e:	480a      	ldr	r0, [pc, #40]	@ (8001788 <lcdSend4Bits+0x70>)
 8001760:	f004 f9e3 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	10db      	asrs	r3, r3, #3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	2120      	movs	r1, #32
 8001774:	4804      	ldr	r0, [pc, #16]	@ (8001788 <lcdSend4Bits+0x70>)
 8001776:	f004 f9d8 	bl	8005b2a <HAL_GPIO_WritePin>
	lcdEnablePulse();
 800177a:	f7ff ffb5 	bl	80016e8 <lcdEnablePulse>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40020800 	.word	0x40020800

0800178c <lcdSendCmnd>:


void lcdSendCmnd(uint8_t cmnd) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2140      	movs	r1, #64	@ 0x40
 800179a:	480d      	ldr	r0, [pc, #52]	@ (80017d0 <lcdSendCmnd+0x44>)
 800179c:	f004 f9c5 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a6:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <lcdSendCmnd+0x48>)
 80017a8:	f004 f9bf 	bl	8005b2a <HAL_GPIO_WritePin>
	lcdSend4Bits(cmnd >> 4);
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ffb0 	bl	8001718 <lcdSend4Bits>
	lcdSend4Bits(cmnd & 0x0F);
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ffa9 	bl	8001718 <lcdSend4Bits>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020400 	.word	0x40020400

080017d8 <lcdInit>:


void lcdInit(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	HAL_Delay(30);
 80017dc:	201e      	movs	r0, #30
 80017de:	f003 fc29 	bl	8005034 <HAL_Delay>
	lcdSend4Bits(0x03);
 80017e2:	2003      	movs	r0, #3
 80017e4:	f7ff ff98 	bl	8001718 <lcdSend4Bits>
	HAL_Delay(10);
 80017e8:	200a      	movs	r0, #10
 80017ea:	f003 fc23 	bl	8005034 <HAL_Delay>
	lcdSend4Bits(0x03);
 80017ee:	2003      	movs	r0, #3
 80017f0:	f7ff ff92 	bl	8001718 <lcdSend4Bits>
	HAL_Delay(5);
 80017f4:	2005      	movs	r0, #5
 80017f6:	f003 fc1d 	bl	8005034 <HAL_Delay>
	lcdSend4Bits(0x03);
 80017fa:	2003      	movs	r0, #3
 80017fc:	f7ff ff8c 	bl	8001718 <lcdSend4Bits>
	HAL_Delay(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f003 fc17 	bl	8005034 <HAL_Delay>
	lcdSend4Bits(0x02);
 8001806:	2002      	movs	r0, #2
 8001808:	f7ff ff86 	bl	8001718 <lcdSend4Bits>

	lcdSendCmnd(0x28);
 800180c:	2028      	movs	r0, #40	@ 0x28
 800180e:	f7ff ffbd 	bl	800178c <lcdSendCmnd>
	lcdSendCmnd(0x0C);
 8001812:	200c      	movs	r0, #12
 8001814:	f7ff ffba 	bl	800178c <lcdSendCmnd>
	lcdSendCmnd(0x06);
 8001818:	2006      	movs	r0, #6
 800181a:	f7ff ffb7 	bl	800178c <lcdSendCmnd>
	lcdSendCmnd(0x01);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff ffb4 	bl	800178c <lcdSendCmnd>
	lcdSendCmnd(0x0C); // 0x0C blink-off / 0x0F blink-on
 8001824:	200c      	movs	r0, #12
 8001826:	f7ff ffb1 	bl	800178c <lcdSendCmnd>

	lcdDisplayMeasurement();
 800182a:	f000 f843 	bl	80018b4 <lcdDisplayMeasurement>
	lcdDisplaySetpoint();
 800182e:	f000 f877 	bl	8001920 <lcdDisplaySetpoint>
	lcdDisplayMode();
 8001832:	f000 f8af 	bl	8001994 <lcdDisplayMode>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <lcdSendData>:

void lcdSendData(uint8_t data) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2140      	movs	r1, #64	@ 0x40
 800184a:	480d      	ldr	r0, [pc, #52]	@ (8001880 <lcdSendData+0x44>)
 800184c:	f004 f96d 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001856:	480b      	ldr	r0, [pc, #44]	@ (8001884 <lcdSendData+0x48>)
 8001858:	f004 f967 	bl	8005b2a <HAL_GPIO_WritePin>
    lcdSend4Bits(data >> 4);
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff58 	bl	8001718 <lcdSend4Bits>
    lcdSend4Bits(data & 0x0F);
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff51 	bl	8001718 <lcdSend4Bits>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400

08001888 <lcdSendString>:

void lcdSendString(char *str) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8001890:	e006      	b.n	80018a0 <lcdSendString+0x18>
		lcdSendData(*str++);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffce 	bl	800183c <lcdSendData>
	while (*str) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f4      	bne.n	8001892 <lcdSendString+0xa>
	}
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <lcdDisplayMeasurement>:

void lcdDisplayMeasurement(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

	char string[10];
	sprintf(string, "%06.3f", getBatteryVoltage());
 80018ba:	f001 fc1b 	bl	80030f4 <getBatteryVoltage>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fdc9 	bl	8000458 <__aeabi_f2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	1d38      	adds	r0, r7, #4
 80018cc:	4913      	ldr	r1, [pc, #76]	@ (800191c <lcdDisplayMeasurement+0x68>)
 80018ce:	f00b fb07 	bl	800cee0 <siprintf>
	lcdSendCmnd(0x80);
 80018d2:	2080      	movs	r0, #128	@ 0x80
 80018d4:	f7ff ff5a 	bl	800178c <lcdSendCmnd>
	lcdSendString(string);
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ffd4 	bl	8001888 <lcdSendString>
	lcdSendData('V');
 80018e0:	2056      	movs	r0, #86	@ 0x56
 80018e2:	f7ff ffab 	bl	800183c <lcdSendData>
	sprintf(string, "%06.3f", getCurrent());
 80018e6:	f001 fa8d 	bl	8002e04 <getCurrent>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fdb3 	bl	8000458 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	1d38      	adds	r0, r7, #4
 80018f8:	4908      	ldr	r1, [pc, #32]	@ (800191c <lcdDisplayMeasurement+0x68>)
 80018fa:	f00b faf1 	bl	800cee0 <siprintf>
	lcdSendCmnd(0x89);
 80018fe:	2089      	movs	r0, #137	@ 0x89
 8001900:	f7ff ff44 	bl	800178c <lcdSendCmnd>
	lcdSendString(string);
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ffbe 	bl	8001888 <lcdSendString>
	lcdSendData('A');
 800190c:	2041      	movs	r0, #65	@ 0x41
 800190e:	f7ff ff95 	bl	800183c <lcdSendData>
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0800f238 	.word	0x0800f238

08001920 <lcdDisplaySetpoint>:

void lcdDisplaySetpoint(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0

	char string[10];
	sprintf(string, "%06.3f", getSetpoint());
 8001926:	f001 f9e7 	bl	8002cf8 <getSetpoint>
 800192a:	4603      	mov	r3, r0
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fd93 	bl	8000458 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	1d38      	adds	r0, r7, #4
 8001938:	4915      	ldr	r1, [pc, #84]	@ (8001990 <lcdDisplaySetpoint+0x70>)
 800193a:	f00b fad1 	bl	800cee0 <siprintf>
	lcdSendCmnd(0xC0);
 800193e:	20c0      	movs	r0, #192	@ 0xc0
 8001940:	f7ff ff24 	bl	800178c <lcdSendCmnd>
	lcdSendString(string);
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff9e 	bl	8001888 <lcdSendString>

	if( getMode() == 'C') {
 800194c:	f001 fd12 	bl	8003374 <getMode>
 8001950:	4603      	mov	r3, r0
 8001952:	2b43      	cmp	r3, #67	@ 0x43
 8001954:	d106      	bne.n	8001964 <lcdDisplaySetpoint+0x44>
		lcdSendData('A'); lcdSendData(' ');
 8001956:	2041      	movs	r0, #65	@ 0x41
 8001958:	f7ff ff70 	bl	800183c <lcdSendData>
 800195c:	2020      	movs	r0, #32
 800195e:	f7ff ff6d 	bl	800183c <lcdSendData>
	}
	else {
		lcdSendData('W'); lcdSendData(' ');
	}

}
 8001962:	e011      	b.n	8001988 <lcdDisplaySetpoint+0x68>
	else if ( getMode() == 'R') {
 8001964:	f001 fd06 	bl	8003374 <getMode>
 8001968:	4603      	mov	r3, r0
 800196a:	2b52      	cmp	r3, #82	@ 0x52
 800196c:	d106      	bne.n	800197c <lcdDisplaySetpoint+0x5c>
		lcdSendData('O'); lcdSendData(' ');
 800196e:	204f      	movs	r0, #79	@ 0x4f
 8001970:	f7ff ff64 	bl	800183c <lcdSendData>
 8001974:	2020      	movs	r0, #32
 8001976:	f7ff ff61 	bl	800183c <lcdSendData>
}
 800197a:	e005      	b.n	8001988 <lcdDisplaySetpoint+0x68>
		lcdSendData('W'); lcdSendData(' ');
 800197c:	2057      	movs	r0, #87	@ 0x57
 800197e:	f7ff ff5d 	bl	800183c <lcdSendData>
 8001982:	2020      	movs	r0, #32
 8001984:	f7ff ff5a 	bl	800183c <lcdSendData>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	0800f238 	.word	0x0800f238

08001994 <lcdDisplayMode>:

void lcdDisplayMode(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

	lcdSendCmnd(0xC9);
 8001998:	20c9      	movs	r0, #201	@ 0xc9
 800199a:	f7ff fef7 	bl	800178c <lcdSendCmnd>
	lcdSendData('C');
 800199e:	2043      	movs	r0, #67	@ 0x43
 80019a0:	f7ff ff4c 	bl	800183c <lcdSendData>
	lcdSendData(getMode());
 80019a4:	f001 fce6 	bl	8003374 <getMode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff46 	bl	800183c <lcdSendData>

	if (getOnOff() == 0) {
 80019b0:	f001 fcfc 	bl	80033ac <getOnOff>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <lcdDisplayMode+0x34>

		lcdSendCmnd(0xCD);
 80019ba:	20cd      	movs	r0, #205	@ 0xcd
 80019bc:	f7ff fee6 	bl	800178c <lcdSendCmnd>
		lcdSendString("OFF");
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <lcdDisplayMode+0x44>)
 80019c2:	f7ff ff61 	bl	8001888 <lcdSendString>
	else {

		lcdSendCmnd(0xCD);
		lcdSendString(" ON");
	}
}
 80019c6:	e005      	b.n	80019d4 <lcdDisplayMode+0x40>
		lcdSendCmnd(0xCD);
 80019c8:	20cd      	movs	r0, #205	@ 0xcd
 80019ca:	f7ff fedf 	bl	800178c <lcdSendCmnd>
		lcdSendString(" ON");
 80019ce:	4803      	ldr	r0, [pc, #12]	@ (80019dc <lcdDisplayMode+0x48>)
 80019d0:	f7ff ff5a 	bl	8001888 <lcdSendString>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	0800f240 	.word	0x0800f240
 80019dc:	0800f244 	.word	0x0800f244

080019e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]

	volatile static uint16_t multiplyer = 1;
	static uint32_t last_clk_change = 0;
	static uint32_t last_sw_change = 0;
	uint32_t current_time = HAL_GetTick();
 80019ea:	f003 fb19 	bl	8005020 <HAL_GetTick>
 80019ee:	6178      	str	r0, [r7, #20]

	// FUNCIONALITY OF BUTTON B1
	if ((GPIO_Pin == GPIO_PIN_13) && (current_time - last_sw_change > 500)) {
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019f6:	d12f      	bne.n	8001a58 <HAL_GPIO_EXTI_Callback+0x78>
 80019f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x290>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a04:	d928      	bls.n	8001a58 <HAL_GPIO_EXTI_Callback+0x78>

		switch(_display) {
 8001a06:	4b9b      	ldr	r3, [pc, #620]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x294>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d81a      	bhi.n	8001a44 <HAL_GPIO_EXTI_Callback+0x64>
 8001a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a14 <HAL_GPIO_EXTI_Callback+0x34>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001a2d 	.word	0x08001a2d
 8001a1c:	08001a35 	.word	0x08001a35
 8001a20:	08001a3d 	.word	0x08001a3d

			case DEFAULT:
				_display = TURN;
 8001a24:	4b93      	ldr	r3, [pc, #588]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x294>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
				break;
 8001a2a:	e00f      	b.n	8001a4c <HAL_GPIO_EXTI_Callback+0x6c>
			case TURN:
				_display = MODE;
 8001a2c:	4b91      	ldr	r3, [pc, #580]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x294>)
 8001a2e:	2202      	movs	r2, #2
 8001a30:	701a      	strb	r2, [r3, #0]
				break;
 8001a32:	e00b      	b.n	8001a4c <HAL_GPIO_EXTI_Callback+0x6c>
			case MODE:
				_display = LOGGING;
 8001a34:	4b8f      	ldr	r3, [pc, #572]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x294>)
 8001a36:	2203      	movs	r2, #3
 8001a38:	701a      	strb	r2, [r3, #0]
				break;
 8001a3a:	e007      	b.n	8001a4c <HAL_GPIO_EXTI_Callback+0x6c>
			case LOGGING:
				_display = DEFAULT;
 8001a3c:	4b8d      	ldr	r3, [pc, #564]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x294>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
				break;
 8001a42:	e003      	b.n	8001a4c <HAL_GPIO_EXTI_Callback+0x6c>
			default:
				_display = DEFAULT;
 8001a44:	4b8b      	ldr	r3, [pc, #556]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x294>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
				break;
 8001a4a:	bf00      	nop
		}
		lcd_disp_flag = ON;
 8001a4c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x298>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
		last_sw_change = current_time;
 8001a52:	4a87      	ldr	r2, [pc, #540]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x290>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	6013      	str	r3, [r2, #0]
	}

	// FUNCTIONALITY OF CLK IMPULSATOR
	if ((GPIO_Pin == GPIO_PIN_12) && (current_time - last_clk_change > 200)) {
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a5e:	f040 809e 	bne.w	8001b9e <HAL_GPIO_EXTI_Callback+0x1be>
 8001a62:	4b86      	ldr	r3, [pc, #536]	@ (8001c7c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a6c:	f240 8097 	bls.w	8001b9e <HAL_GPIO_EXTI_Callback+0x1be>

		switch(_display) {
 8001a70:	4b80      	ldr	r3, [pc, #512]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x294>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	f200 8089 	bhi.w	8001b8c <HAL_GPIO_EXTI_Callback+0x1ac>
 8001a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001b45 	.word	0x08001b45
 8001a88:	08001b5b 	.word	0x08001b5b
 8001a8c:	08001b77 	.word	0x08001b77

			case DEFAULT:
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) != GPIO_PIN_RESET) {
 8001a90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a94:	487a      	ldr	r0, [pc, #488]	@ (8001c80 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001a96:	f004 f831 	bl	8005afc <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d028      	beq.n	8001af2 <HAL_GPIO_EXTI_Callback+0x112>

					float new_setpoint = getSetpoint() + (0.001 * (float)multiplyer);
 8001aa0:	f001 f92a 	bl	8002cf8 <getSetpoint>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fcd6 	bl	8000458 <__aeabi_f2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	4b74      	ldr	r3, [pc, #464]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f924 	bl	8000d04 <__aeabi_ui2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fcca 	bl	8000458 <__aeabi_f2d>
 8001ac4:	a368      	add	r3, pc, #416	@ (adr r3, 8001c68 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd1d 	bl	8000508 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7fe fb61 	bl	800019c <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f809 	bl	8000af8 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	60fb      	str	r3, [r7, #12]
					setSetpoint(new_setpoint);
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f001 f90e 	bl	8002d0c <setSetpoint>
				else {

					float new_setpoint = getSetpoint() - (0.001 * (float)multiplyer);
					setSetpoint(new_setpoint);
				}
				break;
 8001af0:	e04f      	b.n	8001b92 <HAL_GPIO_EXTI_Callback+0x1b2>
					float new_setpoint = getSetpoint() - (0.001 * (float)multiplyer);
 8001af2:	f001 f901 	bl	8002cf8 <getSetpoint>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fcad 	bl	8000458 <__aeabi_f2d>
 8001afe:	4604      	mov	r4, r0
 8001b00:	460d      	mov	r5, r1
 8001b02:	4b60      	ldr	r3, [pc, #384]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f8fb 	bl	8000d04 <__aeabi_ui2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fca1 	bl	8000458 <__aeabi_f2d>
 8001b16:	a354      	add	r3, pc, #336	@ (adr r3, 8001c68 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fcf4 	bl	8000508 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fb36 	bl	8000198 <__aeabi_dsub>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe ffe0 	bl	8000af8 <__aeabi_d2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	613b      	str	r3, [r7, #16]
					setSetpoint(new_setpoint);
 8001b3c:	6938      	ldr	r0, [r7, #16]
 8001b3e:	f001 f8e5 	bl	8002d0c <setSetpoint>
				break;
 8001b42:	e026      	b.n	8001b92 <HAL_GPIO_EXTI_Callback+0x1b2>
			case TURN:
				lcd_menu_idx = (lcd_menu_idx >= ON) ? OFF : ON;
 8001b44:	4b50      	ldr	r3, [pc, #320]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b4c      	ldr	r3, [pc, #304]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001b56:	701a      	strb	r2, [r3, #0]
				break;
 8001b58:	e01b      	b.n	8001b92 <HAL_GPIO_EXTI_Callback+0x1b2>
			case MODE:
				lcd_menu_idx += 1;
 8001b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b49      	ldr	r3, [pc, #292]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001b64:	701a      	strb	r2, [r3, #0]
				if (lcd_menu_idx > 2)
 8001b66:	4b48      	ldr	r3, [pc, #288]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d910      	bls.n	8001b90 <HAL_GPIO_EXTI_Callback+0x1b0>
					lcd_menu_idx = OFF;
 8001b6e:	4b46      	ldr	r3, [pc, #280]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
				break;
 8001b74:	e00c      	b.n	8001b90 <HAL_GPIO_EXTI_Callback+0x1b0>
			case LOGGING:
				lcd_menu_idx = (lcd_menu_idx >= ON) ? OFF : ON;
 8001b76:	4b44      	ldr	r3, [pc, #272]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b40      	ldr	r3, [pc, #256]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001b88:	701a      	strb	r2, [r3, #0]
				break;
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_EXTI_Callback+0x1b2>
			default:
				break;
 8001b8c:	bf00      	nop
 8001b8e:	e000      	b.n	8001b92 <HAL_GPIO_EXTI_Callback+0x1b2>
				break;
 8001b90:	bf00      	nop
		}
		lcd_update_flag = ON;
 8001b92:	4b3e      	ldr	r3, [pc, #248]	@ (8001c8c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
		last_clk_change = current_time;
 8001b98:	4a38      	ldr	r2, [pc, #224]	@ (8001c7c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	6013      	str	r3, [r2, #0]
	}

	// FUNCTIONALITY OF SWITCH IMPULSATOR
	if ((GPIO_Pin == iSW_exti_Pin) && (current_time - last_sw_change > 250)) {
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	2b80      	cmp	r3, #128	@ 0x80
 8001ba2:	d15d      	bne.n	8001c60 <HAL_GPIO_EXTI_Callback+0x280>
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x290>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2bfa      	cmp	r3, #250	@ 0xfa
 8001bae:	d957      	bls.n	8001c60 <HAL_GPIO_EXTI_Callback+0x280>

		switch(_display) {
 8001bb0:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x294>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d84a      	bhi.n	8001c4e <HAL_GPIO_EXTI_Callback+0x26e>
 8001bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bd1 	.word	0x08001bd1
 8001bc4:	08001bfb 	.word	0x08001bfb
 8001bc8:	08001c11 	.word	0x08001c11
 8001bcc:	08001c39 	.word	0x08001c39

			case DEFAULT:
				multiplyer *= 10;
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b28      	ldr	r3, [pc, #160]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001be2:	801a      	strh	r2, [r3, #0]
				if (multiplyer >= 10000)
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d92f      	bls.n	8001c52 <HAL_GPIO_EXTI_Callback+0x272>
					multiplyer = 1;
 8001bf2:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	801a      	strh	r2, [r3, #0]
				break;
 8001bf8:	e02b      	b.n	8001c52 <HAL_GPIO_EXTI_Callback+0x272>
			case TURN:
				setOnOff((lcd_menu_idx != 0) ? 1 : 0);
 8001bfa:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf14      	ite	ne
 8001c02:	2301      	movne	r3, #1
 8001c04:	2300      	moveq	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fbdb 	bl	80033c4 <setOnOff>
				break;
 8001c0e:	e021      	b.n	8001c54 <HAL_GPIO_EXTI_Callback+0x274>
			case MODE:
				if (lcd_menu_idx == CC)
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d103      	bne.n	8001c20 <HAL_GPIO_EXTI_Callback+0x240>
					setMode('C');
 8001c18:	2043      	movs	r0, #67	@ 0x43
 8001c1a:	f001 fbb7 	bl	800338c <setMode>
				else if (lcd_menu_idx == CR)
					setMode('R');
				else
					setMode('P');
				break;
 8001c1e:	e019      	b.n	8001c54 <HAL_GPIO_EXTI_Callback+0x274>
				else if (lcd_menu_idx == CR)
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d103      	bne.n	8001c30 <HAL_GPIO_EXTI_Callback+0x250>
					setMode('R');
 8001c28:	2052      	movs	r0, #82	@ 0x52
 8001c2a:	f001 fbaf 	bl	800338c <setMode>
				break;
 8001c2e:	e011      	b.n	8001c54 <HAL_GPIO_EXTI_Callback+0x274>
					setMode('P');
 8001c30:	2050      	movs	r0, #80	@ 0x50
 8001c32:	f001 fbab 	bl	800338c <setMode>
				break;
 8001c36:	e00d      	b.n	8001c54 <HAL_GPIO_EXTI_Callback+0x274>
			case LOGGING:
				setLogging((lcd_menu_idx != 0) ? 1 : 0);
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fbde 	bl	8003408 <setLogging>
				break;
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_EXTI_Callback+0x274>
			default:
				break;
 8001c4e:	bf00      	nop
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_EXTI_Callback+0x274>
				break;
 8001c52:	bf00      	nop
		}
		lcd_update_flag = ON;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
		last_sw_change = current_time;
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	6013      	str	r3, [r2, #0]
	}
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c6c:	3f50624d 	.word	0x3f50624d
 8001c70:	20000210 	.word	0x20000210
 8001c74:	2000020e 	.word	0x2000020e
 8001c78:	2000020d 	.word	0x2000020d
 8001c7c:	20000214 	.word	0x20000214
 8001c80:	40020000 	.word	0x40020000
 8001c84:	20000000 	.word	0x20000000
 8001c88:	2000020f 	.word	0x2000020f
 8001c8c:	2000020c 	.word	0x2000020c

08001c90 <lcdCheckForUpdate>:

void lcdCheckForUpdate(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	static uint8_t prev_mode = 'C';
	static uint8_t prev_onOff = 0;
	static uint8_t prev_logging = 0;
	static uint32_t last_change = 0;

	uint32_t current_time = HAL_GetTick();
 8001c96:	f003 f9c3 	bl	8005020 <HAL_GetTick>
 8001c9a:	6078      	str	r0, [r7, #4]

	if (lcd_disp_flag == ON) {
 8001c9c:	4bd9      	ldr	r3, [pc, #868]	@ (8002004 <lcdCheckForUpdate+0x374>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f040 80e7 	bne.w	8001e76 <lcdCheckForUpdate+0x1e6>
		lcd_disp_flag = OFF;
 8001ca8:	4bd6      	ldr	r3, [pc, #856]	@ (8002004 <lcdCheckForUpdate+0x374>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]

		switch(_display) {
 8001cae:	4bd6      	ldr	r3, [pc, #856]	@ (8002008 <lcdCheckForUpdate+0x378>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	f200 80df 	bhi.w	8001e76 <lcdCheckForUpdate+0x1e6>
 8001cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc0 <lcdCheckForUpdate+0x30>)
 8001cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cbe:	bf00      	nop
 8001cc0:	08001cd1 	.word	0x08001cd1
 8001cc4:	08001ceb 	.word	0x08001ceb
 8001cc8:	08001d53 	.word	0x08001d53
 8001ccc:	08001e0f 	.word	0x08001e0f

		case DEFAULT:
			lcdSendCmnd(0x01);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff fd5b 	bl	800178c <lcdSendCmnd>
			lcdDisplayMeasurement();
 8001cd6:	f7ff fded 	bl	80018b4 <lcdDisplayMeasurement>
			lcdDisplaySetpoint();
 8001cda:	f7ff fe21 	bl	8001920 <lcdDisplaySetpoint>
			lcdDisplayMode();
 8001cde:	f7ff fe59 	bl	8001994 <lcdDisplayMode>
			last_change = current_time;
 8001ce2:	4aca      	ldr	r2, [pc, #808]	@ (800200c <lcdCheckForUpdate+0x37c>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6013      	str	r3, [r2, #0]
			break;
 8001ce8:	e0c5      	b.n	8001e76 <lcdCheckForUpdate+0x1e6>
		case TURN:
			lcdSendCmnd(0x01);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff fd4e 	bl	800178c <lcdSendCmnd>
			lcdSendCmnd(0x86);
 8001cf0:	2086      	movs	r0, #134	@ 0x86
 8001cf2:	f7ff fd4b 	bl	800178c <lcdSendCmnd>
			lcdSendString("[OFF]");
 8001cf6:	48c6      	ldr	r0, [pc, #792]	@ (8002010 <lcdCheckForUpdate+0x380>)
 8001cf8:	f7ff fdc6 	bl	8001888 <lcdSendString>
			lcdSendCmnd(0xC7);
 8001cfc:	20c7      	movs	r0, #199	@ 0xc7
 8001cfe:	f7ff fd45 	bl	800178c <lcdSendCmnd>
			lcdSendString("ON");
 8001d02:	48c4      	ldr	r0, [pc, #784]	@ (8002014 <lcdCheckForUpdate+0x384>)
 8001d04:	f7ff fdc0 	bl	8001888 <lcdSendString>
			lcdSendCmnd(0xCE);
 8001d08:	20ce      	movs	r0, #206	@ 0xce
 8001d0a:	f7ff fd3f 	bl	800178c <lcdSendCmnd>
			lcdSendString("O/");
 8001d0e:	48c2      	ldr	r0, [pc, #776]	@ (8002018 <lcdCheckForUpdate+0x388>)
 8001d10:	f7ff fdba 	bl	8001888 <lcdSendString>
			if (getOnOff() == 0) {lcdSendCmnd(0x85); lcdSendData('_'); lcdSendCmnd(0xC5); lcdSendData(' ');}
 8001d14:	f001 fb4a 	bl	80033ac <getOnOff>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <lcdCheckForUpdate+0xa8>
 8001d1e:	2085      	movs	r0, #133	@ 0x85
 8001d20:	f7ff fd34 	bl	800178c <lcdSendCmnd>
 8001d24:	205f      	movs	r0, #95	@ 0x5f
 8001d26:	f7ff fd89 	bl	800183c <lcdSendData>
 8001d2a:	20c5      	movs	r0, #197	@ 0xc5
 8001d2c:	f7ff fd2e 	bl	800178c <lcdSendCmnd>
 8001d30:	2020      	movs	r0, #32
 8001d32:	f7ff fd83 	bl	800183c <lcdSendData>
			else {lcdSendCmnd(0xC5); lcdSendData('_'); lcdSendCmnd(0x85); lcdSendData(' ');}
			break;
 8001d36:	e09e      	b.n	8001e76 <lcdCheckForUpdate+0x1e6>
			else {lcdSendCmnd(0xC5); lcdSendData('_'); lcdSendCmnd(0x85); lcdSendData(' ');}
 8001d38:	20c5      	movs	r0, #197	@ 0xc5
 8001d3a:	f7ff fd27 	bl	800178c <lcdSendCmnd>
 8001d3e:	205f      	movs	r0, #95	@ 0x5f
 8001d40:	f7ff fd7c 	bl	800183c <lcdSendData>
 8001d44:	2085      	movs	r0, #133	@ 0x85
 8001d46:	f7ff fd21 	bl	800178c <lcdSendCmnd>
 8001d4a:	2020      	movs	r0, #32
 8001d4c:	f7ff fd76 	bl	800183c <lcdSendData>
			break;
 8001d50:	e091      	b.n	8001e76 <lcdCheckForUpdate+0x1e6>
		case MODE:
			// ADD a title
			lcdSendCmnd(0x01);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff fd1a 	bl	800178c <lcdSendCmnd>
			lcdSendCmnd(0x81);
 8001d58:	2081      	movs	r0, #129	@ 0x81
 8001d5a:	f7ff fd17 	bl	800178c <lcdSendCmnd>
			lcdSendString("[CC]");
 8001d5e:	48af      	ldr	r0, [pc, #700]	@ (800201c <lcdCheckForUpdate+0x38c>)
 8001d60:	f7ff fd92 	bl	8001888 <lcdSendString>
			lcdSendCmnd(0x8B);
 8001d64:	208b      	movs	r0, #139	@ 0x8b
 8001d66:	f7ff fd11 	bl	800178c <lcdSendCmnd>
			lcdSendString("CR");
 8001d6a:	48ad      	ldr	r0, [pc, #692]	@ (8002020 <lcdCheckForUpdate+0x390>)
 8001d6c:	f7ff fd8c 	bl	8001888 <lcdSendString>
			lcdSendCmnd(0xC7);
 8001d70:	20c7      	movs	r0, #199	@ 0xc7
 8001d72:	f7ff fd0b 	bl	800178c <lcdSendCmnd>
			lcdSendString("CP");
 8001d76:	48ab      	ldr	r0, [pc, #684]	@ (8002024 <lcdCheckForUpdate+0x394>)
 8001d78:	f7ff fd86 	bl	8001888 <lcdSendString>
			lcdSendCmnd(0xCF);
 8001d7c:	20cf      	movs	r0, #207	@ 0xcf
 8001d7e:	f7ff fd05 	bl	800178c <lcdSendCmnd>
			lcdSendString("M");
 8001d82:	48a9      	ldr	r0, [pc, #676]	@ (8002028 <lcdCheckForUpdate+0x398>)
 8001d84:	f7ff fd80 	bl	8001888 <lcdSendString>
			if (getMode() == 'C') {lcdSendCmnd(0x80); lcdSendData('_'); lcdSendCmnd(0x89); lcdSendData(' '); lcdSendCmnd(0xC5); lcdSendData(' ');}
 8001d88:	f001 faf4 	bl	8003374 <getMode>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b43      	cmp	r3, #67	@ 0x43
 8001d90:	d112      	bne.n	8001db8 <lcdCheckForUpdate+0x128>
 8001d92:	2080      	movs	r0, #128	@ 0x80
 8001d94:	f7ff fcfa 	bl	800178c <lcdSendCmnd>
 8001d98:	205f      	movs	r0, #95	@ 0x5f
 8001d9a:	f7ff fd4f 	bl	800183c <lcdSendData>
 8001d9e:	2089      	movs	r0, #137	@ 0x89
 8001da0:	f7ff fcf4 	bl	800178c <lcdSendCmnd>
 8001da4:	2020      	movs	r0, #32
 8001da6:	f7ff fd49 	bl	800183c <lcdSendData>
 8001daa:	20c5      	movs	r0, #197	@ 0xc5
 8001dac:	f7ff fcee 	bl	800178c <lcdSendCmnd>
 8001db0:	2020      	movs	r0, #32
 8001db2:	f7ff fd43 	bl	800183c <lcdSendData>
			else if (getMode() == 'R') {lcdSendCmnd(0x80); lcdSendData(' '); lcdSendCmnd(0x89); lcdSendData('_'); lcdSendCmnd(0xC5); lcdSendData(' ');}
			else {lcdSendCmnd(0x80); lcdSendData(' '); lcdSendCmnd(0x89); lcdSendData(' '); lcdSendCmnd(0xC5); lcdSendData('_');}
			break;
 8001db6:	e05e      	b.n	8001e76 <lcdCheckForUpdate+0x1e6>
			else if (getMode() == 'R') {lcdSendCmnd(0x80); lcdSendData(' '); lcdSendCmnd(0x89); lcdSendData('_'); lcdSendCmnd(0xC5); lcdSendData(' ');}
 8001db8:	f001 fadc 	bl	8003374 <getMode>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b52      	cmp	r3, #82	@ 0x52
 8001dc0:	d112      	bne.n	8001de8 <lcdCheckForUpdate+0x158>
 8001dc2:	2080      	movs	r0, #128	@ 0x80
 8001dc4:	f7ff fce2 	bl	800178c <lcdSendCmnd>
 8001dc8:	2020      	movs	r0, #32
 8001dca:	f7ff fd37 	bl	800183c <lcdSendData>
 8001dce:	2089      	movs	r0, #137	@ 0x89
 8001dd0:	f7ff fcdc 	bl	800178c <lcdSendCmnd>
 8001dd4:	205f      	movs	r0, #95	@ 0x5f
 8001dd6:	f7ff fd31 	bl	800183c <lcdSendData>
 8001dda:	20c5      	movs	r0, #197	@ 0xc5
 8001ddc:	f7ff fcd6 	bl	800178c <lcdSendCmnd>
 8001de0:	2020      	movs	r0, #32
 8001de2:	f7ff fd2b 	bl	800183c <lcdSendData>
			break;
 8001de6:	e046      	b.n	8001e76 <lcdCheckForUpdate+0x1e6>
			else {lcdSendCmnd(0x80); lcdSendData(' '); lcdSendCmnd(0x89); lcdSendData(' '); lcdSendCmnd(0xC5); lcdSendData('_');}
 8001de8:	2080      	movs	r0, #128	@ 0x80
 8001dea:	f7ff fccf 	bl	800178c <lcdSendCmnd>
 8001dee:	2020      	movs	r0, #32
 8001df0:	f7ff fd24 	bl	800183c <lcdSendData>
 8001df4:	2089      	movs	r0, #137	@ 0x89
 8001df6:	f7ff fcc9 	bl	800178c <lcdSendCmnd>
 8001dfa:	2020      	movs	r0, #32
 8001dfc:	f7ff fd1e 	bl	800183c <lcdSendData>
 8001e00:	20c5      	movs	r0, #197	@ 0xc5
 8001e02:	f7ff fcc3 	bl	800178c <lcdSendCmnd>
 8001e06:	205f      	movs	r0, #95	@ 0x5f
 8001e08:	f7ff fd18 	bl	800183c <lcdSendData>
			break;
 8001e0c:	e033      	b.n	8001e76 <lcdCheckForUpdate+0x1e6>
		case LOGGING:
			// ADD a title
			lcdSendCmnd(0x01);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7ff fcbc 	bl	800178c <lcdSendCmnd>
			lcdSendCmnd(0x86);
 8001e14:	2086      	movs	r0, #134	@ 0x86
 8001e16:	f7ff fcb9 	bl	800178c <lcdSendCmnd>
			lcdSendString("[OFF]");
 8001e1a:	487d      	ldr	r0, [pc, #500]	@ (8002010 <lcdCheckForUpdate+0x380>)
 8001e1c:	f7ff fd34 	bl	8001888 <lcdSendString>
			lcdSendCmnd(0xC7);
 8001e20:	20c7      	movs	r0, #199	@ 0xc7
 8001e22:	f7ff fcb3 	bl	800178c <lcdSendCmnd>
			lcdSendString("ON");
 8001e26:	487b      	ldr	r0, [pc, #492]	@ (8002014 <lcdCheckForUpdate+0x384>)
 8001e28:	f7ff fd2e 	bl	8001888 <lcdSendString>
			lcdSendCmnd(0xCF);
 8001e2c:	20cf      	movs	r0, #207	@ 0xcf
 8001e2e:	f7ff fcad 	bl	800178c <lcdSendCmnd>
			lcdSendString("L");
 8001e32:	487e      	ldr	r0, [pc, #504]	@ (800202c <lcdCheckForUpdate+0x39c>)
 8001e34:	f7ff fd28 	bl	8001888 <lcdSendString>
			if (getLogging() == 0) {lcdSendCmnd(0x85); lcdSendData('_'); lcdSendCmnd(0xC5); lcdSendData(' ');}
 8001e38:	f001 fada 	bl	80033f0 <getLogging>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <lcdCheckForUpdate+0x1cc>
 8001e42:	2085      	movs	r0, #133	@ 0x85
 8001e44:	f7ff fca2 	bl	800178c <lcdSendCmnd>
 8001e48:	205f      	movs	r0, #95	@ 0x5f
 8001e4a:	f7ff fcf7 	bl	800183c <lcdSendData>
 8001e4e:	20c5      	movs	r0, #197	@ 0xc5
 8001e50:	f7ff fc9c 	bl	800178c <lcdSendCmnd>
 8001e54:	2020      	movs	r0, #32
 8001e56:	f7ff fcf1 	bl	800183c <lcdSendData>
			else {lcdSendCmnd(0xC5); lcdSendData('_'); lcdSendCmnd(0x85); lcdSendData(' ');}
			break;
 8001e5a:	e00b      	b.n	8001e74 <lcdCheckForUpdate+0x1e4>
			else {lcdSendCmnd(0xC5); lcdSendData('_'); lcdSendCmnd(0x85); lcdSendData(' ');}
 8001e5c:	20c5      	movs	r0, #197	@ 0xc5
 8001e5e:	f7ff fc95 	bl	800178c <lcdSendCmnd>
 8001e62:	205f      	movs	r0, #95	@ 0x5f
 8001e64:	f7ff fcea 	bl	800183c <lcdSendData>
 8001e68:	2085      	movs	r0, #133	@ 0x85
 8001e6a:	f7ff fc8f 	bl	800178c <lcdSendCmnd>
 8001e6e:	2020      	movs	r0, #32
 8001e70:	f7ff fce4 	bl	800183c <lcdSendData>
			break;
 8001e74:	bf00      	nop
		}
	}

	if (lcd_update_flag == ON) {
 8001e76:	4b6e      	ldr	r3, [pc, #440]	@ (8002030 <lcdCheckForUpdate+0x3a0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	f040 8111 	bne.w	80020a4 <lcdCheckForUpdate+0x414>
		lcd_update_flag = OFF;
 8001e82:	4b6b      	ldr	r3, [pc, #428]	@ (8002030 <lcdCheckForUpdate+0x3a0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]

		switch(_display) {
 8001e88:	4b5f      	ldr	r3, [pc, #380]	@ (8002008 <lcdCheckForUpdate+0x378>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	f200 8109 	bhi.w	80020a4 <lcdCheckForUpdate+0x414>
 8001e92:	a201      	add	r2, pc, #4	@ (adr r2, 8001e98 <lcdCheckForUpdate+0x208>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	080020a5 	.word	0x080020a5
 8001e9c:	08001ea9 	.word	0x08001ea9
 8001ea0:	08001f15 	.word	0x08001f15
 8001ea4:	08002039 	.word	0x08002039

		case DEFAULT:
			break;
		case TURN:
			if (lcd_menu_idx == OFF) { lcdSendCmnd(0xC6); lcdSendData(' '); lcdSendCmnd(0xC9); lcdSendData(' ');
 8001ea8:	4b62      	ldr	r3, [pc, #392]	@ (8002034 <lcdCheckForUpdate+0x3a4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d118      	bne.n	8001ee2 <lcdCheckForUpdate+0x252>
 8001eb0:	20c6      	movs	r0, #198	@ 0xc6
 8001eb2:	f7ff fc6b 	bl	800178c <lcdSendCmnd>
 8001eb6:	2020      	movs	r0, #32
 8001eb8:	f7ff fcc0 	bl	800183c <lcdSendData>
 8001ebc:	20c9      	movs	r0, #201	@ 0xc9
 8001ebe:	f7ff fc65 	bl	800178c <lcdSendCmnd>
 8001ec2:	2020      	movs	r0, #32
 8001ec4:	f7ff fcba 	bl	800183c <lcdSendData>
										lcdSendCmnd(0x86); lcdSendData('['); lcdSendCmnd(0x8A); lcdSendData(']');}
 8001ec8:	2086      	movs	r0, #134	@ 0x86
 8001eca:	f7ff fc5f 	bl	800178c <lcdSendCmnd>
 8001ece:	205b      	movs	r0, #91	@ 0x5b
 8001ed0:	f7ff fcb4 	bl	800183c <lcdSendData>
 8001ed4:	208a      	movs	r0, #138	@ 0x8a
 8001ed6:	f7ff fc59 	bl	800178c <lcdSendCmnd>
 8001eda:	205d      	movs	r0, #93	@ 0x5d
 8001edc:	f7ff fcae 	bl	800183c <lcdSendData>
			else { lcdSendCmnd(0xC6); lcdSendData('['); lcdSendCmnd(0xC9); lcdSendData(']');
					lcdSendCmnd(0x86); lcdSendData(' '); lcdSendCmnd(0x8A); lcdSendData(' ');}
			break;
 8001ee0:	e0e0      	b.n	80020a4 <lcdCheckForUpdate+0x414>
			else { lcdSendCmnd(0xC6); lcdSendData('['); lcdSendCmnd(0xC9); lcdSendData(']');
 8001ee2:	20c6      	movs	r0, #198	@ 0xc6
 8001ee4:	f7ff fc52 	bl	800178c <lcdSendCmnd>
 8001ee8:	205b      	movs	r0, #91	@ 0x5b
 8001eea:	f7ff fca7 	bl	800183c <lcdSendData>
 8001eee:	20c9      	movs	r0, #201	@ 0xc9
 8001ef0:	f7ff fc4c 	bl	800178c <lcdSendCmnd>
 8001ef4:	205d      	movs	r0, #93	@ 0x5d
 8001ef6:	f7ff fca1 	bl	800183c <lcdSendData>
					lcdSendCmnd(0x86); lcdSendData(' '); lcdSendCmnd(0x8A); lcdSendData(' ');}
 8001efa:	2086      	movs	r0, #134	@ 0x86
 8001efc:	f7ff fc46 	bl	800178c <lcdSendCmnd>
 8001f00:	2020      	movs	r0, #32
 8001f02:	f7ff fc9b 	bl	800183c <lcdSendData>
 8001f06:	208a      	movs	r0, #138	@ 0x8a
 8001f08:	f7ff fc40 	bl	800178c <lcdSendCmnd>
 8001f0c:	2020      	movs	r0, #32
 8001f0e:	f7ff fc95 	bl	800183c <lcdSendData>
			break;
 8001f12:	e0c7      	b.n	80020a4 <lcdCheckForUpdate+0x414>
		case MODE:
			if (lcd_menu_idx == OFF) { lcdSendCmnd(0xC6); lcdSendData(' '); lcdSendCmnd(0xC9); lcdSendData(' ');
 8001f14:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <lcdCheckForUpdate+0x3a4>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d124      	bne.n	8001f66 <lcdCheckForUpdate+0x2d6>
 8001f1c:	20c6      	movs	r0, #198	@ 0xc6
 8001f1e:	f7ff fc35 	bl	800178c <lcdSendCmnd>
 8001f22:	2020      	movs	r0, #32
 8001f24:	f7ff fc8a 	bl	800183c <lcdSendData>
 8001f28:	20c9      	movs	r0, #201	@ 0xc9
 8001f2a:	f7ff fc2f 	bl	800178c <lcdSendCmnd>
 8001f2e:	2020      	movs	r0, #32
 8001f30:	f7ff fc84 	bl	800183c <lcdSendData>
										lcdSendCmnd(0x8A); lcdSendData(' '); lcdSendCmnd(0x8D); lcdSendData(' ');
 8001f34:	208a      	movs	r0, #138	@ 0x8a
 8001f36:	f7ff fc29 	bl	800178c <lcdSendCmnd>
 8001f3a:	2020      	movs	r0, #32
 8001f3c:	f7ff fc7e 	bl	800183c <lcdSendData>
 8001f40:	208d      	movs	r0, #141	@ 0x8d
 8001f42:	f7ff fc23 	bl	800178c <lcdSendCmnd>
 8001f46:	2020      	movs	r0, #32
 8001f48:	f7ff fc78 	bl	800183c <lcdSendData>
										lcdSendCmnd(0x81); lcdSendData('['); lcdSendCmnd(0x84); lcdSendData(']');}
 8001f4c:	2081      	movs	r0, #129	@ 0x81
 8001f4e:	f7ff fc1d 	bl	800178c <lcdSendCmnd>
 8001f52:	205b      	movs	r0, #91	@ 0x5b
 8001f54:	f7ff fc72 	bl	800183c <lcdSendData>
 8001f58:	2084      	movs	r0, #132	@ 0x84
 8001f5a:	f7ff fc17 	bl	800178c <lcdSendCmnd>
 8001f5e:	205d      	movs	r0, #93	@ 0x5d
 8001f60:	f7ff fc6c 	bl	800183c <lcdSendData>
											lcdSendCmnd(0x8A); lcdSendData('['); lcdSendCmnd(0x8D); lcdSendData(']');
											lcdSendCmnd(0x81); lcdSendData(' '); lcdSendCmnd(0x84); lcdSendData(' ');}
			else { lcdSendCmnd(0xC6); lcdSendData('['); lcdSendCmnd(0xC9); lcdSendData(']');
					lcdSendCmnd(0x8A); lcdSendData(' '); lcdSendCmnd(0x8D); lcdSendData(' ');
					lcdSendCmnd(0x81); lcdSendData(' '); lcdSendCmnd(0x84); lcdSendData(' ');}
			break;
 8001f64:	e09e      	b.n	80020a4 <lcdCheckForUpdate+0x414>
			else if (lcd_menu_idx == ON) { lcdSendCmnd(0xC6); lcdSendData(' '); lcdSendCmnd(0xC9); lcdSendData(' ');
 8001f66:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <lcdCheckForUpdate+0x3a4>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d124      	bne.n	8001fb8 <lcdCheckForUpdate+0x328>
 8001f6e:	20c6      	movs	r0, #198	@ 0xc6
 8001f70:	f7ff fc0c 	bl	800178c <lcdSendCmnd>
 8001f74:	2020      	movs	r0, #32
 8001f76:	f7ff fc61 	bl	800183c <lcdSendData>
 8001f7a:	20c9      	movs	r0, #201	@ 0xc9
 8001f7c:	f7ff fc06 	bl	800178c <lcdSendCmnd>
 8001f80:	2020      	movs	r0, #32
 8001f82:	f7ff fc5b 	bl	800183c <lcdSendData>
											lcdSendCmnd(0x8A); lcdSendData('['); lcdSendCmnd(0x8D); lcdSendData(']');
 8001f86:	208a      	movs	r0, #138	@ 0x8a
 8001f88:	f7ff fc00 	bl	800178c <lcdSendCmnd>
 8001f8c:	205b      	movs	r0, #91	@ 0x5b
 8001f8e:	f7ff fc55 	bl	800183c <lcdSendData>
 8001f92:	208d      	movs	r0, #141	@ 0x8d
 8001f94:	f7ff fbfa 	bl	800178c <lcdSendCmnd>
 8001f98:	205d      	movs	r0, #93	@ 0x5d
 8001f9a:	f7ff fc4f 	bl	800183c <lcdSendData>
											lcdSendCmnd(0x81); lcdSendData(' '); lcdSendCmnd(0x84); lcdSendData(' ');}
 8001f9e:	2081      	movs	r0, #129	@ 0x81
 8001fa0:	f7ff fbf4 	bl	800178c <lcdSendCmnd>
 8001fa4:	2020      	movs	r0, #32
 8001fa6:	f7ff fc49 	bl	800183c <lcdSendData>
 8001faa:	2084      	movs	r0, #132	@ 0x84
 8001fac:	f7ff fbee 	bl	800178c <lcdSendCmnd>
 8001fb0:	2020      	movs	r0, #32
 8001fb2:	f7ff fc43 	bl	800183c <lcdSendData>
			break;
 8001fb6:	e075      	b.n	80020a4 <lcdCheckForUpdate+0x414>
			else { lcdSendCmnd(0xC6); lcdSendData('['); lcdSendCmnd(0xC9); lcdSendData(']');
 8001fb8:	20c6      	movs	r0, #198	@ 0xc6
 8001fba:	f7ff fbe7 	bl	800178c <lcdSendCmnd>
 8001fbe:	205b      	movs	r0, #91	@ 0x5b
 8001fc0:	f7ff fc3c 	bl	800183c <lcdSendData>
 8001fc4:	20c9      	movs	r0, #201	@ 0xc9
 8001fc6:	f7ff fbe1 	bl	800178c <lcdSendCmnd>
 8001fca:	205d      	movs	r0, #93	@ 0x5d
 8001fcc:	f7ff fc36 	bl	800183c <lcdSendData>
					lcdSendCmnd(0x8A); lcdSendData(' '); lcdSendCmnd(0x8D); lcdSendData(' ');
 8001fd0:	208a      	movs	r0, #138	@ 0x8a
 8001fd2:	f7ff fbdb 	bl	800178c <lcdSendCmnd>
 8001fd6:	2020      	movs	r0, #32
 8001fd8:	f7ff fc30 	bl	800183c <lcdSendData>
 8001fdc:	208d      	movs	r0, #141	@ 0x8d
 8001fde:	f7ff fbd5 	bl	800178c <lcdSendCmnd>
 8001fe2:	2020      	movs	r0, #32
 8001fe4:	f7ff fc2a 	bl	800183c <lcdSendData>
					lcdSendCmnd(0x81); lcdSendData(' '); lcdSendCmnd(0x84); lcdSendData(' ');}
 8001fe8:	2081      	movs	r0, #129	@ 0x81
 8001fea:	f7ff fbcf 	bl	800178c <lcdSendCmnd>
 8001fee:	2020      	movs	r0, #32
 8001ff0:	f7ff fc24 	bl	800183c <lcdSendData>
 8001ff4:	2084      	movs	r0, #132	@ 0x84
 8001ff6:	f7ff fbc9 	bl	800178c <lcdSendCmnd>
 8001ffa:	2020      	movs	r0, #32
 8001ffc:	f7ff fc1e 	bl	800183c <lcdSendData>
			break;
 8002000:	e050      	b.n	80020a4 <lcdCheckForUpdate+0x414>
 8002002:	bf00      	nop
 8002004:	2000020d 	.word	0x2000020d
 8002008:	2000020e 	.word	0x2000020e
 800200c:	20000218 	.word	0x20000218
 8002010:	0800f248 	.word	0x0800f248
 8002014:	0800f250 	.word	0x0800f250
 8002018:	0800f254 	.word	0x0800f254
 800201c:	0800f258 	.word	0x0800f258
 8002020:	0800f260 	.word	0x0800f260
 8002024:	0800f264 	.word	0x0800f264
 8002028:	0800f268 	.word	0x0800f268
 800202c:	0800f26c 	.word	0x0800f26c
 8002030:	2000020c 	.word	0x2000020c
 8002034:	2000020f 	.word	0x2000020f
		case LOGGING:
			if (lcd_menu_idx == OFF) { lcdSendCmnd(0xC6); lcdSendData(' '); lcdSendCmnd(0xC9); lcdSendData(' ');
 8002038:	4bc0      	ldr	r3, [pc, #768]	@ (800233c <lcdCheckForUpdate+0x6ac>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d118      	bne.n	8002072 <lcdCheckForUpdate+0x3e2>
 8002040:	20c6      	movs	r0, #198	@ 0xc6
 8002042:	f7ff fba3 	bl	800178c <lcdSendCmnd>
 8002046:	2020      	movs	r0, #32
 8002048:	f7ff fbf8 	bl	800183c <lcdSendData>
 800204c:	20c9      	movs	r0, #201	@ 0xc9
 800204e:	f7ff fb9d 	bl	800178c <lcdSendCmnd>
 8002052:	2020      	movs	r0, #32
 8002054:	f7ff fbf2 	bl	800183c <lcdSendData>
										lcdSendCmnd(0x86); lcdSendData('['); lcdSendCmnd(0x8A); lcdSendData(']');}
 8002058:	2086      	movs	r0, #134	@ 0x86
 800205a:	f7ff fb97 	bl	800178c <lcdSendCmnd>
 800205e:	205b      	movs	r0, #91	@ 0x5b
 8002060:	f7ff fbec 	bl	800183c <lcdSendData>
 8002064:	208a      	movs	r0, #138	@ 0x8a
 8002066:	f7ff fb91 	bl	800178c <lcdSendCmnd>
 800206a:	205d      	movs	r0, #93	@ 0x5d
 800206c:	f7ff fbe6 	bl	800183c <lcdSendData>
			else { lcdSendCmnd(0xC6); lcdSendData('['); lcdSendCmnd(0xC9); lcdSendData(']');
					lcdSendCmnd(0x86); lcdSendData(' '); lcdSendCmnd(0x8A); lcdSendData(' ');}
			break;
 8002070:	e017      	b.n	80020a2 <lcdCheckForUpdate+0x412>
			else { lcdSendCmnd(0xC6); lcdSendData('['); lcdSendCmnd(0xC9); lcdSendData(']');
 8002072:	20c6      	movs	r0, #198	@ 0xc6
 8002074:	f7ff fb8a 	bl	800178c <lcdSendCmnd>
 8002078:	205b      	movs	r0, #91	@ 0x5b
 800207a:	f7ff fbdf 	bl	800183c <lcdSendData>
 800207e:	20c9      	movs	r0, #201	@ 0xc9
 8002080:	f7ff fb84 	bl	800178c <lcdSendCmnd>
 8002084:	205d      	movs	r0, #93	@ 0x5d
 8002086:	f7ff fbd9 	bl	800183c <lcdSendData>
					lcdSendCmnd(0x86); lcdSendData(' '); lcdSendCmnd(0x8A); lcdSendData(' ');}
 800208a:	2086      	movs	r0, #134	@ 0x86
 800208c:	f7ff fb7e 	bl	800178c <lcdSendCmnd>
 8002090:	2020      	movs	r0, #32
 8002092:	f7ff fbd3 	bl	800183c <lcdSendData>
 8002096:	208a      	movs	r0, #138	@ 0x8a
 8002098:	f7ff fb78 	bl	800178c <lcdSendCmnd>
 800209c:	2020      	movs	r0, #32
 800209e:	f7ff fbcd 	bl	800183c <lcdSendData>
			break;
 80020a2:	bf00      	nop
		}
	}

	if (_display == DEFAULT && (current_time-last_change) >= 3000) {		//____________________________
 80020a4:	4ba6      	ldr	r3, [pc, #664]	@ (8002340 <lcdCheckForUpdate+0x6b0>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d15f      	bne.n	800216c <lcdCheckForUpdate+0x4dc>
 80020ac:	4ba5      	ldr	r3, [pc, #660]	@ (8002344 <lcdCheckForUpdate+0x6b4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d957      	bls.n	800216c <lcdCheckForUpdate+0x4dc>

		if (prev_setpoint != getSetpoint()) {
 80020bc:	f000 fe1c 	bl	8002cf8 <getSetpoint>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4ba1      	ldr	r3, [pc, #644]	@ (8002348 <lcdCheckForUpdate+0x6b8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f7ff f807 	bl	80010dc <__aeabi_fcmpeq>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <lcdCheckForUpdate+0x452>

			prev_setpoint = getSetpoint();
 80020d4:	f000 fe10 	bl	8002cf8 <getSetpoint>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a9b      	ldr	r2, [pc, #620]	@ (8002348 <lcdCheckForUpdate+0x6b8>)
 80020dc:	6013      	str	r3, [r2, #0]
			lcdDisplaySetpoint();
 80020de:	f7ff fc1f 	bl	8001920 <lcdDisplaySetpoint>
		}

		if (prev_mode != getMode() || prev_onOff != getOnOff()) {
 80020e2:	f001 f947 	bl	8003374 <getMode>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b98      	ldr	r3, [pc, #608]	@ (800234c <lcdCheckForUpdate+0x6bc>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d107      	bne.n	8002102 <lcdCheckForUpdate+0x472>
 80020f2:	f001 f95b 	bl	80033ac <getOnOff>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b95      	ldr	r3, [pc, #596]	@ (8002350 <lcdCheckForUpdate+0x6c0>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d00d      	beq.n	800211e <lcdCheckForUpdate+0x48e>

			prev_mode = getMode();
 8002102:	f001 f937 	bl	8003374 <getMode>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	4b90      	ldr	r3, [pc, #576]	@ (800234c <lcdCheckForUpdate+0x6bc>)
 800210c:	701a      	strb	r2, [r3, #0]
			prev_onOff = getOnOff();
 800210e:	f001 f94d 	bl	80033ac <getOnOff>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	4b8e      	ldr	r3, [pc, #568]	@ (8002350 <lcdCheckForUpdate+0x6c0>)
 8002118:	701a      	strb	r2, [r3, #0]
			lcdDisplayMode();
 800211a:	f7ff fc3b 	bl	8001994 <lcdDisplayMode>
		}

		if (prev_current != getCurrent() || prev_battery_voltage != getBatteryVoltage()) {
 800211e:	f000 fe71 	bl	8002e04 <getCurrent>
 8002122:	4602      	mov	r2, r0
 8002124:	4b8b      	ldr	r3, [pc, #556]	@ (8002354 <lcdCheckForUpdate+0x6c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f7fe ffd6 	bl	80010dc <__aeabi_fcmpeq>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <lcdCheckForUpdate+0x4be>
 8002136:	f000 ffdd 	bl	80030f4 <getBatteryVoltage>
 800213a:	4602      	mov	r2, r0
 800213c:	4b86      	ldr	r3, [pc, #536]	@ (8002358 <lcdCheckForUpdate+0x6c8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f7fe ffca 	bl	80010dc <__aeabi_fcmpeq>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10b      	bne.n	8002166 <lcdCheckForUpdate+0x4d6>

			prev_current = getCurrent();
 800214e:	f000 fe59 	bl	8002e04 <getCurrent>
 8002152:	4603      	mov	r3, r0
 8002154:	4a7f      	ldr	r2, [pc, #508]	@ (8002354 <lcdCheckForUpdate+0x6c4>)
 8002156:	6013      	str	r3, [r2, #0]
			prev_battery_voltage = getBatteryVoltage();
 8002158:	f000 ffcc 	bl	80030f4 <getBatteryVoltage>
 800215c:	4603      	mov	r3, r0
 800215e:	4a7e      	ldr	r2, [pc, #504]	@ (8002358 <lcdCheckForUpdate+0x6c8>)
 8002160:	6013      	str	r3, [r2, #0]
			lcdDisplayMeasurement();
 8002162:	f7ff fba7 	bl	80018b4 <lcdDisplayMeasurement>
		}

		last_change = current_time;
 8002166:	4a77      	ldr	r2, [pc, #476]	@ (8002344 <lcdCheckForUpdate+0x6b4>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6013      	str	r3, [r2, #0]
	}

	if (_display == TURN || _display == LOGGING) {
 800216c:	4b74      	ldr	r3, [pc, #464]	@ (8002340 <lcdCheckForUpdate+0x6b0>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d003      	beq.n	800217c <lcdCheckForUpdate+0x4ec>
 8002174:	4b72      	ldr	r3, [pc, #456]	@ (8002340 <lcdCheckForUpdate+0x6b0>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d164      	bne.n	8002246 <lcdCheckForUpdate+0x5b6>

		if ((prev_onOff != getOnOff() && getOnOff() == OFF) || (prev_logging != getLogging() && getLogging() == OFF)) {
 800217c:	f001 f916 	bl	80033ac <getOnOff>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <lcdCheckForUpdate+0x6c0>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d004      	beq.n	8002196 <lcdCheckForUpdate+0x506>
 800218c:	f001 f90e 	bl	80033ac <getOnOff>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00c      	beq.n	80021b0 <lcdCheckForUpdate+0x520>
 8002196:	f001 f92b 	bl	80033f0 <getLogging>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	4b6f      	ldr	r3, [pc, #444]	@ (800235c <lcdCheckForUpdate+0x6cc>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d01d      	beq.n	80021e2 <lcdCheckForUpdate+0x552>
 80021a6:	f001 f923 	bl	80033f0 <getLogging>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d118      	bne.n	80021e2 <lcdCheckForUpdate+0x552>

			lcdSendCmnd(0x85); lcdSendData('_');
 80021b0:	2085      	movs	r0, #133	@ 0x85
 80021b2:	f7ff faeb 	bl	800178c <lcdSendCmnd>
 80021b6:	205f      	movs	r0, #95	@ 0x5f
 80021b8:	f7ff fb40 	bl	800183c <lcdSendData>
			lcdSendCmnd(0xC5); lcdSendData(' ');
 80021bc:	20c5      	movs	r0, #197	@ 0xc5
 80021be:	f7ff fae5 	bl	800178c <lcdSendCmnd>
 80021c2:	2020      	movs	r0, #32
 80021c4:	f7ff fb3a 	bl	800183c <lcdSendData>
			prev_onOff = getOnOff();
 80021c8:	f001 f8f0 	bl	80033ac <getOnOff>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002350 <lcdCheckForUpdate+0x6c0>)
 80021d2:	701a      	strb	r2, [r3, #0]
			prev_logging = getLogging();
 80021d4:	f001 f90c 	bl	80033f0 <getLogging>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	4b5f      	ldr	r3, [pc, #380]	@ (800235c <lcdCheckForUpdate+0x6cc>)
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e031      	b.n	8002246 <lcdCheckForUpdate+0x5b6>
		}
		else if ((prev_onOff != getOnOff() && getOnOff() == ON) || (prev_logging != getLogging() && getLogging() == ON)) {
 80021e2:	f001 f8e3 	bl	80033ac <getOnOff>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <lcdCheckForUpdate+0x6c0>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d004      	beq.n	80021fc <lcdCheckForUpdate+0x56c>
 80021f2:	f001 f8db 	bl	80033ac <getOnOff>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d00c      	beq.n	8002216 <lcdCheckForUpdate+0x586>
 80021fc:	f001 f8f8 	bl	80033f0 <getLogging>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	4b55      	ldr	r3, [pc, #340]	@ (800235c <lcdCheckForUpdate+0x6cc>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d01c      	beq.n	8002246 <lcdCheckForUpdate+0x5b6>
 800220c:	f001 f8f0 	bl	80033f0 <getLogging>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d117      	bne.n	8002246 <lcdCheckForUpdate+0x5b6>

			lcdSendCmnd(0xC5); lcdSendData('_');
 8002216:	20c5      	movs	r0, #197	@ 0xc5
 8002218:	f7ff fab8 	bl	800178c <lcdSendCmnd>
 800221c:	205f      	movs	r0, #95	@ 0x5f
 800221e:	f7ff fb0d 	bl	800183c <lcdSendData>
			lcdSendCmnd(0x85); lcdSendData(' ');
 8002222:	2085      	movs	r0, #133	@ 0x85
 8002224:	f7ff fab2 	bl	800178c <lcdSendCmnd>
 8002228:	2020      	movs	r0, #32
 800222a:	f7ff fb07 	bl	800183c <lcdSendData>
			prev_onOff = getOnOff();
 800222e:	f001 f8bd 	bl	80033ac <getOnOff>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b46      	ldr	r3, [pc, #280]	@ (8002350 <lcdCheckForUpdate+0x6c0>)
 8002238:	701a      	strb	r2, [r3, #0]
			prev_logging = getLogging();
 800223a:	f001 f8d9 	bl	80033f0 <getLogging>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	4b46      	ldr	r3, [pc, #280]	@ (800235c <lcdCheckForUpdate+0x6cc>)
 8002244:	701a      	strb	r2, [r3, #0]
		}
	}

	if (_display == MODE) {
 8002246:	4b3e      	ldr	r3, [pc, #248]	@ (8002340 <lcdCheckForUpdate+0x6b0>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d171      	bne.n	8002332 <lcdCheckForUpdate+0x6a2>

		if (prev_mode != getMode() && getMode() == 'C') {
 800224e:	f001 f891 	bl	8003374 <getMode>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <lcdCheckForUpdate+0x6bc>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d01d      	beq.n	800229a <lcdCheckForUpdate+0x60a>
 800225e:	f001 f889 	bl	8003374 <getMode>
 8002262:	4603      	mov	r3, r0
 8002264:	2b43      	cmp	r3, #67	@ 0x43
 8002266:	d118      	bne.n	800229a <lcdCheckForUpdate+0x60a>

			lcdSendCmnd(0x80); lcdSendData('_');
 8002268:	2080      	movs	r0, #128	@ 0x80
 800226a:	f7ff fa8f 	bl	800178c <lcdSendCmnd>
 800226e:	205f      	movs	r0, #95	@ 0x5f
 8002270:	f7ff fae4 	bl	800183c <lcdSendData>
			lcdSendCmnd(0x89); lcdSendData(' ');
 8002274:	2089      	movs	r0, #137	@ 0x89
 8002276:	f7ff fa89 	bl	800178c <lcdSendCmnd>
 800227a:	2020      	movs	r0, #32
 800227c:	f7ff fade 	bl	800183c <lcdSendData>
			lcdSendCmnd(0xC5); lcdSendData(' ');
 8002280:	20c5      	movs	r0, #197	@ 0xc5
 8002282:	f7ff fa83 	bl	800178c <lcdSendCmnd>
 8002286:	2020      	movs	r0, #32
 8002288:	f7ff fad8 	bl	800183c <lcdSendData>
			prev_mode = getMode();
 800228c:	f001 f872 	bl	8003374 <getMode>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <lcdCheckForUpdate+0x6bc>)
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e04b      	b.n	8002332 <lcdCheckForUpdate+0x6a2>
		}
		else if (prev_mode != getMode() && getMode() == 'R') {
 800229a:	f001 f86b 	bl	8003374 <getMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <lcdCheckForUpdate+0x6bc>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d01d      	beq.n	80022e6 <lcdCheckForUpdate+0x656>
 80022aa:	f001 f863 	bl	8003374 <getMode>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b52      	cmp	r3, #82	@ 0x52
 80022b2:	d118      	bne.n	80022e6 <lcdCheckForUpdate+0x656>

			lcdSendCmnd(0x80); lcdSendData(' ');
 80022b4:	2080      	movs	r0, #128	@ 0x80
 80022b6:	f7ff fa69 	bl	800178c <lcdSendCmnd>
 80022ba:	2020      	movs	r0, #32
 80022bc:	f7ff fabe 	bl	800183c <lcdSendData>
			lcdSendCmnd(0x89); lcdSendData('_');
 80022c0:	2089      	movs	r0, #137	@ 0x89
 80022c2:	f7ff fa63 	bl	800178c <lcdSendCmnd>
 80022c6:	205f      	movs	r0, #95	@ 0x5f
 80022c8:	f7ff fab8 	bl	800183c <lcdSendData>
			lcdSendCmnd(0xC5); lcdSendData(' ');
 80022cc:	20c5      	movs	r0, #197	@ 0xc5
 80022ce:	f7ff fa5d 	bl	800178c <lcdSendCmnd>
 80022d2:	2020      	movs	r0, #32
 80022d4:	f7ff fab2 	bl	800183c <lcdSendData>
			prev_mode = getMode();
 80022d8:	f001 f84c 	bl	8003374 <getMode>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <lcdCheckForUpdate+0x6bc>)
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e025      	b.n	8002332 <lcdCheckForUpdate+0x6a2>
		}
		else if (prev_mode != getMode() && getMode() == 'P') {
 80022e6:	f001 f845 	bl	8003374 <getMode>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b17      	ldr	r3, [pc, #92]	@ (800234c <lcdCheckForUpdate+0x6bc>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d01d      	beq.n	8002332 <lcdCheckForUpdate+0x6a2>
 80022f6:	f001 f83d 	bl	8003374 <getMode>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b50      	cmp	r3, #80	@ 0x50
 80022fe:	d118      	bne.n	8002332 <lcdCheckForUpdate+0x6a2>

			lcdSendCmnd(0x80); lcdSendData(' ');
 8002300:	2080      	movs	r0, #128	@ 0x80
 8002302:	f7ff fa43 	bl	800178c <lcdSendCmnd>
 8002306:	2020      	movs	r0, #32
 8002308:	f7ff fa98 	bl	800183c <lcdSendData>
			lcdSendCmnd(0x89); lcdSendData(' ');
 800230c:	2089      	movs	r0, #137	@ 0x89
 800230e:	f7ff fa3d 	bl	800178c <lcdSendCmnd>
 8002312:	2020      	movs	r0, #32
 8002314:	f7ff fa92 	bl	800183c <lcdSendData>
			lcdSendCmnd(0xC5); lcdSendData('_');
 8002318:	20c5      	movs	r0, #197	@ 0xc5
 800231a:	f7ff fa37 	bl	800178c <lcdSendCmnd>
 800231e:	205f      	movs	r0, #95	@ 0x5f
 8002320:	f7ff fa8c 	bl	800183c <lcdSendData>
			prev_mode = getMode();
 8002324:	f001 f826 	bl	8003374 <getMode>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <lcdCheckForUpdate+0x6bc>)
 800232e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002330:	e7ff      	b.n	8002332 <lcdCheckForUpdate+0x6a2>
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000020f 	.word	0x2000020f
 8002340:	2000020e 	.word	0x2000020e
 8002344:	20000218 	.word	0x20000218
 8002348:	2000021c 	.word	0x2000021c
 800234c:	20000002 	.word	0x20000002
 8002350:	20000220 	.word	0x20000220
 8002354:	20000224 	.word	0x20000224
 8002358:	20000228 	.word	0x20000228
 800235c:	2000022c 	.word	0x2000022c

08002360 <myprintf>:
static 	uint8_t 	rx_buffer[RX_BUFFER_SIZE];
		uint16_t 	uart_idx = 0;

/* Functions */

void myprintf( const char *fmt, ...) {
 8002360:	b40f      	push	{r0, r1, r2, r3}
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0

    static char sd_buffer[256];
    va_list args;
    va_start(args, fmt);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	603b      	str	r3, [r7, #0]
    vsnprintf(sd_buffer, sizeof(sd_buffer), fmt, args);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002376:	480b      	ldr	r0, [pc, #44]	@ (80023a4 <myprintf+0x44>)
 8002378:	f00a fe46 	bl	800d008 <vsniprintf>
    va_end(args);
    int len = strlen(sd_buffer);
 800237c:	4809      	ldr	r0, [pc, #36]	@ (80023a4 <myprintf+0x44>)
 800237e:	f7fd feff 	bl	8000180 <strlen>
 8002382:	4603      	mov	r3, r0
 8002384:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)sd_buffer, len, -1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	b29a      	uxth	r2, r3
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	4905      	ldr	r1, [pc, #20]	@ (80023a4 <myprintf+0x44>)
 8002390:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <myprintf+0x48>)
 8002392:	f006 f9dd 	bl	8008750 <HAL_UART_Transmit>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023a0:	b004      	add	sp, #16
 80023a2:	4770      	bx	lr
 80023a4:	20000334 	.word	0x20000334
 80023a8:	20004af0 	.word	0x20004af0

080023ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART2) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0e      	ldr	r2, [pc, #56]	@ (80023f4 <HAL_UART_RxCpltCallback+0x48>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d116      	bne.n	80023ec <HAL_UART_RxCpltCallback+0x40>

    	rx_buffer[uart_idx++] = uart_byte;
 80023be:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <HAL_UART_RxCpltCallback+0x4c>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	b291      	uxth	r1, r2
 80023c6:	4a0c      	ldr	r2, [pc, #48]	@ (80023f8 <HAL_UART_RxCpltCallback+0x4c>)
 80023c8:	8011      	strh	r1, [r2, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_UART_RxCpltCallback+0x50>)
 80023ce:	7819      	ldrb	r1, [r3, #0]
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_UART_RxCpltCallback+0x54>)
 80023d2:	5499      	strb	r1, [r3, r2]
    	if (uart_idx >= RX_BUFFER_SIZE) uart_idx = 0;
 80023d4:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_UART_RxCpltCallback+0x4c>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	2bff      	cmp	r3, #255	@ 0xff
 80023da:	d902      	bls.n	80023e2 <HAL_UART_RxCpltCallback+0x36>
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_UART_RxCpltCallback+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	801a      	strh	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &uart_byte, 1);
 80023e2:	2201      	movs	r2, #1
 80023e4:	4905      	ldr	r1, [pc, #20]	@ (80023fc <HAL_UART_RxCpltCallback+0x50>)
 80023e6:	4807      	ldr	r0, [pc, #28]	@ (8002404 <HAL_UART_RxCpltCallback+0x58>)
 80023e8:	f006 fa3d 	bl	8008866 <HAL_UART_Receive_IT>
    }
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40004400 	.word	0x40004400
 80023f8:	20000330 	.word	0x20000330
 80023fc:	2000022d 	.word	0x2000022d
 8002400:	20000230 	.word	0x20000230
 8002404:	20004af0 	.word	0x20004af0

08002408 <createDummyData>:

void createDummyData( DataStruct *dummy) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
//	float value = 0.1;
//	memcpy( &dummy->data[47], &value, sizeof(float));
//	memcpy( &dummy->data[51], &value, sizeof(float));
//	memcpy( &dummy->data[55], &value, sizeof(float));

	EEPROM_Load_Partial(dummy);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f9d7 	bl	80027c4 <EEPROM_Load_Partial>
//	memcpy( &dummy->data[56], &value, sizeof(float)); // 				 / t2
//	value = 7.0;
//	memcpy( &dummy->data[60], &value, sizeof(float)); //				 / t3
//	value = 0.1;
//	memcpy( &dummy->data[64], &value, sizeof(float)); // dt
	calculateCrc( dummy);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f804 	bl	8002424 <calculateCrc>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <calculateCrc>:

void calculateCrc( DataStruct *dummy) {
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

	dummy->crc = (uint32_t)dummy->header;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	649a      	str	r2, [r3, #72]	@ 0x48
	dummy->crc += (uint32_t)dummy->length;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	7852      	ldrb	r2, [r2, #1]
 800243e:	441a      	add	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	649a      	str	r2, [r3, #72]	@ 0x48
	for (int i=0; i<sizeof(dummy->data); i++) {
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e00c      	b.n	8002464 <calculateCrc+0x40>

		dummy->crc += (uint32_t)dummy->data[i];
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	440a      	add	r2, r1
 8002454:	3202      	adds	r2, #2
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	441a      	add	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	649a      	str	r2, [r3, #72]	@ 0x48
	for (int i=0; i<sizeof(dummy->data); i++) {
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3301      	adds	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b42      	cmp	r3, #66	@ 0x42
 8002468:	d9ef      	bls.n	800244a <calculateCrc+0x26>
	}
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
	...

08002478 <checkForData>:
	//HAL_UART_Transmit(&huart2, (uint8_t*)&data->length, sizeof(data->length), -1);
	//HAL_UART_Transmit(&huart2, (uint8_t*)&data->data, sizeof(data->data), -1);
	//HAL_UART_Transmit(&huart2, (uint8_t*)&data->crc, sizeof(data->crc), -1);
}

void checkForData(DataStruct *data) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    static uint8_t buffer[37];
    static uint8_t buf_pos = 0;
    static uint8_t message_flag = 0;
    static uint8_t length = 0;
    static uint32_t crc = 0;
    while (read_idx != uart_idx) {
 8002480:	e06c      	b.n	800255c <checkForData+0xe4>
        uint8_t byte_ = rx_buffer[read_idx];
 8002482:	4b3c      	ldr	r3, [pc, #240]	@ (8002574 <checkForData+0xfc>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <checkForData+0x100>)
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	73fb      	strb	r3, [r7, #15]

        if (message_flag == 0) {
 800248e:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <checkForData+0x104>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d114      	bne.n	80024c0 <checkForData+0x48>
            if (byte_ == 0x77) {
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b77      	cmp	r3, #119	@ 0x77
 800249a:	d152      	bne.n	8002542 <checkForData+0xca>
                message_flag = 1;
 800249c:	4b37      	ldr	r3, [pc, #220]	@ (800257c <checkForData+0x104>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
                buffer[0] = byte_;
 80024a2:	4a37      	ldr	r2, [pc, #220]	@ (8002580 <checkForData+0x108>)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	7013      	strb	r3, [r2, #0]
                buf_pos = 1;
 80024a8:	4b36      	ldr	r3, [pc, #216]	@ (8002584 <checkForData+0x10c>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
                crc = byte_;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	4a35      	ldr	r2, [pc, #212]	@ (8002588 <checkForData+0x110>)
 80024b2:	6013      	str	r3, [r2, #0]
                message_start_idx = read_idx;
 80024b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002574 <checkForData+0xfc>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b34      	ldr	r3, [pc, #208]	@ (800258c <checkForData+0x114>)
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e040      	b.n	8002542 <checkForData+0xca>
            }
        } else {
            buffer[buf_pos++] = byte_;
 80024c0:	4b30      	ldr	r3, [pc, #192]	@ (8002584 <checkForData+0x10c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	b2d1      	uxtb	r1, r2
 80024c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002584 <checkForData+0x10c>)
 80024ca:	7011      	strb	r1, [r2, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002580 <checkForData+0x108>)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	5453      	strb	r3, [r2, r1]

            if (buf_pos == 2) {
 80024d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002584 <checkForData+0x10c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d102      	bne.n	80024e2 <checkForData+0x6a>
                length = byte_;
 80024dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002590 <checkForData+0x118>)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	7013      	strb	r3, [r2, #0]
            }
            if (buf_pos <= 33) {
 80024e2:	4b28      	ldr	r3, [pc, #160]	@ (8002584 <checkForData+0x10c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b21      	cmp	r3, #33	@ 0x21
 80024e8:	d805      	bhi.n	80024f6 <checkForData+0x7e>
                crc += byte_;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	4b26      	ldr	r3, [pc, #152]	@ (8002588 <checkForData+0x110>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a25      	ldr	r2, [pc, #148]	@ (8002588 <checkForData+0x110>)
 80024f4:	6013      	str	r3, [r2, #0]
            }
            if (buf_pos == 36) {
 80024f6:	4b23      	ldr	r3, [pc, #140]	@ (8002584 <checkForData+0x10c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b24      	cmp	r3, #36	@ 0x24
 80024fc:	d121      	bne.n	8002542 <checkForData+0xca>
                message_flag = 0;
 80024fe:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <checkForData+0x104>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
                uint32_t rx_crc;
                memcpy(&rx_crc, &buffer[buf_pos - 3], sizeof(uint32_t));
 8002504:	4b1f      	ldr	r3, [pc, #124]	@ (8002584 <checkForData+0x10c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	3b03      	subs	r3, #3
 800250a:	4a1d      	ldr	r2, [pc, #116]	@ (8002580 <checkForData+0x108>)
 800250c:	4413      	add	r3, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60bb      	str	r3, [r7, #8]
                if (crc == rx_crc) {
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <checkForData+0x110>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	d10c      	bne.n	8002536 <checkForData+0xbe>

                    saveDataToStruct(message_start_idx, length, data);
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <checkForData+0x114>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <checkForData+0x118>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4619      	mov	r1, r3
 800252a:	f000 f835 	bl	8002598 <saveDataToStruct>
                    memcpy(&data->crc, &rx_crc, sizeof(float));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3348      	adds	r3, #72	@ 0x48
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	601a      	str	r2, [r3, #0]
                }
                buf_pos = 0;
 8002536:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <checkForData+0x10c>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
                crc = 0;
 800253c:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <checkForData+0x110>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
            }
        }
        read_idx++;
 8002542:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <checkForData+0xfc>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <checkForData+0xfc>)
 800254c:	801a      	strh	r2, [r3, #0]
        if (read_idx >= RX_BUFFER_SIZE) read_idx = 0;
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <checkForData+0xfc>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	2bff      	cmp	r3, #255	@ 0xff
 8002554:	d902      	bls.n	800255c <checkForData+0xe4>
 8002556:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <checkForData+0xfc>)
 8002558:	2200      	movs	r2, #0
 800255a:	801a      	strh	r2, [r3, #0]
    while (read_idx != uart_idx) {
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <checkForData+0xfc>)
 800255e:	881a      	ldrh	r2, [r3, #0]
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <checkForData+0x11c>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d18c      	bne.n	8002482 <checkForData+0xa>
    }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000434 	.word	0x20000434
 8002578:	20000230 	.word	0x20000230
 800257c:	20000436 	.word	0x20000436
 8002580:	20000438 	.word	0x20000438
 8002584:	2000045d 	.word	0x2000045d
 8002588:	20000460 	.word	0x20000460
 800258c:	20000464 	.word	0x20000464
 8002590:	20000465 	.word	0x20000465
 8002594:	20000330 	.word	0x20000330

08002598 <saveDataToStruct>:

void saveDataToStruct( uint16_t start_msg_idx, uint8_t length, DataStruct *data) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	603a      	str	r2, [r7, #0]
 80025a2:	80fb      	strh	r3, [r7, #6]
 80025a4:	460b      	mov	r3, r1
 80025a6:	717b      	strb	r3, [r7, #5]

	myprintf("I am in saving Data process...\r\n");
 80025a8:	4832      	ldr	r0, [pc, #200]	@ (8002674 <saveDataToStruct+0xdc>)
 80025aa:	f7ff fed9 	bl	8002360 <myprintf>

	memcpy(&data->header,   &rx_buffer[start_msg_idx],      sizeof(uint8_t));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	4931      	ldr	r1, [pc, #196]	@ (8002678 <saveDataToStruct+0xe0>)
 80025b4:	440a      	add	r2, r1
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	701a      	strb	r2, [r3, #0]
	setSetpoint(*(float*)&rx_buffer[start_msg_idx + 2]);
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	3302      	adds	r3, #2
 80025be:	4a2e      	ldr	r2, [pc, #184]	@ (8002678 <saveDataToStruct+0xe0>)
 80025c0:	4413      	add	r3, r2
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fba1 	bl	8002d0c <setSetpoint>
	setMode(*(uint8_t*)&rx_buffer[start_msg_idx + 6]);
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	3306      	adds	r3, #6
 80025ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002678 <saveDataToStruct+0xe0>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 feda 	bl	800338c <setMode>
	setOnOff(*(uint8_t*)&rx_buffer[start_msg_idx + 7]);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	3307      	adds	r3, #7
 80025dc:	4a26      	ldr	r2, [pc, #152]	@ (8002678 <saveDataToStruct+0xe0>)
 80025de:	5cd3      	ldrb	r3, [r2, r3]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 feef 	bl	80033c4 <setOnOff>
	setLogging(*(uint8_t*)&rx_buffer[start_msg_idx + 8]);
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	3308      	adds	r3, #8
 80025ea:	4a23      	ldr	r2, [pc, #140]	@ (8002678 <saveDataToStruct+0xe0>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 ff0a 	bl	8003408 <setLogging>
	setLoggingBufferSize(*(uint16_t*)&rx_buffer[start_msg_idx + 9]);
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	3309      	adds	r3, #9
 80025f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002678 <saveDataToStruct+0xe0>)
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 ff24 	bl	800344c <setLoggingBufferSize>
	setLoggingSpeed(*(uint16_t*)&rx_buffer[start_msg_idx + 11]);
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	330b      	adds	r3, #11
 8002608:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <saveDataToStruct+0xe0>)
 800260a:	4413      	add	r3, r2
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 ff36 	bl	8003480 <setLoggingSpeed>

	memcpy(&data->data[43], &rx_buffer[start_msg_idx + 13], sizeof(float));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	332d      	adds	r3, #45	@ 0x2d
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	320d      	adds	r2, #13
 800261c:	4916      	ldr	r1, [pc, #88]	@ (8002678 <saveDataToStruct+0xe0>)
 800261e:	440a      	add	r2, r1
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	601a      	str	r2, [r3, #0]
	memcpy(&data->data[47],  &rx_buffer[start_msg_idx + 17],  sizeof(float));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3331      	adds	r3, #49	@ 0x31
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	3211      	adds	r2, #17
 800262c:	4912      	ldr	r1, [pc, #72]	@ (8002678 <saveDataToStruct+0xe0>)
 800262e:	440a      	add	r2, r1
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	601a      	str	r2, [r3, #0]
	memcpy(&data->data[51],  &rx_buffer[start_msg_idx + 21],  sizeof(float));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	3335      	adds	r3, #53	@ 0x35
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	3215      	adds	r2, #21
 800263c:	490e      	ldr	r1, [pc, #56]	@ (8002678 <saveDataToStruct+0xe0>)
 800263e:	440a      	add	r2, r1
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	601a      	str	r2, [r3, #0]
	memcpy(&data->data[55],  &rx_buffer[start_msg_idx + 25],  sizeof(float));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3339      	adds	r3, #57	@ 0x39
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	3219      	adds	r2, #25
 800264c:	490a      	ldr	r1, [pc, #40]	@ (8002678 <saveDataToStruct+0xe0>)
 800264e:	440a      	add	r2, r1
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	601a      	str	r2, [r3, #0]
	memcpy(&data->data[59], &rx_buffer[start_msg_idx + 29], sizeof(float));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	333d      	adds	r3, #61	@ 0x3d
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	321d      	adds	r2, #29
 800265c:	4906      	ldr	r1, [pc, #24]	@ (8002678 <saveDataToStruct+0xe0>)
 800265e:	440a      	add	r2, r1
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	601a      	str	r2, [r3, #0]

	EEPROM_Save_Partial(data);
 8002664:	6838      	ldr	r0, [r7, #0]
 8002666:	f000 f809 	bl	800267c <EEPROM_Save_Partial>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	0800f270 	.word	0x0800f270
 8002678:	20000230 	.word	0x20000230

0800267c <EEPROM_Save_Partial>:

void EEPROM_Save_Partial(DataStruct* data) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

	float value = 0;
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800268a:	f002 ff3d 	bl	8005508 <HAL_FLASHEx_DATAEEPROM_Unlock>

    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_HEADER, data->header);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	493f      	ldr	r1, [pc, #252]	@ (8002794 <EEPROM_Save_Partial+0x118>)
 8002696:	2002      	movs	r0, #2
 8002698:	f002 ff62 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    value = getSetpoint();
 800269c:	f000 fb2c 	bl	8002cf8 <getSetpoint>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60bb      	str	r3, [r7, #8]
    uint32_t value_u32 = *(uint32_t*)&value;
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_SETPOINT, value_u32);
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	493a      	ldr	r1, [pc, #232]	@ (8002798 <EEPROM_Save_Partial+0x11c>)
 80026b0:	2002      	movs	r0, #2
 80026b2:	f002 ff55 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_MODE, getMode());
 80026b6:	f000 fe5d 	bl	8003374 <getMode>
 80026ba:	4603      	mov	r3, r0
 80026bc:	461a      	mov	r2, r3
 80026be:	4937      	ldr	r1, [pc, #220]	@ (800279c <EEPROM_Save_Partial+0x120>)
 80026c0:	2002      	movs	r0, #2
 80026c2:	f002 ff4d 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_ONOFF, getOnOff());
 80026c6:	f000 fe71 	bl	80033ac <getOnOff>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	4934      	ldr	r1, [pc, #208]	@ (80027a0 <EEPROM_Save_Partial+0x124>)
 80026d0:	2002      	movs	r0, #2
 80026d2:	f002 ff45 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_LOGGING, getLogging());
 80026d6:	f000 fe8b 	bl	80033f0 <getLogging>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	4931      	ldr	r1, [pc, #196]	@ (80027a4 <EEPROM_Save_Partial+0x128>)
 80026e0:	2002      	movs	r0, #2
 80026e2:	f002 ff3d 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_BUF_SIZE,
    		getLoggingBufferSize());
 80026e6:	f000 fea7 	bl	8003438 <getLoggingBufferSize>
 80026ea:	4603      	mov	r3, r0
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_BUF_SIZE,
 80026ec:	461a      	mov	r2, r3
 80026ee:	492e      	ldr	r1, [pc, #184]	@ (80027a8 <EEPROM_Save_Partial+0x12c>)
 80026f0:	2002      	movs	r0, #2
 80026f2:	f002 ff35 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_SPEED, getLoggingSpeed());
 80026f6:	f000 feb9 	bl	800346c <getLoggingSpeed>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461a      	mov	r2, r3
 80026fe:	492b      	ldr	r1, [pc, #172]	@ (80027ac <EEPROM_Save_Partial+0x130>)
 8002700:	2002      	movs	r0, #2
 8002702:	f002 ff2d 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    value = *(float*)&data->data[43];
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	332d      	adds	r3, #45	@ 0x2d
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60bb      	str	r3, [r7, #8]
    value_u32 = *(uint32_t*)&value;
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_DATA43, value_u32);
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4925      	ldr	r1, [pc, #148]	@ (80027b0 <EEPROM_Save_Partial+0x134>)
 800271a:	2002      	movs	r0, #2
 800271c:	f002 ff20 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    value = *(float*)&data->data[47];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3331      	adds	r3, #49	@ 0x31
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60bb      	str	r3, [r7, #8]
    value_u32 = *(uint32_t*)&value;
 8002728:	f107 0308 	add.w	r3, r7, #8
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_DATA47, value_u32);
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4920      	ldr	r1, [pc, #128]	@ (80027b4 <EEPROM_Save_Partial+0x138>)
 8002734:	2002      	movs	r0, #2
 8002736:	f002 ff13 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    value = *(float*)&data->data[51];
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3335      	adds	r3, #53	@ 0x35
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60bb      	str	r3, [r7, #8]
    value_u32 = *(uint32_t*)&value;
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_DATA51, value_u32);
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	491a      	ldr	r1, [pc, #104]	@ (80027b8 <EEPROM_Save_Partial+0x13c>)
 800274e:	2002      	movs	r0, #2
 8002750:	f002 ff06 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    value = *(float*)&data->data[55];
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3339      	adds	r3, #57	@ 0x39
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60bb      	str	r3, [r7, #8]
    value_u32 = *(uint32_t*)&value;
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_DATA55, value_u32);
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4915      	ldr	r1, [pc, #84]	@ (80027bc <EEPROM_Save_Partial+0x140>)
 8002768:	2002      	movs	r0, #2
 800276a:	f002 fef9 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>
    value = *(float*)&data->data[59];
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	333d      	adds	r3, #61	@ 0x3d
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60bb      	str	r3, [r7, #8]
    value_u32 = *(uint32_t*)&value;
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
    HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_ADDR_DATA59, value_u32);
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	490f      	ldr	r1, [pc, #60]	@ (80027c0 <EEPROM_Save_Partial+0x144>)
 8002782:	2002      	movs	r0, #2
 8002784:	f002 feec 	bl	8005560 <HAL_FLASHEx_DATAEEPROM_Program>

    HAL_FLASHEx_DATAEEPROM_Lock();
 8002788:	f002 feda 	bl	8005540 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08080000 	.word	0x08080000
 8002798:	08080004 	.word	0x08080004
 800279c:	08080008 	.word	0x08080008
 80027a0:	0808000c 	.word	0x0808000c
 80027a4:	08080010 	.word	0x08080010
 80027a8:	08080014 	.word	0x08080014
 80027ac:	08080018 	.word	0x08080018
 80027b0:	0808001c 	.word	0x0808001c
 80027b4:	08080020 	.word	0x08080020
 80027b8:	08080024 	.word	0x08080024
 80027bc:	08080028 	.word	0x08080028
 80027c0:	0808002c 	.word	0x0808002c

080027c4 <EEPROM_Load_Partial>:

void EEPROM_Load_Partial(DataStruct* data) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

	uint32_t value_u32 = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
	float value = 0.0;
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]

    data->header = *(uint8_t*)EEPROM_ADDR_HEADER;
 80027d6:	4b31      	ldr	r3, [pc, #196]	@ (800289c <EEPROM_Load_Partial+0xd8>)
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	701a      	strb	r2, [r3, #0]

    value_u32 = *(uint32_t*)EEPROM_ADDR_SETPOINT;
 80027de:	4b30      	ldr	r3, [pc, #192]	@ (80028a0 <EEPROM_Load_Partial+0xdc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]
    value = *(float*)&value_u32;
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60bb      	str	r3, [r7, #8]
    setSetpoint(value);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa8c 	bl	8002d0c <setSetpoint>

    setMode(*(uint8_t*)EEPROM_ADDR_MODE);
 80027f4:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <EEPROM_Load_Partial+0xe0>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fdc7 	bl	800338c <setMode>
    setOnOff(*(uint8_t*)EEPROM_ADDR_ONOFF);
 80027fe:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <EEPROM_Load_Partial+0xe4>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fdde 	bl	80033c4 <setOnOff>
    setLogging(*(uint8_t*)EEPROM_ADDR_LOGGING);
 8002808:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <EEPROM_Load_Partial+0xe8>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fdfb 	bl	8003408 <setLogging>
    setLoggingBufferSize(*(uint16_t*)EEPROM_ADDR_BUF_SIZE);
 8002812:	4b27      	ldr	r3, [pc, #156]	@ (80028b0 <EEPROM_Load_Partial+0xec>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fe18 	bl	800344c <setLoggingBufferSize>
    setLoggingSpeed(*(uint16_t*)EEPROM_ADDR_SPEED);
 800281c:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <EEPROM_Load_Partial+0xf0>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fe2d 	bl	8003480 <setLoggingSpeed>

    value_u32 = *(uint32_t*)EEPROM_ADDR_DATA43;
 8002826:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <EEPROM_Load_Partial+0xf4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
    value = *(float*)&value_u32;
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60bb      	str	r3, [r7, #8]
    memcpy(&data->data[43], &value, sizeof(float));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	332d      	adds	r3, #45	@ 0x2d
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	601a      	str	r2, [r3, #0]
    value_u32 = *(uint32_t*)EEPROM_ADDR_DATA47;
 800283c:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <EEPROM_Load_Partial+0xf8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
    value = *(float*)&value_u32;
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]
    memcpy(&data->data[47], &value, sizeof(float));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3331      	adds	r3, #49	@ 0x31
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	601a      	str	r2, [r3, #0]
	value_u32 = *(uint32_t*)EEPROM_ADDR_DATA51;
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <EEPROM_Load_Partial+0xfc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]
    value = *(float*)&value_u32;
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60bb      	str	r3, [r7, #8]
    memcpy(&data->data[51], &value, sizeof(float));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3335      	adds	r3, #53	@ 0x35
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	601a      	str	r2, [r3, #0]
	value_u32 = *(uint32_t*)EEPROM_ADDR_DATA55;
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <EEPROM_Load_Partial+0x100>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]
    value = *(float*)&value_u32;
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
    memcpy(&data->data[55], &value, sizeof(float));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3339      	adds	r3, #57	@ 0x39
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	601a      	str	r2, [r3, #0]
	value_u32 = *(uint32_t*)EEPROM_ADDR_DATA59;
 800287e:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <EEPROM_Load_Partial+0x104>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]
    value = *(float*)&value_u32;
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60bb      	str	r3, [r7, #8]
    memcpy(&data->data[59], &value, sizeof(float));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	333d      	adds	r3, #61	@ 0x3d
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	08080000 	.word	0x08080000
 80028a0:	08080004 	.word	0x08080004
 80028a4:	08080008 	.word	0x08080008
 80028a8:	0808000c 	.word	0x0808000c
 80028ac:	08080010 	.word	0x08080010
 80028b0:	08080014 	.word	0x08080014
 80028b4:	08080018 	.word	0x08080018
 80028b8:	0808001c 	.word	0x0808001c
 80028bc:	08080020 	.word	0x08080020
 80028c0:	08080024 	.word	0x08080024
 80028c4:	08080028 	.word	0x08080028
 80028c8:	0808002c 	.word	0x0808002c
 80028cc:	00000000 	.word	0x00000000

080028d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b089      	sub	sp, #36	@ 0x24
 80028d4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 80028d6:	f002 fb3e 	bl	8004f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028da:	f000 f989 	bl	8002bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028de:	f7fe fdef 	bl	80014c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028e2:	f002 fa9d 	bl	8004e20 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80028e6:	f001 fc73 	bl	80041d0 <MX_RTC_Init>
  MX_TIM2_Init();
 80028ea:	f002 f9df 	bl	8004cac <MX_TIM2_Init>
  MX_FATFS_Init();
 80028ee:	f006 fdb3 	bl	8009458 <MX_FATFS_Init>
  MX_SPI2_Init();
 80028f2:	f001 ff77 	bl	80047e4 <MX_SPI2_Init>
  MX_TIM6_Init();
 80028f6:	f002 fa25 	bl	8004d44 <MX_TIM6_Init>
  MX_SPI3_Init();
 80028fa:	f001 ffa9 	bl	8004850 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uart_byte, 1);
 80028fe:	2201      	movs	r2, #1
 8002900:	499b      	ldr	r1, [pc, #620]	@ (8002b70 <main+0x2a0>)
 8002902:	489c      	ldr	r0, [pc, #624]	@ (8002b74 <main+0x2a4>)
 8002904:	f005 ffaf 	bl	8008866 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002908:	489b      	ldr	r0, [pc, #620]	@ (8002b78 <main+0x2a8>)
 800290a:	f005 fb5d 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 800290e:	489b      	ldr	r0, [pc, #620]	@ (8002b7c <main+0x2ac>)
 8002910:	f005 fb10 	bl	8007f34 <HAL_TIM_Base_Start>
  createDummyData( &myData);
 8002914:	489a      	ldr	r0, [pc, #616]	@ (8002b80 <main+0x2b0>)
 8002916:	f7ff fd77 	bl	8002408 <createDummyData>
  lcdInit();
 800291a:	f7fe ff5d 	bl	80017d8 <lcdInit>
  MCP3561T_1_Init(CS_1_GPIO_Port, CS_1_Pin);
 800291e:	2104      	movs	r1, #4
 8002920:	4898      	ldr	r0, [pc, #608]	@ (8002b84 <main+0x2b4>)
 8002922:	f001 fa91 	bl	8003e48 <MCP3561T_1_Init>
  MCP3561T_2_Init(CS_2_GPIO_Port, CS_2_Pin);
 8002926:	2102      	movs	r1, #2
 8002928:	4896      	ldr	r0, [pc, #600]	@ (8002b84 <main+0x2b4>)
 800292a:	f001 fb5b 	bl	8003fe4 <MCP3561T_2_Init>
  HAL_GPIO_WritePin(WENT_GPIO_Port, WENT_Pin, GPIO_PIN_SET);
 800292e:	2201      	movs	r2, #1
 8002930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002934:	4894      	ldr	r0, [pc, #592]	@ (8002b88 <main+0x2b8>)
 8002936:	f003 f8f8 	bl	8005b2a <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t sd_idx = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	83fb      	strh	r3, [r7, #30]
//  uint16_t lcd_idx = 0;
  uint32_t temp_time = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  uint8_t temp_flag = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
  float prev_temp= 0.0f;
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
//  uint32_t prev_time = HAL_GetTick();
  uint16_t speed = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	82bb      	strh	r3, [r7, #20]
  uint32_t time_base = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  uint8_t prevOnOff = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]

  while (1)
  {
	  batteryVoltage = getBatteryVoltage();
 8002958:	f000 fbcc 	bl	80030f4 <getBatteryVoltage>
 800295c:	4603      	mov	r3, r0
 800295e:	4a8b      	ldr	r2, [pc, #556]	@ (8002b8c <main+0x2bc>)
 8002960:	6013      	str	r3, [r2, #0]
	  current = getCurrent();
 8002962:	f000 fa4f 	bl	8002e04 <getCurrent>
 8002966:	4603      	mov	r3, r0
 8002968:	4a89      	ldr	r2, [pc, #548]	@ (8002b90 <main+0x2c0>)
 800296a:	6013      	str	r3, [r2, #0]
	  dac_output = getDacOutput();
 800296c:	f000 fc60 	bl	8003230 <getDacOutput>
 8002970:	4603      	mov	r3, r0
 8002972:	4a88      	ldr	r2, [pc, #544]	@ (8002b94 <main+0x2c4>)
 8002974:	6013      	str	r3, [r2, #0]
	  setpoint = getSetpoint();
 8002976:	f000 f9bf 	bl	8002cf8 <getSetpoint>
 800297a:	4603      	mov	r3, r0
 800297c:	4a86      	ldr	r2, [pc, #536]	@ (8002b98 <main+0x2c8>)
 800297e:	6013      	str	r3, [r2, #0]
	  temperature_1 = getTemp_1();
 8002980:	f000 fde6 	bl	8003550 <getTemp_1>
 8002984:	4603      	mov	r3, r0
 8002986:	4a85      	ldr	r2, [pc, #532]	@ (8002b9c <main+0x2cc>)
 8002988:	6013      	str	r3, [r2, #0]
	  temperature_3 = getTemp_3();
 800298a:	f000 fe43 	bl	8003614 <getTemp_3>
 800298e:	4603      	mov	r3, r0
 8002990:	4a83      	ldr	r2, [pc, #524]	@ (8002ba0 <main+0x2d0>)
 8002992:	6013      	str	r3, [r2, #0]
	  parameter = getParameter();
 8002994:	f000 fca8 	bl	80032e8 <getParameter>
 8002998:	4603      	mov	r3, r0
 800299a:	4a82      	ldr	r2, [pc, #520]	@ (8002ba4 <main+0x2d4>)
 800299c:	6013      	str	r3, [r2, #0]
	  loggingSpeed = getLoggingSpeed();
 800299e:	f000 fd65 	bl	800346c <getLoggingSpeed>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b80      	ldr	r3, [pc, #512]	@ (8002ba8 <main+0x2d8>)
 80029a8:	801a      	strh	r2, [r3, #0]
	  loggingBuffer = getLoggingBufferSize();
 80029aa:	f000 fd45 	bl	8003438 <getLoggingBufferSize>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b7e      	ldr	r3, [pc, #504]	@ (8002bac <main+0x2dc>)
 80029b4:	801a      	strh	r2, [r3, #0]
	  kp = Kp;
 80029b6:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb0 <main+0x2e0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb4 <main+0x2e4>)
 80029bc:	6013      	str	r3, [r2, #0]
	  ki = Ki;
 80029be:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb8 <main+0x2e8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bbc <main+0x2ec>)
 80029c4:	6013      	str	r3, [r2, #0]
	  kd = Kd;
 80029c6:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc0 <main+0x2f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc4 <main+0x2f4>)
 80029cc:	6013      	str	r3, [r2, #0]
	  timeStop1 = timeStop;
 80029ce:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc8 <main+0x2f8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bcc <main+0x2fc>)
 80029d4:	6013      	str	r3, [r2, #0]
	  logg = getLogging();
 80029d6:	f000 fd0b 	bl	80033f0 <getLogging>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd0 <main+0x300>)
 80029e0:	701a      	strb	r2, [r3, #0]
	  onOff1 = getOnOff();
 80029e2:	f000 fce3 	bl	80033ac <getOnOff>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd4 <main+0x304>)
 80029ec:	701a      	strb	r2, [r3, #0]
	  wire_resist = *(float*)&myData.data[43];
 80029ee:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd8 <main+0x308>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7a      	ldr	r2, [pc, #488]	@ (8002bdc <main+0x30c>)
 80029f4:	6013      	str	r3, [r2, #0]

	  if (prevOnOff == 0 && getOnOff() == 1) {
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <main+0x140>
 80029fc:	f000 fcd6 	bl	80033ac <getOnOff>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d104      	bne.n	8002a10 <main+0x140>

		  prevOnOff = 1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
		  time_base = HAL_GetTick();
 8002a0a:	f002 fb09 	bl	8005020 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]
	  }

	  if (getOnOff() != 1) {
 8002a10:	f000 fccc 	bl	80033ac <getOnOff>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d005      	beq.n	8002a26 <main+0x156>
		  prevOnOff = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
		  qlmb = 0;
 8002a1e:	4b70      	ldr	r3, [pc, #448]	@ (8002be0 <main+0x310>)
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
	  }

	  if (timer_flag) {
 8002a26:	4b6f      	ldr	r3, [pc, #444]	@ (8002be4 <main+0x314>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02f      	beq.n	8002a90 <main+0x1c0>
		  timer_flag = 0;
 8002a30:	4b6c      	ldr	r3, [pc, #432]	@ (8002be4 <main+0x314>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]

		  sd_idx += 1;
 8002a36:	8bfb      	ldrh	r3, [r7, #30]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	83fb      	strh	r3, [r7, #30]
		  float minutesPassed = timeStop - (float)((HAL_GetTick() - time_base) / (1000.0*60.0));
 8002a3c:	4b62      	ldr	r3, [pc, #392]	@ (8002bc8 <main+0x2f8>)
 8002a3e:	681c      	ldr	r4, [r3, #0]
 8002a40:	f002 faee 	bl	8005020 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fce2 	bl	8000414 <__aeabi_ui2d>
 8002a50:	a345      	add	r3, pc, #276	@ (adr r3, 8002b68 <main+0x298>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fe81 	bl	800075c <__aeabi_ddiv>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fe f849 	bl	8000af8 <__aeabi_d2f>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7fe f898 	bl	8000ba0 <__aeabi_fsub>
 8002a70:	4603      	mov	r3, r0
 8002a72:	607b      	str	r3, [r7, #4]
		  if (minutesPassed < 0) {
 8002a74:	f04f 0100 	mov.w	r1, #0
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe fb39 	bl	80010f0 <__aeabi_fcmplt>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <main+0x1c0>
			  setOnOff(0);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f000 fc9d 	bl	80033c4 <setOnOff>
			  setLogging(0);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f000 fcbc 	bl	8003408 <setLogging>
		  }
	  }

	  if (getBatteryVoltage() <= 11.0)
 8002a90:	f000 fb30 	bl	80030f4 <getBatteryVoltage>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4954      	ldr	r1, [pc, #336]	@ (8002be8 <main+0x318>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe fb33 	bl	8001104 <__aeabi_fcmple>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <main+0x1da>
		  setOnOff(0);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f000 fc8d 	bl	80033c4 <setOnOff>
//
//		  setDacOutput(0);
//		  setOnOff(0);
//	  }

	  if (temp_flag != 1) {
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d009      	beq.n	8002ac4 <main+0x1f4>

		  measureTemp_1();
 8002ab0:	f000 fcf6 	bl	80034a0 <measureTemp_1>
		  measureTemp_3();
 8002ab4:	f000 fd56 	bl	8003564 <measureTemp_3>
		  temp_time = HAL_GetTick();
 8002ab8:	f002 fab2 	bl	8005020 <HAL_GetTick>
 8002abc:	61b8      	str	r0, [r7, #24]
		  temp_flag = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
 8002ac2:	e011      	b.n	8002ae8 <main+0x218>
	  }
	  else if (temp_flag && (HAL_GetTick() - temp_time >= 710)) {
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00e      	beq.n	8002ae8 <main+0x218>
 8002aca:	f002 faa9 	bl	8005020 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f240 22c5 	movw	r2, #709	@ 0x2c5
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d905      	bls.n	8002ae8 <main+0x218>

		  temp_flag = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	75fb      	strb	r3, [r7, #23]
		  setTemp_1();
 8002ae0:	f000 fcea 	bl	80034b8 <setTemp_1>
		  setTemp_3();
 8002ae4:	f000 fd4a 	bl	800357c <setTemp_3>
	  }
	  prev_temp = getTemp_1();
 8002ae8:	f000 fd32 	bl	8003550 <getTemp_1>
 8002aec:	60b8      	str	r0, [r7, #8]

	  if ((float)((HAL_GetTick() - time_base) / (1000.0*60.0)) < 1.0) {
 8002aee:	f002 fa97 	bl	8005020 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fc8b 	bl	8000414 <__aeabi_ui2d>
 8002afe:	a31a      	add	r3, pc, #104	@ (adr r3, 8002b68 <main+0x298>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f7fd fe2a 	bl	800075c <__aeabi_ddiv>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fd fff2 	bl	8000af8 <__aeabi_d2f>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fae8 	bl	80010f0 <__aeabi_fcmplt>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <main+0x25c>
		  speed = 100;
 8002b26:	2364      	movs	r3, #100	@ 0x64
 8002b28:	82bb      	strh	r3, [r7, #20]
 8002b2a:	e003      	b.n	8002b34 <main+0x264>
	  }
	  else {
		  speed = getLoggingSpeed();;
 8002b2c:	f000 fc9e 	bl	800346c <getLoggingSpeed>
 8002b30:	4603      	mov	r3, r0
 8002b32:	82bb      	strh	r3, [r7, #20]
	  }
	  if (sd_idx >= speed/50 && getLogging() == 1) {
 8002b34:	8abb      	ldrh	r3, [r7, #20]
 8002b36:	4a2d      	ldr	r2, [pc, #180]	@ (8002bec <main+0x31c>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8bfa      	ldrh	r2, [r7, #30]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d308      	bcc.n	8002b58 <main+0x288>
 8002b46:	f000 fc53 	bl	80033f0 <getLogging>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d103      	bne.n	8002b58 <main+0x288>

		  sd_idx = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	83fb      	strh	r3, [r7, #30]
		  addDataToBuffer();
 8002b54:	f001 fccc 	bl	80044f0 <addDataToBuffer>
	  }


	  lcdCheckForUpdate();
 8002b58:	f7ff f89a 	bl	8001c90 <lcdCheckForUpdate>
	  checkForData( &myData);
 8002b5c:	4808      	ldr	r0, [pc, #32]	@ (8002b80 <main+0x2b0>)
 8002b5e:	f7ff fc8b 	bl	8002478 <checkForData>
	  batteryVoltage = getBatteryVoltage();
 8002b62:	e6f9      	b.n	8002958 <main+0x88>
 8002b64:	f3af 8000 	nop.w
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	40ed4c00 	.word	0x40ed4c00
 8002b70:	2000022d 	.word	0x2000022d
 8002b74:	20004af0 	.word	0x20004af0
 8002b78:	20004a70 	.word	0x20004a70
 8002b7c:	20004ab0 	.word	0x20004ab0
 8002b80:	200004a8 	.word	0x200004a8
 8002b84:	40020400 	.word	0x40020400
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	20000468 	.word	0x20000468
 8002b90:	2000046c 	.word	0x2000046c
 8002b94:	20000470 	.word	0x20000470
 8002b98:	20000474 	.word	0x20000474
 8002b9c:	20000478 	.word	0x20000478
 8002ba0:	2000047c 	.word	0x2000047c
 8002ba4:	20000480 	.word	0x20000480
 8002ba8:	2000049c 	.word	0x2000049c
 8002bac:	2000049e 	.word	0x2000049e
 8002bb0:	200004d9 	.word	0x200004d9
 8002bb4:	2000048c 	.word	0x2000048c
 8002bb8:	200004dd 	.word	0x200004dd
 8002bbc:	20000490 	.word	0x20000490
 8002bc0:	200004e1 	.word	0x200004e1
 8002bc4:	20000494 	.word	0x20000494
 8002bc8:	200004e5 	.word	0x200004e5
 8002bcc:	20000484 	.word	0x20000484
 8002bd0:	20000489 	.word	0x20000489
 8002bd4:	20000488 	.word	0x20000488
 8002bd8:	200004d5 	.word	0x200004d5
 8002bdc:	20000498 	.word	0x20000498
 8002be0:	200004a4 	.word	0x200004a4
 8002be4:	20000466 	.word	0x20000466
 8002be8:	41300000 	.word	0x41300000
 8002bec:	51eb851f 	.word	0x51eb851f

08002bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b096      	sub	sp, #88	@ 0x58
 8002bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bfa:	2234      	movs	r2, #52	@ 0x34
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f00a fa10 	bl	800d024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c1e:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <SystemClock_Config+0xc4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8002c26:	4a23      	ldr	r2, [pc, #140]	@ (8002cb4 <SystemClock_Config+0xc4>)
 8002c28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c2c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002c2e:	2306      	movs	r3, #6
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c32:	2301      	movs	r3, #1
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c36:	2301      	movs	r3, #1
 8002c38:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c3a:	2310      	movs	r3, #16
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c42:	2300      	movs	r3, #0
 8002c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002c46:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002c4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002c4c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8002c50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c56:	4618      	mov	r0, r3
 8002c58:	f002 ff98 	bl	8005b8c <HAL_RCC_OscConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002c62:	f000 f843 	bl	8002cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c66:	230f      	movs	r3, #15
 8002c68:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c7a:	f107 0310 	add.w	r3, r7, #16
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fab3 	bl	80061ec <HAL_RCC_ClockConfig>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002c8c:	f000 f82e 	bl	8002cec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c90:	2301      	movs	r3, #1
 8002c92:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c98:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fd6b 	bl	8006778 <HAL_RCCEx_PeriphCLKConfig>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002ca8:	f000 f820 	bl	8002cec <Error_Handler>
  }
}
 8002cac:	bf00      	nop
 8002cae:	3758      	adds	r7, #88	@ 0x58
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40007000 	.word	0x40007000

08002cb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x28>

        timer_flag = 1;
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
        setCurrent();
 8002cd0:	f000 f8a2 	bl	8002e18 <setCurrent>
        setBatteryVoltage();
 8002cd4:	f000 fa18 	bl	8003108 <setBatteryVoltage>
		setParameter();
 8002cd8:	f000 fb10 	bl	80032fc <setParameter>
        regulatorPI();
 8002cdc:	f000 fe2c 	bl	8003938 <regulatorPI>
    }
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000466 	.word	0x20000466

08002cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf0:	b672      	cpsid	i
}
 8002cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <Error_Handler+0x8>

08002cf8 <getSetpoint>:
int32_t current_offset = 0;
float qlmb = 0;

DataStruct myData;

float getSetpoint(void) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
 	return *(float*)&myData.data[0];
 8002cfc:	4b02      	ldr	r3, [pc, #8]	@ (8002d08 <getSetpoint+0x10>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	200004aa 	.word	0x200004aa

08002d0c <setSetpoint>:

void setSetpoint(float setpoint) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

	if (getMode() == 'C') {
 8002d14:	f000 fb2e 	bl	8003374 <getMode>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b43      	cmp	r3, #67	@ 0x43
 8002d1c:	d117      	bne.n	8002d4e <setSetpoint+0x42>

		if (setpoint > 15.0f)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4932      	ldr	r1, [pc, #200]	@ (8002dec <setSetpoint+0xe0>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fa02 	bl	800112c <__aeabi_fcmpgt>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <setSetpoint+0x28>
			setpoint = 15.0f;
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dec <setSetpoint+0xe0>)
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	e043      	b.n	8002dbc <setSetpoint+0xb0>
		else if (setpoint < 0)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe f9d8 	bl	80010f0 <__aeabi_fcmplt>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <setSetpoint+0xb0>
			setpoint = 0.0f;
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	e036      	b.n	8002dbc <setSetpoint+0xb0>
	}
	else if (getMode() == 'P') {
 8002d4e:	f000 fb11 	bl	8003374 <getMode>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b50      	cmp	r3, #80	@ 0x50
 8002d56:	d117      	bne.n	8002d88 <setSetpoint+0x7c>

		if (setpoint > 180.0f)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4925      	ldr	r1, [pc, #148]	@ (8002df0 <setSetpoint+0xe4>)
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe f9e5 	bl	800112c <__aeabi_fcmpgt>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <setSetpoint+0x62>
			setpoint = 180.0f;
 8002d68:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <setSetpoint+0xe4>)
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	e026      	b.n	8002dbc <setSetpoint+0xb0>
		else if (setpoint < 0.0f)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f04f 0100 	mov.w	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe f9bb 	bl	80010f0 <__aeabi_fcmplt>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01d      	beq.n	8002dbc <setSetpoint+0xb0>
			setpoint = 0.0f;
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	e019      	b.n	8002dbc <setSetpoint+0xb0>
	}
	else if (getMode() == 'R') {
 8002d88:	f000 faf4 	bl	8003374 <getMode>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b52      	cmp	r3, #82	@ 0x52
 8002d90:	d114      	bne.n	8002dbc <setSetpoint+0xb0>

		if (setpoint < 0.8f)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4917      	ldr	r1, [pc, #92]	@ (8002df4 <setSetpoint+0xe8>)
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f9aa 	bl	80010f0 <__aeabi_fcmplt>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <setSetpoint+0x9c>
			setpoint = 0.8f;
 8002da2:	4b14      	ldr	r3, [pc, #80]	@ (8002df4 <setSetpoint+0xe8>)
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	e009      	b.n	8002dbc <setSetpoint+0xb0>
		else if (setpoint > 80.0f)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4913      	ldr	r1, [pc, #76]	@ (8002df8 <setSetpoint+0xec>)
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe f9bd 	bl	800112c <__aeabi_fcmpgt>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <setSetpoint+0xb0>
			setpoint = 80.0f;
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <setSetpoint+0xec>)
 8002dba:	607b      	str	r3, [r7, #4]
	}

	setpoint = roundf(setpoint * 1000.0f) / 1000.0f;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	490f      	ldr	r1, [pc, #60]	@ (8002dfc <setSetpoint+0xf0>)
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fff7 	bl	8000db4 <__aeabi_fmul>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f00c fa03 	bl	800f1d4 <roundf>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	490a      	ldr	r1, [pc, #40]	@ (8002dfc <setSetpoint+0xf0>)
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe f8a2 	bl	8000f1c <__aeabi_fdiv>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	607b      	str	r3, [r7, #4]
	memcpy(&myData.data[0], &setpoint, sizeof(float));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a08      	ldr	r2, [pc, #32]	@ (8002e00 <setSetpoint+0xf4>)
 8002de0:	f8c2 3002 	str.w	r3, [r2, #2]
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	41700000 	.word	0x41700000
 8002df0:	43340000 	.word	0x43340000
 8002df4:	3f4ccccd 	.word	0x3f4ccccd
 8002df8:	42a00000 	.word	0x42a00000
 8002dfc:	447a0000 	.word	0x447a0000
 8002e00:	200004a8 	.word	0x200004a8

08002e04 <getCurrent>:

float getCurrent(void) {
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
	return *(float*)&myData.data[8];
 8002e08:	4b02      	ldr	r3, [pc, #8]	@ (8002e14 <getCurrent+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	200004b2 	.word	0x200004b2

08002e18 <setCurrent>:

void setCurrent(void) {
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0

	uint8_t Voltage[3];
	uint8_t readVoltage = 0b01000001;
 8002e1e:	2341      	movs	r3, #65	@ 0x41
 8002e20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_2_GPIO_Port, CS_2_Pin, GPIO_PIN_RESET);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2102      	movs	r1, #2
 8002e26:	48a4      	ldr	r0, [pc, #656]	@ (80030b8 <setCurrent+0x2a0>)
 8002e28:	f002 fe7f 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &readVoltage, 1, HAL_MAX_DELAY);
 8002e2c:	1df9      	adds	r1, r7, #7
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	2201      	movs	r2, #1
 8002e34:	48a1      	ldr	r0, [pc, #644]	@ (80030bc <setCurrent+0x2a4>)
 8002e36:	f004 f9d6 	bl	80071e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &Voltage[0],  3, HAL_MAX_DELAY);
 8002e3a:	f107 0108 	add.w	r1, r7, #8
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	2203      	movs	r2, #3
 8002e44:	489d      	ldr	r0, [pc, #628]	@ (80030bc <setCurrent+0x2a4>)
 8002e46:	f004 fb12 	bl	800746e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_2_GPIO_Port, CS_2_Pin, GPIO_PIN_SET);
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	489a      	ldr	r0, [pc, #616]	@ (80030b8 <setCurrent+0x2a0>)
 8002e50:	f002 fe6b 	bl	8005b2a <HAL_GPIO_WritePin>
	int32_t raw_data = (Voltage[0] << 16) | (Voltage[1] << 8) | Voltage[2];
 8002e54:	7a3b      	ldrb	r3, [r7, #8]
 8002e56:	041a      	lsls	r2, r3, #16
 8002e58:	7a7b      	ldrb	r3, [r7, #9]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	7aba      	ldrb	r2, [r7, #10]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

	float current = 0.0;
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	603b      	str	r3, [r7, #0]
	float setpoint = 0.0;
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
	if (getMode() == 'P')
 8002e70:	f000 fa80 	bl	8003374 <getMode>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b50      	cmp	r3, #80	@ 0x50
 8002e78:	d10c      	bne.n	8002e94 <setCurrent+0x7c>
		setpoint = getSetpoint() / getBatteryVoltage();
 8002e7a:	f7ff ff3d 	bl	8002cf8 <getSetpoint>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	f000 f938 	bl	80030f4 <getBatteryVoltage>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4619      	mov	r1, r3
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7fe f847 	bl	8000f1c <__aeabi_fdiv>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e014      	b.n	8002ebe <setCurrent+0xa6>
	else if (getMode() == 'R')
 8002e94:	f000 fa6e 	bl	8003374 <getMode>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b52      	cmp	r3, #82	@ 0x52
 8002e9c:	d10c      	bne.n	8002eb8 <setCurrent+0xa0>
		setpoint = getBatteryVoltage() / getSetpoint();
 8002e9e:	f000 f929 	bl	80030f4 <getBatteryVoltage>
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	f7ff ff28 	bl	8002cf8 <getSetpoint>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7fe f835 	bl	8000f1c <__aeabi_fdiv>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e002      	b.n	8002ebe <setCurrent+0xa6>
	else
		setpoint = getSetpoint();
 8002eb8:	f7ff ff1e 	bl	8002cf8 <getSetpoint>
 8002ebc:	6178      	str	r0, [r7, #20]

	if (setpoint >= 0.0f && setpoint <= 5.0) {
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7fe f928 	bl	8001118 <__aeabi_fcmpge>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d020      	beq.n	8002f10 <setCurrent+0xf8>
 8002ece:	497c      	ldr	r1, [pc, #496]	@ (80030c0 <setCurrent+0x2a8>)
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7fe f917 	bl	8001104 <__aeabi_fcmple>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d019      	beq.n	8002f10 <setCurrent+0xf8>
		current = ((float)raw_data*(4.74f/294092.3333f) + (0.17-26377.6667*(4.74f/294092.3333f)));
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7fd ff15 	bl	8000d0c <__aeabi_i2f>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4977      	ldr	r1, [pc, #476]	@ (80030c4 <setCurrent+0x2ac>)
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd ff64 	bl	8000db4 <__aeabi_fmul>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fab2 	bl	8000458 <__aeabi_f2d>
 8002ef4:	a36e      	add	r3, pc, #440	@ (adr r3, 80030b0 <setCurrent+0x298>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd f94d 	bl	8000198 <__aeabi_dsub>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fdf7 	bl	8000af8 <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	e03a      	b.n	8002f86 <setCurrent+0x16e>
	}
	else if (setpoint > 5.0f && setpoint <= 10.0) {
 8002f10:	496b      	ldr	r1, [pc, #428]	@ (80030c0 <setCurrent+0x2a8>)
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7fe f90a 	bl	800112c <__aeabi_fcmpgt>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <setCurrent+0x134>
 8002f1e:	496a      	ldr	r1, [pc, #424]	@ (80030c8 <setCurrent+0x2b0>)
 8002f20:	6978      	ldr	r0, [r7, #20]
 8002f22:	f7fe f8ef 	bl	8001104 <__aeabi_fcmple>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00f      	beq.n	8002f4c <setCurrent+0x134>
		current = ((float)raw_data*(5.086667f/418925) + (5.06667f-333558.333f*(5.086667f/418925)));
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fd feed 	bl	8000d0c <__aeabi_i2f>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4965      	ldr	r1, [pc, #404]	@ (80030cc <setCurrent+0x2b4>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd ff3c 	bl	8000db4 <__aeabi_fmul>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4964      	ldr	r1, [pc, #400]	@ (80030d0 <setCurrent+0x2b8>)
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fe2f 	bl	8000ba4 <__addsf3>
 8002f46:	4603      	mov	r3, r0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	e01c      	b.n	8002f86 <setCurrent+0x16e>
	}
	else if (setpoint > 10.0f && setpoint <= 15.0) {
 8002f4c:	495e      	ldr	r1, [pc, #376]	@ (80030c8 <setCurrent+0x2b0>)
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7fe f8ec 	bl	800112c <__aeabi_fcmpgt>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <setCurrent+0x16e>
 8002f5a:	495e      	ldr	r1, [pc, #376]	@ (80030d4 <setCurrent+0x2bc>)
 8002f5c:	6978      	ldr	r0, [r7, #20]
 8002f5e:	f7fe f8d1 	bl	8001104 <__aeabi_fcmple>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <setCurrent+0x16e>
		current = ((float)raw_data*(3.44f/461250.333f) + (11.04f-855380.333f*(3.44f/461250.333f)));
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7fd fecf 	bl	8000d0c <__aeabi_i2f>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4959      	ldr	r1, [pc, #356]	@ (80030d8 <setCurrent+0x2c0>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd ff1e 	bl	8000db4 <__aeabi_fmul>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4958      	ldr	r1, [pc, #352]	@ (80030dc <setCurrent+0x2c4>)
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fe11 	bl	8000ba4 <__addsf3>
 8002f82:	4603      	mov	r3, r0
 8002f84:	603b      	str	r3, [r7, #0]
	}

	float value = 0.0;
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]

	if (getMode() == 'C') {
 8002f8c:	f000 f9f2 	bl	8003374 <getMode>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b43      	cmp	r3, #67	@ 0x43
 8002f94:	d103      	bne.n	8002f9e <setCurrent+0x186>

		value = getSetpoint();
 8002f96:	f7ff feaf 	bl	8002cf8 <getSetpoint>
 8002f9a:	6138      	str	r0, [r7, #16]
 8002f9c:	e022      	b.n	8002fe4 <setCurrent+0x1cc>
	}
	else if (getMode() == 'R') {
 8002f9e:	f000 f9e9 	bl	8003374 <getMode>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b52      	cmp	r3, #82	@ 0x52
 8002fa6:	d10c      	bne.n	8002fc2 <setCurrent+0x1aa>

		value = getBatteryVoltage() / getSetpoint();
 8002fa8:	f000 f8a4 	bl	80030f4 <getBatteryVoltage>
 8002fac:	4604      	mov	r4, r0
 8002fae:	f7ff fea3 	bl	8002cf8 <getSetpoint>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7fd ffb0 	bl	8000f1c <__aeabi_fdiv>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e010      	b.n	8002fe4 <setCurrent+0x1cc>
	}
	else if (getMode() == 'P') {
 8002fc2:	f000 f9d7 	bl	8003374 <getMode>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b50      	cmp	r3, #80	@ 0x50
 8002fca:	d10b      	bne.n	8002fe4 <setCurrent+0x1cc>

		value = getSetpoint() / getBatteryVoltage();
 8002fcc:	f7ff fe94 	bl	8002cf8 <getSetpoint>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	f000 f88f 	bl	80030f4 <getBatteryVoltage>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f7fd ff9e 	bl	8000f1c <__aeabi_fdiv>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	613b      	str	r3, [r7, #16]
	}

	if (value <= 5.0f) {
 8002fe4:	4936      	ldr	r1, [pc, #216]	@ (80030c0 <setCurrent+0x2a8>)
 8002fe6:	6938      	ldr	r0, [r7, #16]
 8002fe8:	f7fe f88c 	bl	8001104 <__aeabi_fcmple>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <setCurrent+0x1f0>

		HAL_GPIO_WritePin(RES_1_GPIO_Port, RES_1_Pin, GPIO_PIN_RESET);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2140      	movs	r1, #64	@ 0x40
 8002ff6:	4830      	ldr	r0, [pc, #192]	@ (80030b8 <setCurrent+0x2a0>)
 8002ff8:	f002 fd97 	bl	8005b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RES_2_GPIO_Port, RES_2_Pin, GPIO_PIN_RESET);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2180      	movs	r1, #128	@ 0x80
 8003000:	4837      	ldr	r0, [pc, #220]	@ (80030e0 <setCurrent+0x2c8>)
 8003002:	f002 fd92 	bl	8005b2a <HAL_GPIO_WritePin>
 8003006:	e030      	b.n	800306a <setCurrent+0x252>
	}
	else if (value > 5.0f && value <= 11.0f) {
 8003008:	492d      	ldr	r1, [pc, #180]	@ (80030c0 <setCurrent+0x2a8>)
 800300a:	6938      	ldr	r0, [r7, #16]
 800300c:	f7fe f88e 	bl	800112c <__aeabi_fcmpgt>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d011      	beq.n	800303a <setCurrent+0x222>
 8003016:	4933      	ldr	r1, [pc, #204]	@ (80030e4 <setCurrent+0x2cc>)
 8003018:	6938      	ldr	r0, [r7, #16]
 800301a:	f7fe f873 	bl	8001104 <__aeabi_fcmple>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <setCurrent+0x222>

		HAL_GPIO_WritePin(RES_1_GPIO_Port, RES_1_Pin, GPIO_PIN_SET);
 8003024:	2201      	movs	r2, #1
 8003026:	2140      	movs	r1, #64	@ 0x40
 8003028:	4823      	ldr	r0, [pc, #140]	@ (80030b8 <setCurrent+0x2a0>)
 800302a:	f002 fd7e 	bl	8005b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RES_2_GPIO_Port, RES_2_Pin, GPIO_PIN_RESET);
 800302e:	2200      	movs	r2, #0
 8003030:	2180      	movs	r1, #128	@ 0x80
 8003032:	482b      	ldr	r0, [pc, #172]	@ (80030e0 <setCurrent+0x2c8>)
 8003034:	f002 fd79 	bl	8005b2a <HAL_GPIO_WritePin>
 8003038:	e017      	b.n	800306a <setCurrent+0x252>
	}
	else if (value > 11.0f && value <= 15.0f) {
 800303a:	492a      	ldr	r1, [pc, #168]	@ (80030e4 <setCurrent+0x2cc>)
 800303c:	6938      	ldr	r0, [r7, #16]
 800303e:	f7fe f875 	bl	800112c <__aeabi_fcmpgt>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <setCurrent+0x252>
 8003048:	4922      	ldr	r1, [pc, #136]	@ (80030d4 <setCurrent+0x2bc>)
 800304a:	6938      	ldr	r0, [r7, #16]
 800304c:	f7fe f85a 	bl	8001104 <__aeabi_fcmple>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <setCurrent+0x252>

		HAL_GPIO_WritePin(RES_1_GPIO_Port, RES_1_Pin, GPIO_PIN_SET);
 8003056:	2201      	movs	r2, #1
 8003058:	2140      	movs	r1, #64	@ 0x40
 800305a:	4817      	ldr	r0, [pc, #92]	@ (80030b8 <setCurrent+0x2a0>)
 800305c:	f002 fd65 	bl	8005b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RES_2_GPIO_Port, RES_2_Pin, GPIO_PIN_SET);
 8003060:	2201      	movs	r2, #1
 8003062:	2180      	movs	r1, #128	@ 0x80
 8003064:	481e      	ldr	r0, [pc, #120]	@ (80030e0 <setCurrent+0x2c8>)
 8003066:	f002 fd60 	bl	8005b2a <HAL_GPIO_WritePin>
	}

	if (getOnOff() != 1)
 800306a:	f000 f99f 	bl	80033ac <getOnOff>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <setCurrent+0x262>
		current = 0.0f;
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	603b      	str	r3, [r7, #0]

	qlmb += current*0.05f;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	491a      	ldr	r1, [pc, #104]	@ (80030e8 <setCurrent+0x2d0>)
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fe98 	bl	8000db4 <__aeabi_fmul>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	4b18      	ldr	r3, [pc, #96]	@ (80030ec <setCurrent+0x2d4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fd fd88 	bl	8000ba4 <__addsf3>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <setCurrent+0x2d4>)
 800309a:	601a      	str	r2, [r3, #0]

	memcpy(&myData.data[8], &current, sizeof(float));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <setCurrent+0x2d8>)
 80030a0:	f8c2 300a 	str.w	r3, [r2, #10]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	f3af 8000 	nop.w
 80030b0:	bf7b07cc 	.word	0xbf7b07cc
 80030b4:	3fd05432 	.word	0x3fd05432
 80030b8:	40020400 	.word	0x40020400
 80030bc:	200049bc 	.word	0x200049bc
 80030c0:	40a00000 	.word	0x40a00000
 80030c4:	378733d3 	.word	0x378733d3
 80030c8:	41200000 	.word	0x41200000
 80030cc:	374bb64f 	.word	0x374bb64f
 80030d0:	3f821e04 	.word	0x3f821e04
 80030d4:	41700000 	.word	0x41700000
 80030d8:	36fa3fa4 	.word	0x36fa3fa4
 80030dc:	4095237e 	.word	0x4095237e
 80030e0:	40020000 	.word	0x40020000
 80030e4:	41300000 	.word	0x41300000
 80030e8:	3d4ccccd 	.word	0x3d4ccccd
 80030ec:	200004a4 	.word	0x200004a4
 80030f0:	200004a8 	.word	0x200004a8

080030f4 <getBatteryVoltage>:

float getBatteryVoltage(void) {
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
	return *(float*)&myData.data[12];
 80030f8:	4b02      	ldr	r3, [pc, #8]	@ (8003104 <getBatteryVoltage+0x10>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	200004b6 	.word	0x200004b6

08003108 <setBatteryVoltage>:

void setBatteryVoltage(void) {
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0

	static const float a = 1.4978/2913086;
	static const float b = 11.506 - (1838100*a);
	uint8_t Voltage[3];
	uint8_t readVoltage = 0b01000001;
 800310e:	2341      	movs	r3, #65	@ 0x41
 8003110:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_RESET);
 8003112:	2200      	movs	r2, #0
 8003114:	2104      	movs	r1, #4
 8003116:	4840      	ldr	r0, [pc, #256]	@ (8003218 <setBatteryVoltage+0x110>)
 8003118:	f002 fd07 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &readVoltage, 1, HAL_MAX_DELAY);
 800311c:	f107 010b 	add.w	r1, r7, #11
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	2201      	movs	r2, #1
 8003126:	483d      	ldr	r0, [pc, #244]	@ (800321c <setBatteryVoltage+0x114>)
 8003128:	f004 f85d 	bl	80071e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &Voltage[0],  3, HAL_MAX_DELAY);
 800312c:	f107 010c 	add.w	r1, r7, #12
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	2203      	movs	r2, #3
 8003136:	4839      	ldr	r0, [pc, #228]	@ (800321c <setBatteryVoltage+0x114>)
 8003138:	f004 f999 	bl	800746e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_SET);
 800313c:	2201      	movs	r2, #1
 800313e:	2104      	movs	r1, #4
 8003140:	4835      	ldr	r0, [pc, #212]	@ (8003218 <setBatteryVoltage+0x110>)
 8003142:	f002 fcf2 	bl	8005b2a <HAL_GPIO_WritePin>
	int32_t raw_data = (Voltage[0] << 16) | (Voltage[1] << 8) | Voltage[2];
 8003146:	7b3b      	ldrb	r3, [r7, #12]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	7b7b      	ldrb	r3, [r7, #13]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	4313      	orrs	r3, r2
 8003150:	7bba      	ldrb	r2, [r7, #14]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
	float battery_voltage = 0;
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	607b      	str	r3, [r7, #4]
	float wire_resistance = *(float*)&myData.data[43];
 800315c:	4b30      	ldr	r3, [pc, #192]	@ (8003220 <setBatteryVoltage+0x118>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	613b      	str	r3, [r7, #16]

	if (getOnOff() != 0) {
 8003162:	f000 f923 	bl	80033ac <getOnOff>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d022      	beq.n	80031b2 <setBatteryVoltage+0xaa>
		battery_voltage = (((float)raw_data * a) + b) + getCurrent()*wire_resistance;
 800316c:	6978      	ldr	r0, [r7, #20]
 800316e:	f7fd fdcd 	bl	8000d0c <__aeabi_i2f>
 8003172:	4602      	mov	r2, r0
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <setBatteryVoltage+0x11c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7fd fe1a 	bl	8000db4 <__aeabi_fmul>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	4b28      	ldr	r3, [pc, #160]	@ (8003228 <setBatteryVoltage+0x120>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f7fd fd0a 	bl	8000ba4 <__addsf3>
 8003190:	4603      	mov	r3, r0
 8003192:	461c      	mov	r4, r3
 8003194:	f7ff fe36 	bl	8002e04 <getCurrent>
 8003198:	4603      	mov	r3, r0
 800319a:	6939      	ldr	r1, [r7, #16]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd fe09 	bl	8000db4 <__aeabi_fmul>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4619      	mov	r1, r3
 80031a6:	4620      	mov	r0, r4
 80031a8:	f7fd fcfc 	bl	8000ba4 <__addsf3>
 80031ac:	4603      	mov	r3, r0
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	e013      	b.n	80031da <setBatteryVoltage+0xd2>
	}
	else {
		battery_voltage = (((float)raw_data * a) + b);
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7fd fdaa 	bl	8000d0c <__aeabi_i2f>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <setBatteryVoltage+0x11c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f7fd fdf7 	bl	8000db4 <__aeabi_fmul>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <setBatteryVoltage+0x120>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f7fd fce7 	bl	8000ba4 <__addsf3>
 80031d6:	4603      	mov	r3, r0
 80031d8:	607b      	str	r3, [r7, #4]
	}

	battery_voltage += 0.1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f93b 	bl	8000458 <__aeabi_f2d>
 80031e2:	a30b      	add	r3, pc, #44	@ (adr r3, 8003210 <setBatteryVoltage+0x108>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f7fc ffd8 	bl	800019c <__adddf3>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7fd fc80 	bl	8000af8 <__aeabi_d2f>
 80031f8:	4603      	mov	r3, r0
 80031fa:	607b      	str	r3, [r7, #4]

    memcpy(&myData.data[12], &battery_voltage, sizeof(float));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a0b      	ldr	r2, [pc, #44]	@ (800322c <setBatteryVoltage+0x124>)
 8003200:	f8c2 300e 	str.w	r3, [r2, #14]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}
 800320c:	f3af 8000 	nop.w
 8003210:	9999999a 	.word	0x9999999a
 8003214:	3fb99999 	.word	0x3fb99999
 8003218:	40020400 	.word	0x40020400
 800321c:	200049bc 	.word	0x200049bc
 8003220:	200004d5 	.word	0x200004d5
 8003224:	0800f5e8 	.word	0x0800f5e8
 8003228:	0800f5ec 	.word	0x0800f5ec
 800322c:	200004a8 	.word	0x200004a8

08003230 <getDacOutput>:

float getDacOutput(void) {
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
	return *(float*)&myData.data[16];
 8003234:	4b02      	ldr	r3, [pc, #8]	@ (8003240 <getDacOutput+0x10>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	200004ba 	.word	0x200004ba
 8003244:	00000000 	.word	0x00000000

08003248 <setDacOutput>:

void setDacOutput(uint16_t dac_output) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]

	uint8_t dac_data[2] = { dac_output >> 8, dac_output & 0xFF };
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	b29b      	uxth	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	733b      	strb	r3, [r7, #12]
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_RESET);
 8003262:	2200      	movs	r2, #0
 8003264:	2110      	movs	r1, #16
 8003266:	481c      	ldr	r0, [pc, #112]	@ (80032d8 <setDacOutput+0x90>)
 8003268:	f002 fc5f 	bl	8005b2a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, dac_data, 2, HAL_MAX_DELAY);
 800326c:	f107 010c 	add.w	r1, r7, #12
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	2202      	movs	r2, #2
 8003276:	4819      	ldr	r0, [pc, #100]	@ (80032dc <setDacOutput+0x94>)
 8003278:	f003 ffb5 	bl	80071e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_3_GPIO_Port, CS_3_Pin, GPIO_PIN_SET);
 800327c:	2201      	movs	r2, #1
 800327e:	2110      	movs	r1, #16
 8003280:	4815      	ldr	r0, [pc, #84]	@ (80032d8 <setDacOutput+0x90>)
 8003282:	f002 fc52 	bl	8005b2a <HAL_GPIO_WritePin>
	float DAC_out = ((float)dac_output / 0xFFFE) * V_MAX_DAC;
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd fd3b 	bl	8000d04 <__aeabi_ui2f>
 800328e:	4603      	mov	r3, r0
 8003290:	4913      	ldr	r1, [pc, #76]	@ (80032e0 <setDacOutput+0x98>)
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fe42 	bl	8000f1c <__aeabi_fdiv>
 8003298:	4603      	mov	r3, r0
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f8dc 	bl	8000458 <__aeabi_f2d>
 80032a0:	a30b      	add	r3, pc, #44	@ (adr r3, 80032d0 <setDacOutput+0x88>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f7fd f92f 	bl	8000508 <__aeabi_dmul>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	f7fd fc21 	bl	8000af8 <__aeabi_d2f>
 80032b6:	4603      	mov	r3, r0
 80032b8:	60bb      	str	r3, [r7, #8]
	memcpy(&myData.data[16], &DAC_out, sizeof(float));
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4a09      	ldr	r2, [pc, #36]	@ (80032e4 <setDacOutput+0x9c>)
 80032be:	f8c2 3012 	str.w	r3, [r2, #18]
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	f3af 8000 	nop.w
 80032d0:	b645a1cb 	.word	0xb645a1cb
 80032d4:	400ffdf3 	.word	0x400ffdf3
 80032d8:	40020800 	.word	0x40020800
 80032dc:	200049bc 	.word	0x200049bc
 80032e0:	477ffe00 	.word	0x477ffe00
 80032e4:	200004a8 	.word	0x200004a8

080032e8 <getParameter>:

float getParameter(void) {
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
	return *(float*)&myData.data[4];
 80032ec:	4b02      	ldr	r3, [pc, #8]	@ (80032f8 <getParameter+0x10>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	200004ae 	.word	0x200004ae

080032fc <setParameter>:

void setParameter(void) {
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0

	float parameter = 0.0;
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	607b      	str	r3, [r7, #4]
	if (getMode() == 'C')
 8003308:	f000 f834 	bl	8003374 <getMode>
 800330c:	4603      	mov	r3, r0
 800330e:	2b43      	cmp	r3, #67	@ 0x43
 8003310:	d103      	bne.n	800331a <setParameter+0x1e>
		parameter = getCurrent();
 8003312:	f7ff fd77 	bl	8002e04 <getCurrent>
 8003316:	4603      	mov	r3, r0
 8003318:	607b      	str	r3, [r7, #4]
	if (getMode() == 'R')
 800331a:	f000 f82b 	bl	8003374 <getMode>
 800331e:	4603      	mov	r3, r0
 8003320:	2b52      	cmp	r3, #82	@ 0x52
 8003322:	d10b      	bne.n	800333c <setParameter+0x40>
		parameter = getBatteryVoltage() / getCurrent();
 8003324:	f7ff fee6 	bl	80030f4 <getBatteryVoltage>
 8003328:	4604      	mov	r4, r0
 800332a:	f7ff fd6b 	bl	8002e04 <getCurrent>
 800332e:	4603      	mov	r3, r0
 8003330:	4619      	mov	r1, r3
 8003332:	4620      	mov	r0, r4
 8003334:	f7fd fdf2 	bl	8000f1c <__aeabi_fdiv>
 8003338:	4603      	mov	r3, r0
 800333a:	607b      	str	r3, [r7, #4]
	if (getMode() == 'P')
 800333c:	f000 f81a 	bl	8003374 <getMode>
 8003340:	4603      	mov	r3, r0
 8003342:	2b50      	cmp	r3, #80	@ 0x50
 8003344:	d10b      	bne.n	800335e <setParameter+0x62>
		parameter = getBatteryVoltage() * getCurrent();
 8003346:	f7ff fed5 	bl	80030f4 <getBatteryVoltage>
 800334a:	4604      	mov	r4, r0
 800334c:	f7ff fd5a 	bl	8002e04 <getCurrent>
 8003350:	4603      	mov	r3, r0
 8003352:	4619      	mov	r1, r3
 8003354:	4620      	mov	r0, r4
 8003356:	f7fd fd2d 	bl	8000db4 <__aeabi_fmul>
 800335a:	4603      	mov	r3, r0
 800335c:	607b      	str	r3, [r7, #4]

	memcpy(&myData.data[4], &parameter, sizeof(float));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a03      	ldr	r2, [pc, #12]	@ (8003370 <setParameter+0x74>)
 8003362:	f8c2 3006 	str.w	r3, [r2, #6]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	bf00      	nop
 8003370:	200004a8 	.word	0x200004a8

08003374 <getMode>:

uint8_t getMode(void) {
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
	return *(uint8_t*)&myData.data[36];
 8003378:	4b03      	ldr	r3, [pc, #12]	@ (8003388 <getMode+0x14>)
 800337a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	200004a8 	.word	0x200004a8

0800338c <setMode>:

void setMode(uint8_t mode) {
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
	memcpy(&myData.data[36], &mode, sizeof(uint8_t));
 8003396:	79fa      	ldrb	r2, [r7, #7]
 8003398:	4b03      	ldr	r3, [pc, #12]	@ (80033a8 <setMode+0x1c>)
 800339a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	200004a8 	.word	0x200004a8

080033ac <getOnOff>:

uint8_t getOnOff(void) {
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
	return *(uint8_t*)&myData.data[37];
 80033b0:	4b03      	ldr	r3, [pc, #12]	@ (80033c0 <getOnOff+0x14>)
 80033b2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	200004a8 	.word	0x200004a8

080033c4 <setOnOff>:

void setOnOff(uint8_t onOff) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]

	if (onOff == 0)
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <setOnOff+0x16>
		setDacOutput(0);
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7ff ff37 	bl	8003248 <setDacOutput>
	memcpy(&myData.data[37], &onOff, sizeof(uint8_t));
 80033da:	79fa      	ldrb	r2, [r7, #7]
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <setOnOff+0x28>)
 80033de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200004a8 	.word	0x200004a8

080033f0 <getLogging>:

uint8_t getLogging(void) {
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
	return *(uint8_t*)&myData.data[38];
 80033f4:	4b03      	ldr	r3, [pc, #12]	@ (8003404 <getLogging+0x14>)
 80033f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	200004a8 	.word	0x200004a8

08003408 <setLogging>:

void setLogging(uint8_t logging) {
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]

	if (logging != 1)
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d002      	beq.n	800341e <setLogging+0x16>
		prev_logging = 0;
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <setLogging+0x28>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]

	memcpy(&myData.data[38], &logging, sizeof(uint8_t));
 800341e:	79fa      	ldrb	r2, [r7, #7]
 8003420:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <setLogging+0x2c>)
 8003422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	2000097d 	.word	0x2000097d
 8003434:	200004a8 	.word	0x200004a8

08003438 <getLoggingBufferSize>:

uint16_t getLoggingBufferSize(void) {
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
	return *(uint16_t*)&myData.data[39];
 800343c:	4b02      	ldr	r3, [pc, #8]	@ (8003448 <getLoggingBufferSize+0x10>)
 800343e:	881b      	ldrh	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	200004d1 	.word	0x200004d1

0800344c <setLoggingBufferSize>:

void setLoggingBufferSize(uint16_t buffer_size) {
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
	memcpy(&myData.data[39], &buffer_size, sizeof(uint16_t));
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	4a03      	ldr	r2, [pc, #12]	@ (8003468 <setLoggingBufferSize+0x1c>)
 800345a:	f8a2 3029 	strh.w	r3, [r2, #41]	@ 0x29
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	200004a8 	.word	0x200004a8

0800346c <getLoggingSpeed>:

uint16_t getLoggingSpeed(void) {
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
	return *(uint16_t*)&myData.data[41];
 8003470:	4b02      	ldr	r3, [pc, #8]	@ (800347c <getLoggingSpeed+0x10>)
 8003472:	881b      	ldrh	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	200004d3 	.word	0x200004d3

08003480 <setLoggingSpeed>:

void setLoggingSpeed(uint16_t speed) {
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
	memcpy(&myData.data[41], &speed, sizeof(uint16_t));
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	4a03      	ldr	r2, [pc, #12]	@ (800349c <setLoggingSpeed+0x1c>)
 800348e:	f8a2 302b 	strh.w	r3, [r2, #43]	@ 0x2b
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	200004a8 	.word	0x200004a8

080034a0 <measureTemp_1>:

void measureTemp_1(void) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0

	wire_reset_1();
 80034a4:	f000 f8d8 	bl	8003658 <wire_reset_1>
	wire_write_1(0xcc);
 80034a8:	20cc      	movs	r0, #204	@ 0xcc
 80034aa:	f000 f951 	bl	8003750 <wire_write_1>
	wire_write_1(0x44);
 80034ae:	2044      	movs	r0, #68	@ 0x44
 80034b0:	f000 f94e 	bl	8003750 <wire_write_1>
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <setTemp_1>:

void setTemp_1(void) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0

	  wire_reset_1();
 80034be:	f000 f8cb 	bl	8003658 <wire_reset_1>
	  wire_write_1(0xcc);
 80034c2:	20cc      	movs	r0, #204	@ 0xcc
 80034c4:	f000 f944 	bl	8003750 <wire_write_1>
	  wire_write_1(0xbe);
 80034c8:	20be      	movs	r0, #190	@ 0xbe
 80034ca:	f000 f941 	bl	8003750 <wire_write_1>
	  int i;
	  uint8_t scratchpad[9];
	  for (i = 0; i < 9; i++) {
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e00b      	b.n	80034ec <setTemp_1+0x34>
		  scratchpad[i] = wire_read_1();
 80034d4:	f000 f958 	bl	8003788 <wire_read_1>
 80034d8:	4603      	mov	r3, r0
 80034da:	4619      	mov	r1, r3
 80034dc:	1d3a      	adds	r2, r7, #4
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	4413      	add	r3, r2
 80034e2:	460a      	mov	r2, r1
 80034e4:	701a      	strb	r2, [r3, #0]
	  for (i = 0; i < 9; i++) {
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3301      	adds	r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	ddf0      	ble.n	80034d4 <setTemp_1+0x1c>
	  }
	  uint8_t higher = scratchpad[1];
 80034f2:	797b      	ldrb	r3, [r7, #5]
 80034f4:	74fb      	strb	r3, [r7, #19]
	  uint8_t lower = scratchpad[0];
 80034f6:	793b      	ldrb	r3, [r7, #4]
 80034f8:	74bb      	strb	r3, [r7, #18]
	  uint16_t combined = ((uint16_t)higher << 8) | lower;
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	b21b      	sxth	r3, r3
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	b21a      	sxth	r2, r3
 8003502:	7cbb      	ldrb	r3, [r7, #18]
 8003504:	b21b      	sxth	r3, r3
 8003506:	4313      	orrs	r3, r2
 8003508:	b21b      	sxth	r3, r3
 800350a:	823b      	strh	r3, [r7, #16]
	  float temperature = (float)combined / 16.0;
 800350c:	8a3b      	ldrh	r3, [r7, #16]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd fbf8 	bl	8000d04 <__aeabi_ui2f>
 8003514:	4603      	mov	r3, r0
 8003516:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fcfe 	bl	8000f1c <__aeabi_fdiv>
 8003520:	4603      	mov	r3, r0
 8003522:	603b      	str	r3, [r7, #0]

	  if (temperature < 4000)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4908      	ldr	r1, [pc, #32]	@ (8003548 <setTemp_1+0x90>)
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fde1 	bl	80010f0 <__aeabi_fcmplt>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d100      	bne.n	8003536 <setTemp_1+0x7e>
		  memcpy(&myData.data[20], &temperature, sizeof(float));
}
 8003534:	e003      	b.n	800353e <setTemp_1+0x86>
		  memcpy(&myData.data[20], &temperature, sizeof(float));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4a04      	ldr	r2, [pc, #16]	@ (800354c <setTemp_1+0x94>)
 800353a:	f8c2 3016 	str.w	r3, [r2, #22]
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	457a0000 	.word	0x457a0000
 800354c:	200004a8 	.word	0x200004a8

08003550 <getTemp_1>:

float getTemp_1(void) {
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
	return *(float*)&myData.data[20];
 8003554:	4b02      	ldr	r3, [pc, #8]	@ (8003560 <getTemp_1+0x10>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	200004be 	.word	0x200004be

08003564 <measureTemp_3>:

float getTemp_2(void) {
	return *(float*)&myData.data[24];
}

void measureTemp_3(void) {
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0

	wire_reset_3();
 8003568:	f000 f92e 	bl	80037c8 <wire_reset_3>
	wire_write_3(0xcc);
 800356c:	20cc      	movs	r0, #204	@ 0xcc
 800356e:	f000 f9a7 	bl	80038c0 <wire_write_3>
	wire_write_3(0x44);
 8003572:	2044      	movs	r0, #68	@ 0x44
 8003574:	f000 f9a4 	bl	80038c0 <wire_write_3>
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}

0800357c <setTemp_3>:

void setTemp_3(void) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0

	  wire_reset_3();
 8003582:	f000 f921 	bl	80037c8 <wire_reset_3>
	  wire_write_3(0xcc);
 8003586:	20cc      	movs	r0, #204	@ 0xcc
 8003588:	f000 f99a 	bl	80038c0 <wire_write_3>
	  wire_write_3(0xbe);
 800358c:	20be      	movs	r0, #190	@ 0xbe
 800358e:	f000 f997 	bl	80038c0 <wire_write_3>
	  int i;
	  uint8_t scratchpad[9];
	  for (i = 0; i < 9; i++) {
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e00b      	b.n	80035b0 <setTemp_3+0x34>
		  scratchpad[i] = wire_read_3();
 8003598:	f000 f9ae 	bl	80038f8 <wire_read_3>
 800359c:	4603      	mov	r3, r0
 800359e:	4619      	mov	r1, r3
 80035a0:	1d3a      	adds	r2, r7, #4
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4413      	add	r3, r2
 80035a6:	460a      	mov	r2, r1
 80035a8:	701a      	strb	r2, [r3, #0]
	  for (i = 0; i < 9; i++) {
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3301      	adds	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	ddf0      	ble.n	8003598 <setTemp_3+0x1c>
	  }
	  uint8_t higher = scratchpad[1];
 80035b6:	797b      	ldrb	r3, [r7, #5]
 80035b8:	74fb      	strb	r3, [r7, #19]
	  uint8_t lower = scratchpad[0];
 80035ba:	793b      	ldrb	r3, [r7, #4]
 80035bc:	74bb      	strb	r3, [r7, #18]
	  uint16_t combined = ((uint16_t)higher << 8) | lower;
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	b21a      	sxth	r2, r3
 80035c6:	7cbb      	ldrb	r3, [r7, #18]
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	4313      	orrs	r3, r2
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	823b      	strh	r3, [r7, #16]
	  float temperature = (float)combined / 16.0;
 80035d0:	8a3b      	ldrh	r3, [r7, #16]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fb96 	bl	8000d04 <__aeabi_ui2f>
 80035d8:	4603      	mov	r3, r0
 80035da:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fc9c 	bl	8000f1c <__aeabi_fdiv>
 80035e4:	4603      	mov	r3, r0
 80035e6:	603b      	str	r3, [r7, #0]

	  if (temperature < 2000)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4908      	ldr	r1, [pc, #32]	@ (800360c <setTemp_3+0x90>)
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fd7f 	bl	80010f0 <__aeabi_fcmplt>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d100      	bne.n	80035fa <setTemp_3+0x7e>
		  memcpy(&myData.data[28], &temperature, sizeof(float));
}
 80035f8:	e003      	b.n	8003602 <setTemp_3+0x86>
		  memcpy(&myData.data[28], &temperature, sizeof(float));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <setTemp_3+0x94>)
 80035fe:	f8c2 301e 	str.w	r3, [r2, #30]
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	44fa0000 	.word	0x44fa0000
 8003610:	200004a8 	.word	0x200004a8

08003614 <getTemp_3>:

float getTemp_3(void) {
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
	return *(float*)&myData.data[28];
 8003618:	4b02      	ldr	r3, [pc, #8]	@ (8003624 <getTemp_3+0x10>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	200004c6 	.word	0x200004c6

08003628 <delay_us>:

void delay_us(uint32_t us) {
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8003630:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <delay_us+0x2c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 8003638:	bf00      	nop
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <delay_us+0x2c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	d8f9      	bhi.n	800363a <delay_us+0x12>
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20004ab0 	.word	0x20004ab0

08003658 <wire_reset_1>:
HAL_StatusTypeDef wire_reset_1(void) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0

  int rc;
  HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_RESET);
 800365e:	2200      	movs	r2, #0
 8003660:	2101      	movs	r1, #1
 8003662:	4811      	ldr	r0, [pc, #68]	@ (80036a8 <wire_reset_1+0x50>)
 8003664:	f002 fa61 	bl	8005b2a <HAL_GPIO_WritePin>
  delay_us(480);
 8003668:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800366c:	f7ff ffdc 	bl	8003628 <delay_us>
  HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_SET);
 8003670:	2201      	movs	r2, #1
 8003672:	2101      	movs	r1, #1
 8003674:	480c      	ldr	r0, [pc, #48]	@ (80036a8 <wire_reset_1+0x50>)
 8003676:	f002 fa58 	bl	8005b2a <HAL_GPIO_WritePin>
  delay_us(70);
 800367a:	2046      	movs	r0, #70	@ 0x46
 800367c:	f7ff ffd4 	bl	8003628 <delay_us>
  rc = HAL_GPIO_ReadPin(temp_1_GPIO_Port, temp_1_Pin);
 8003680:	2101      	movs	r1, #1
 8003682:	4809      	ldr	r0, [pc, #36]	@ (80036a8 <wire_reset_1+0x50>)
 8003684:	f002 fa3a 	bl	8005afc <HAL_GPIO_ReadPin>
 8003688:	4603      	mov	r3, r0
 800368a:	607b      	str	r3, [r7, #4]
  delay_us(410);
 800368c:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8003690:	f7ff ffca 	bl	8003628 <delay_us>
  if (rc == 0)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <wire_reset_1+0x46>
    return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <wire_reset_1+0x48>
  else
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40020800 	.word	0x40020800

080036ac <write_bit_1>:
void write_bit_1(int value) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  if (value) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <write_bit_1+0x30>
    HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_RESET);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2101      	movs	r1, #1
 80036be:	4811      	ldr	r0, [pc, #68]	@ (8003704 <write_bit_1+0x58>)
 80036c0:	f002 fa33 	bl	8005b2a <HAL_GPIO_WritePin>
    delay_us(6);
 80036c4:	2006      	movs	r0, #6
 80036c6:	f7ff ffaf 	bl	8003628 <delay_us>
    HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_SET);
 80036ca:	2201      	movs	r2, #1
 80036cc:	2101      	movs	r1, #1
 80036ce:	480d      	ldr	r0, [pc, #52]	@ (8003704 <write_bit_1+0x58>)
 80036d0:	f002 fa2b 	bl	8005b2a <HAL_GPIO_WritePin>
    delay_us(64);
 80036d4:	2040      	movs	r0, #64	@ 0x40
 80036d6:	f7ff ffa7 	bl	8003628 <delay_us>
    HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 80036da:	e00f      	b.n	80036fc <write_bit_1+0x50>
    HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_RESET);
 80036dc:	2200      	movs	r2, #0
 80036de:	2101      	movs	r1, #1
 80036e0:	4808      	ldr	r0, [pc, #32]	@ (8003704 <write_bit_1+0x58>)
 80036e2:	f002 fa22 	bl	8005b2a <HAL_GPIO_WritePin>
    delay_us(60);
 80036e6:	203c      	movs	r0, #60	@ 0x3c
 80036e8:	f7ff ff9e 	bl	8003628 <delay_us>
    HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_SET);
 80036ec:	2201      	movs	r2, #1
 80036ee:	2101      	movs	r1, #1
 80036f0:	4804      	ldr	r0, [pc, #16]	@ (8003704 <write_bit_1+0x58>)
 80036f2:	f002 fa1a 	bl	8005b2a <HAL_GPIO_WritePin>
    delay_us(10);
 80036f6:	200a      	movs	r0, #10
 80036f8:	f7ff ff96 	bl	8003628 <delay_us>
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40020800 	.word	0x40020800

08003708 <read_bit_1>:
int read_bit_1(void) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0

  int rc;
  HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_RESET);
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	480e      	ldr	r0, [pc, #56]	@ (800374c <read_bit_1+0x44>)
 8003714:	f002 fa09 	bl	8005b2a <HAL_GPIO_WritePin>
  delay_us(6);
 8003718:	2006      	movs	r0, #6
 800371a:	f7ff ff85 	bl	8003628 <delay_us>
  HAL_GPIO_WritePin(temp_1_GPIO_Port, temp_1_Pin, GPIO_PIN_SET);
 800371e:	2201      	movs	r2, #1
 8003720:	2101      	movs	r1, #1
 8003722:	480a      	ldr	r0, [pc, #40]	@ (800374c <read_bit_1+0x44>)
 8003724:	f002 fa01 	bl	8005b2a <HAL_GPIO_WritePin>
  delay_us(9);
 8003728:	2009      	movs	r0, #9
 800372a:	f7ff ff7d 	bl	8003628 <delay_us>
  rc = HAL_GPIO_ReadPin(temp_1_GPIO_Port, temp_1_Pin);
 800372e:	2101      	movs	r1, #1
 8003730:	4806      	ldr	r0, [pc, #24]	@ (800374c <read_bit_1+0x44>)
 8003732:	f002 f9e3 	bl	8005afc <HAL_GPIO_ReadPin>
 8003736:	4603      	mov	r3, r0
 8003738:	607b      	str	r3, [r7, #4]
  delay_us(55);
 800373a:	2037      	movs	r0, #55	@ 0x37
 800373c:	f7ff ff74 	bl	8003628 <delay_us>
  return rc;
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40020800 	.word	0x40020800

08003750 <wire_write_1>:

void wire_write_1(uint8_t byte) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]

  int i;
  for (i = 0; i < 8; i++) {
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e00b      	b.n	8003778 <wire_write_1+0x28>
    write_bit_1(byte & 0x01);
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ffa0 	bl	80036ac <write_bit_1>
    byte >>= 1;
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3301      	adds	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b07      	cmp	r3, #7
 800377c:	ddf0      	ble.n	8003760 <wire_write_1+0x10>
  }
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <wire_read_1>:

uint8_t wire_read_1(void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0

  uint8_t value = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8003792:	2300      	movs	r3, #0
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	e00e      	b.n	80037b6 <wire_read_1+0x2e>
    value >>= 1;
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	71fb      	strb	r3, [r7, #7]
    if (read_bit_1())
 800379e:	f7ff ffb3 	bl	8003708 <read_bit_1>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <wire_read_1+0x28>
      value |= 0x80;
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037ae:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b07      	cmp	r3, #7
 80037ba:	dded      	ble.n	8003798 <wire_read_1+0x10>
  }
  return value;
 80037bc:	79fb      	ldrb	r3, [r7, #7]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <wire_reset_3>:
  }
  return value;
}

/* TEMP_3 */
HAL_StatusTypeDef wire_reset_3(void) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0

  int rc;
  HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_RESET);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2104      	movs	r1, #4
 80037d2:	4811      	ldr	r0, [pc, #68]	@ (8003818 <wire_reset_3+0x50>)
 80037d4:	f002 f9a9 	bl	8005b2a <HAL_GPIO_WritePin>
  delay_us(480);
 80037d8:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80037dc:	f7ff ff24 	bl	8003628 <delay_us>
  HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_SET);
 80037e0:	2201      	movs	r2, #1
 80037e2:	2104      	movs	r1, #4
 80037e4:	480c      	ldr	r0, [pc, #48]	@ (8003818 <wire_reset_3+0x50>)
 80037e6:	f002 f9a0 	bl	8005b2a <HAL_GPIO_WritePin>
  delay_us(70);
 80037ea:	2046      	movs	r0, #70	@ 0x46
 80037ec:	f7ff ff1c 	bl	8003628 <delay_us>
  rc = HAL_GPIO_ReadPin(temp_3_GPIO_Port, temp_3_Pin);
 80037f0:	2104      	movs	r1, #4
 80037f2:	4809      	ldr	r0, [pc, #36]	@ (8003818 <wire_reset_3+0x50>)
 80037f4:	f002 f982 	bl	8005afc <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80037fc:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8003800:	f7ff ff12 	bl	8003628 <delay_us>
  if (rc == 0)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <wire_reset_3+0x46>
    return HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	e000      	b.n	8003810 <wire_reset_3+0x48>
  else
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40020800 	.word	0x40020800

0800381c <write_bit_3>:

void write_bit_3(int value) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  if (value) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d010      	beq.n	800384c <write_bit_3+0x30>
    HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_RESET);
 800382a:	2200      	movs	r2, #0
 800382c:	2104      	movs	r1, #4
 800382e:	4811      	ldr	r0, [pc, #68]	@ (8003874 <write_bit_3+0x58>)
 8003830:	f002 f97b 	bl	8005b2a <HAL_GPIO_WritePin>
    delay_us(6);
 8003834:	2006      	movs	r0, #6
 8003836:	f7ff fef7 	bl	8003628 <delay_us>
    HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_SET);
 800383a:	2201      	movs	r2, #1
 800383c:	2104      	movs	r1, #4
 800383e:	480d      	ldr	r0, [pc, #52]	@ (8003874 <write_bit_3+0x58>)
 8003840:	f002 f973 	bl	8005b2a <HAL_GPIO_WritePin>
    delay_us(64);
 8003844:	2040      	movs	r0, #64	@ 0x40
 8003846:	f7ff feef 	bl	8003628 <delay_us>
    HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 800384a:	e00f      	b.n	800386c <write_bit_3+0x50>
    HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_RESET);
 800384c:	2200      	movs	r2, #0
 800384e:	2104      	movs	r1, #4
 8003850:	4808      	ldr	r0, [pc, #32]	@ (8003874 <write_bit_3+0x58>)
 8003852:	f002 f96a 	bl	8005b2a <HAL_GPIO_WritePin>
    delay_us(60);
 8003856:	203c      	movs	r0, #60	@ 0x3c
 8003858:	f7ff fee6 	bl	8003628 <delay_us>
    HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_SET);
 800385c:	2201      	movs	r2, #1
 800385e:	2104      	movs	r1, #4
 8003860:	4804      	ldr	r0, [pc, #16]	@ (8003874 <write_bit_3+0x58>)
 8003862:	f002 f962 	bl	8005b2a <HAL_GPIO_WritePin>
    delay_us(10);
 8003866:	200a      	movs	r0, #10
 8003868:	f7ff fede 	bl	8003628 <delay_us>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40020800 	.word	0x40020800

08003878 <read_bit_3>:

int read_bit_3(void) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0

  int rc;
  HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_RESET);
 800387e:	2200      	movs	r2, #0
 8003880:	2104      	movs	r1, #4
 8003882:	480e      	ldr	r0, [pc, #56]	@ (80038bc <read_bit_3+0x44>)
 8003884:	f002 f951 	bl	8005b2a <HAL_GPIO_WritePin>
  delay_us(6);
 8003888:	2006      	movs	r0, #6
 800388a:	f7ff fecd 	bl	8003628 <delay_us>
  HAL_GPIO_WritePin(temp_3_GPIO_Port, temp_3_Pin, GPIO_PIN_SET);
 800388e:	2201      	movs	r2, #1
 8003890:	2104      	movs	r1, #4
 8003892:	480a      	ldr	r0, [pc, #40]	@ (80038bc <read_bit_3+0x44>)
 8003894:	f002 f949 	bl	8005b2a <HAL_GPIO_WritePin>
  delay_us(9);
 8003898:	2009      	movs	r0, #9
 800389a:	f7ff fec5 	bl	8003628 <delay_us>
  rc = HAL_GPIO_ReadPin(temp_3_GPIO_Port, temp_3_Pin);
 800389e:	2104      	movs	r1, #4
 80038a0:	4806      	ldr	r0, [pc, #24]	@ (80038bc <read_bit_3+0x44>)
 80038a2:	f002 f92b 	bl	8005afc <HAL_GPIO_ReadPin>
 80038a6:	4603      	mov	r3, r0
 80038a8:	607b      	str	r3, [r7, #4]
  delay_us(55);
 80038aa:	2037      	movs	r0, #55	@ 0x37
 80038ac:	f7ff febc 	bl	8003628 <delay_us>
  return rc;
 80038b0:	687b      	ldr	r3, [r7, #4]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40020800 	.word	0x40020800

080038c0 <wire_write_3>:

void wire_write_3(uint8_t byte) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]

  int i;
  for (i = 0; i < 8; i++) {
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e00b      	b.n	80038e8 <wire_write_3+0x28>
    write_bit_3(byte & 0x01);
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff ffa0 	bl	800381c <write_bit_3>
    byte >>= 1;
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b07      	cmp	r3, #7
 80038ec:	ddf0      	ble.n	80038d0 <wire_write_3+0x10>
  }
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <wire_read_3>:

uint8_t wire_read_3(void) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0

  uint8_t value = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8003902:	2300      	movs	r3, #0
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	e00e      	b.n	8003926 <wire_read_3+0x2e>
    value >>= 1;
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	71fb      	strb	r3, [r7, #7]
    if (read_bit_3())
 800390e:	f7ff ffb3 	bl	8003878 <read_bit_3>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <wire_read_3+0x28>
      value |= 0x80;
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800391e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b07      	cmp	r3, #7
 800392a:	dded      	ble.n	8003908 <wire_read_3+0x10>
  }
  return value;
 800392c:	79fb      	ldrb	r3, [r7, #7]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <regulatorPI>:
//#define Kd 0.012		// dla okresu 50ms: 0.012

#define VREF 2.5
#define CURRENT_MAX 15.0

void regulatorPI(void) {
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b089      	sub	sp, #36	@ 0x24
 800393c:	af00      	add	r7, sp, #0

	static float integral = 0.0;
	static float prev_error = 0.0;
	float setpoint = 0.0;
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]

	if (getMode() == 'P')
 8003944:	f7ff fd16 	bl	8003374 <getMode>
 8003948:	4603      	mov	r3, r0
 800394a:	2b50      	cmp	r3, #80	@ 0x50
 800394c:	d10c      	bne.n	8003968 <regulatorPI+0x30>
		setpoint = getSetpoint() / getBatteryVoltage();
 800394e:	f7ff f9d3 	bl	8002cf8 <getSetpoint>
 8003952:	4604      	mov	r4, r0
 8003954:	f7ff fbce 	bl	80030f4 <getBatteryVoltage>
 8003958:	4603      	mov	r3, r0
 800395a:	4619      	mov	r1, r3
 800395c:	4620      	mov	r0, r4
 800395e:	f7fd fadd 	bl	8000f1c <__aeabi_fdiv>
 8003962:	4603      	mov	r3, r0
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	e014      	b.n	8003992 <regulatorPI+0x5a>
	else if (getMode() == 'R')
 8003968:	f7ff fd04 	bl	8003374 <getMode>
 800396c:	4603      	mov	r3, r0
 800396e:	2b52      	cmp	r3, #82	@ 0x52
 8003970:	d10c      	bne.n	800398c <regulatorPI+0x54>
		setpoint = getBatteryVoltage() / getSetpoint();
 8003972:	f7ff fbbf 	bl	80030f4 <getBatteryVoltage>
 8003976:	4604      	mov	r4, r0
 8003978:	f7ff f9be 	bl	8002cf8 <getSetpoint>
 800397c:	4603      	mov	r3, r0
 800397e:	4619      	mov	r1, r3
 8003980:	4620      	mov	r0, r4
 8003982:	f7fd facb 	bl	8000f1c <__aeabi_fdiv>
 8003986:	4603      	mov	r3, r0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e002      	b.n	8003992 <regulatorPI+0x5a>
	else
		setpoint = getSetpoint();
 800398c:	f7ff f9b4 	bl	8002cf8 <getSetpoint>
 8003990:	61f8      	str	r0, [r7, #28]

	if (getOnOff() != 0) {
 8003992:	f7ff fd0b 	bl	80033ac <getOnOff>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80d8 	beq.w	8003b4e <regulatorPI+0x216>

		float error = setpoint - getCurrent();
 800399e:	f7ff fa31 	bl	8002e04 <getCurrent>
 80039a2:	4603      	mov	r3, r0
 80039a4:	4619      	mov	r1, r3
 80039a6:	69f8      	ldr	r0, [r7, #28]
 80039a8:	f7fd f8fa 	bl	8000ba0 <__aeabi_fsub>
 80039ac:	4603      	mov	r3, r0
 80039ae:	613b      	str	r3, [r7, #16]
		float derivative = (error - prev_error) / 0.05f;
 80039b0:	4b73      	ldr	r3, [pc, #460]	@ (8003b80 <regulatorPI+0x248>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	6938      	ldr	r0, [r7, #16]
 80039b8:	f7fd f8f2 	bl	8000ba0 <__aeabi_fsub>
 80039bc:	4603      	mov	r3, r0
 80039be:	4971      	ldr	r1, [pc, #452]	@ (8003b84 <regulatorPI+0x24c>)
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fd faab 	bl	8000f1c <__aeabi_fdiv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	60fb      	str	r3, [r7, #12]
		prev_error = error;
 80039ca:	4a6d      	ldr	r2, [pc, #436]	@ (8003b80 <regulatorPI+0x248>)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	6013      	str	r3, [r2, #0]

		float provisional_output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 80039d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b88 <regulatorPI+0x250>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6939      	ldr	r1, [r7, #16]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd f9ec 	bl	8000db4 <__aeabi_fmul>
 80039dc:	4603      	mov	r3, r0
 80039de:	461c      	mov	r4, r3
 80039e0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b8c <regulatorPI+0x254>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003b90 <regulatorPI+0x258>)
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd f9e2 	bl	8000db4 <__aeabi_fmul>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4619      	mov	r1, r3
 80039f4:	4620      	mov	r0, r4
 80039f6:	f7fd f8d5 	bl	8000ba4 <__addsf3>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461c      	mov	r4, r3
 80039fe:	4b65      	ldr	r3, [pc, #404]	@ (8003b94 <regulatorPI+0x25c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd f9d5 	bl	8000db4 <__aeabi_fmul>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7fd f8c8 	bl	8000ba4 <__addsf3>
 8003a14:	4603      	mov	r3, r0
 8003a16:	60bb      	str	r3, [r7, #8]
		provisional_output *= compensate(getCurrent(), getTemp_1());
 8003a18:	f7ff f9f4 	bl	8002e04 <getCurrent>
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	f7ff fd97 	bl	8003550 <getTemp_1>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4619      	mov	r1, r3
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 f8ba 	bl	8003ba0 <compensate>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4619      	mov	r1, r3
 8003a30:	68b8      	ldr	r0, [r7, #8]
 8003a32:	f7fd f9bf 	bl	8000db4 <__aeabi_fmul>
 8003a36:	4603      	mov	r3, r0
 8003a38:	60bb      	str	r3, [r7, #8]
		if (provisional_output > 0.0f && provisional_output < 15.0f) {
 8003a3a:	f04f 0100 	mov.w	r1, #0
 8003a3e:	68b8      	ldr	r0, [r7, #8]
 8003a40:	f7fd fb74 	bl	800112c <__aeabi_fcmpgt>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <regulatorPI+0x140>
 8003a4a:	4953      	ldr	r1, [pc, #332]	@ (8003b98 <regulatorPI+0x260>)
 8003a4c:	68b8      	ldr	r0, [r7, #8]
 8003a4e:	f7fd fb4f 	bl	80010f0 <__aeabi_fcmplt>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00f      	beq.n	8003a78 <regulatorPI+0x140>
			integral += error * 0.05f;
 8003a58:	494a      	ldr	r1, [pc, #296]	@ (8003b84 <regulatorPI+0x24c>)
 8003a5a:	6938      	ldr	r0, [r7, #16]
 8003a5c:	f7fd f9aa 	bl	8000db4 <__aeabi_fmul>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b4a      	ldr	r3, [pc, #296]	@ (8003b90 <regulatorPI+0x258>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	f7fd f89a 	bl	8000ba4 <__addsf3>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	4b46      	ldr	r3, [pc, #280]	@ (8003b90 <regulatorPI+0x258>)
 8003a76:	601a      	str	r2, [r3, #0]
		}

		float output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 8003a78:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <regulatorPI+0x250>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6939      	ldr	r1, [r7, #16]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd f998 	bl	8000db4 <__aeabi_fmul>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461c      	mov	r4, r3
 8003a88:	4b40      	ldr	r3, [pc, #256]	@ (8003b8c <regulatorPI+0x254>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a40      	ldr	r2, [pc, #256]	@ (8003b90 <regulatorPI+0x258>)
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd f98e 	bl	8000db4 <__aeabi_fmul>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7fd f881 	bl	8000ba4 <__addsf3>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461c      	mov	r4, r3
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003b94 <regulatorPI+0x25c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd f981 	bl	8000db4 <__aeabi_fmul>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7fd f874 	bl	8000ba4 <__addsf3>
 8003abc:	4603      	mov	r3, r0
 8003abe:	61bb      	str	r3, [r7, #24]
		output *= compensate(getCurrent(), getTemp_1());
 8003ac0:	f7ff f9a0 	bl	8002e04 <getCurrent>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	f7ff fd43 	bl	8003550 <getTemp_1>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4619      	mov	r1, r3
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 f866 	bl	8003ba0 <compensate>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	69b8      	ldr	r0, [r7, #24]
 8003ada:	f7fd f96b 	bl	8000db4 <__aeabi_fmul>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	61bb      	str	r3, [r7, #24]
		if (output > 15.0f) output = 15.0f;
 8003ae2:	492d      	ldr	r1, [pc, #180]	@ (8003b98 <regulatorPI+0x260>)
 8003ae4:	69b8      	ldr	r0, [r7, #24]
 8003ae6:	f7fd fb21 	bl	800112c <__aeabi_fcmpgt>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <regulatorPI+0x1bc>
 8003af0:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <regulatorPI+0x260>)
 8003af2:	61bb      	str	r3, [r7, #24]
		if (output < 0.0f) output = 0.0f;
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	69b8      	ldr	r0, [r7, #24]
 8003afa:	f7fd faf9 	bl	80010f0 <__aeabi_fcmplt>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <regulatorPI+0x1d2>
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
		uint16_t dac_output = (uint16_t)((output / 15.0) * 37683) + 27852;
 8003b0a:	69b8      	ldr	r0, [r7, #24]
 8003b0c:	f7fc fca4 	bl	8000458 <__aeabi_f2d>
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <regulatorPI+0x264>)
 8003b16:	f7fc fe21 	bl	800075c <__aeabi_ddiv>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	a315      	add	r3, pc, #84	@ (adr r3, 8003b78 <regulatorPI+0x240>)
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f7fc fcee 	bl	8000508 <__aeabi_dmul>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	f7fc ffc0 	bl	8000ab8 <__aeabi_d2uiz>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f503 43d9 	add.w	r3, r3, #27776	@ 0x6c80
 8003b40:	334c      	adds	r3, #76	@ 0x4c
 8003b42:	80fb      	strh	r3, [r7, #6]
		setDacOutput(dac_output);
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fb7e 	bl	8003248 <setDacOutput>
		integral = 0.0;
		prev_error = 0.0;
		uint16_t dac_output = 0;
		setDacOutput(dac_output);
	}
}
 8003b4c:	e00d      	b.n	8003b6a <regulatorPI+0x232>
		integral = 0.0;
 8003b4e:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <regulatorPI+0x258>)
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
		prev_error = 0.0;
 8003b56:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <regulatorPI+0x248>)
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
		uint16_t dac_output = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	82fb      	strh	r3, [r7, #22]
		setDacOutput(dac_output);
 8003b62:	8afb      	ldrh	r3, [r7, #22]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fb6f 	bl	8003248 <setDacOutput>
}
 8003b6a:	bf00      	nop
 8003b6c:	3724      	adds	r7, #36	@ 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	f3af 8000 	nop.w
 8003b78:	00000000 	.word	0x00000000
 8003b7c:	40e26660 	.word	0x40e26660
 8003b80:	200004f4 	.word	0x200004f4
 8003b84:	3d4ccccd 	.word	0x3d4ccccd
 8003b88:	200004d9 	.word	0x200004d9
 8003b8c:	200004dd 	.word	0x200004dd
 8003b90:	200004f8 	.word	0x200004f8
 8003b94:	200004e1 	.word	0x200004e1
 8003b98:	41700000 	.word	0x41700000
 8003b9c:	402e0000 	.word	0x402e0000

08003ba0 <compensate>:

float compensate(float current, float temperature) {
 8003ba0:	b5b0      	push	{r4, r5, r7, lr}
 8003ba2:	b0ba      	sub	sp, #232	@ 0xe8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]

    const float Vgs_table[3][16] = {
 8003baa:	4a9f      	ldr	r2, [pc, #636]	@ (8003e28 <compensate+0x288>)
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	22c0      	movs	r2, #192	@ 0xc0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f009 fac2 	bl	800d13e <memcpy>
         2.690, 2.738, 2.786, 2.831, 2.875, 2.918, 2.960, 3.002},
        {1.900, 2.176, 2.286, 2.372, 2.448, 2.517, 2.580, 2.639,
         2.696, 2.749, 2.802, 2.852, 2.900, 2.948, 2.994, 3.039}
    };

    if (current < 0.0f) 		current = 0.0f;
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fa96 	bl	80010f0 <__aeabi_fcmplt>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <compensate+0x30>
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	607b      	str	r3, [r7, #4]
    if (current >= 15.0f) 		current = 14.999f;
 8003bd0:	4996      	ldr	r1, [pc, #600]	@ (8003e2c <compensate+0x28c>)
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd faa0 	bl	8001118 <__aeabi_fcmpge>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <compensate+0x42>
 8003bde:	4b94      	ldr	r3, [pc, #592]	@ (8003e30 <compensate+0x290>)
 8003be0:	607b      	str	r3, [r7, #4]
    if (temperature < 25.0f) 	temperature = 25.0f;
 8003be2:	4994      	ldr	r1, [pc, #592]	@ (8003e34 <compensate+0x294>)
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	f7fd fa83 	bl	80010f0 <__aeabi_fcmplt>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <compensate+0x54>
 8003bf0:	4b90      	ldr	r3, [pc, #576]	@ (8003e34 <compensate+0x294>)
 8003bf2:	603b      	str	r3, [r7, #0]
    if (temperature > 175.0f) 	temperature = 175.0f;
 8003bf4:	4990      	ldr	r1, [pc, #576]	@ (8003e38 <compensate+0x298>)
 8003bf6:	6838      	ldr	r0, [r7, #0]
 8003bf8:	f7fd fa98 	bl	800112c <__aeabi_fcmpgt>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <compensate+0x66>
 8003c02:	4b8d      	ldr	r3, [pc, #564]	@ (8003e38 <compensate+0x298>)
 8003c04:	603b      	str	r3, [r7, #0]

    int i = (int)current;
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd fa9a 	bl	8001140 <__aeabi_f2iz>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    int temp_l_idx = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    int temp_h_idx = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    float corr_temp = 0.0f;
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (temperature < 100) {
 8003c26:	4985      	ldr	r1, [pc, #532]	@ (8003e3c <compensate+0x29c>)
 8003c28:	6838      	ldr	r0, [r7, #0]
 8003c2a:	f7fd fa61 	bl	80010f0 <__aeabi_fcmplt>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d012      	beq.n	8003c5a <compensate+0xba>
        temp_l_idx = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        temp_h_idx = 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        corr_temp = (temperature - 25) / 75.0f;
 8003c40:	497c      	ldr	r1, [pc, #496]	@ (8003e34 <compensate+0x294>)
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	f7fc ffac 	bl	8000ba0 <__aeabi_fsub>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	497d      	ldr	r1, [pc, #500]	@ (8003e40 <compensate+0x2a0>)
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fd f965 	bl	8000f1c <__aeabi_fdiv>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c58:	e011      	b.n	8003c7e <compensate+0xde>
    }
    else {
        temp_l_idx = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        temp_h_idx = 2;
 8003c60:	2302      	movs	r3, #2
 8003c62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        corr_temp = (temperature - 100) / 75.0f;
 8003c66:	4975      	ldr	r1, [pc, #468]	@ (8003e3c <compensate+0x29c>)
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f7fc ff99 	bl	8000ba0 <__aeabi_fsub>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4973      	ldr	r1, [pc, #460]	@ (8003e40 <compensate+0x2a0>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd f952 	bl	8000f1c <__aeabi_fdiv>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    }

    float corr_25 = Vgs_table[0][i] + (current - (float)i) * (Vgs_table[0][i+1] - Vgs_table[0][i]);
 8003c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	33e8      	adds	r3, #232	@ 0xe8
 8003c86:	443b      	add	r3, r7
 8003c88:	f853 4cdc 	ldr.w	r4, [r3, #-220]
 8003c8c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003c90:	f7fd f83c 	bl	8000d0c <__aeabi_i2f>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4619      	mov	r1, r3
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fc ff81 	bl	8000ba0 <__aeabi_fsub>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	33e8      	adds	r3, #232	@ 0xe8
 8003cac:	443b      	add	r3, r7
 8003cae:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8003cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	33e8      	adds	r3, #232	@ 0xe8
 8003cba:	443b      	add	r3, r7
 8003cbc:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7fc ff6c 	bl	8000ba0 <__aeabi_fsub>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f7fd f871 	bl	8000db4 <__aeabi_fmul>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f7fc ff64 	bl	8000ba4 <__addsf3>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (corr_25 < 0.001f)	return 1.0f;
 8003ce2:	4958      	ldr	r1, [pc, #352]	@ (8003e44 <compensate+0x2a4>)
 8003ce4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8003ce8:	f7fd fa02 	bl	80010f0 <__aeabi_fcmplt>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <compensate+0x158>
 8003cf2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003cf6:	e092      	b.n	8003e1e <compensate+0x27e>

    float corr_t_low = Vgs_table[temp_l_idx][i] + (current - (float)i) * (Vgs_table[temp_l_idx][i+1] - Vgs_table[temp_l_idx][i]);
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfc:	011a      	lsls	r2, r3, #4
 8003cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	33e8      	adds	r3, #232	@ 0xe8
 8003d08:	443b      	add	r3, r7
 8003d0a:	f853 4cdc 	ldr.w	r4, [r3, #-220]
 8003d0e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003d12:	f7fc fffb 	bl	8000d0c <__aeabi_i2f>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fc ff40 	bl	8000ba0 <__aeabi_fsub>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461d      	mov	r5, r3
 8003d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003d2e:	0112      	lsls	r2, r2, #4
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	33e8      	adds	r3, #232	@ 0xe8
 8003d36:	443b      	add	r3, r7
 8003d38:	f853 0cdc 	ldr.w	r0, [r3, #-220]
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d40:	011a      	lsls	r2, r3, #4
 8003d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	33e8      	adds	r3, #232	@ 0xe8
 8003d4c:	443b      	add	r3, r7
 8003d4e:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8003d52:	4619      	mov	r1, r3
 8003d54:	f7fc ff24 	bl	8000ba0 <__aeabi_fsub>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f7fd f829 	bl	8000db4 <__aeabi_fmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	4619      	mov	r1, r3
 8003d66:	4620      	mov	r0, r4
 8003d68:	f7fc ff1c 	bl	8000ba4 <__addsf3>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    float corr_t_high = Vgs_table[temp_h_idx][i] + (current - (float)i) * (Vgs_table[temp_h_idx][i+1] - Vgs_table[temp_h_idx][i]);
 8003d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d76:	011a      	lsls	r2, r3, #4
 8003d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	33e8      	adds	r3, #232	@ 0xe8
 8003d82:	443b      	add	r3, r7
 8003d84:	f853 4cdc 	ldr.w	r4, [r3, #-220]
 8003d88:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003d8c:	f7fc ffbe 	bl	8000d0c <__aeabi_i2f>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fc ff03 	bl	8000ba0 <__aeabi_fsub>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003da2:	3301      	adds	r3, #1
 8003da4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	33e8      	adds	r3, #232	@ 0xe8
 8003db0:	443b      	add	r3, r7
 8003db2:	f853 0cdc 	ldr.w	r0, [r3, #-220]
 8003db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dba:	011a      	lsls	r2, r3, #4
 8003dbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	33e8      	adds	r3, #232	@ 0xe8
 8003dc6:	443b      	add	r3, r7
 8003dc8:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fc fee7 	bl	8000ba0 <__aeabi_fsub>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f7fc ffec 	bl	8000db4 <__aeabi_fmul>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4619      	mov	r1, r3
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7fc fedf 	bl	8000ba4 <__addsf3>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

    return (float)((corr_t_low + corr_temp * (corr_t_high - corr_t_low)) / corr_25);
 8003dec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003df0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8003df4:	f7fc fed4 	bl	8000ba0 <__aeabi_fsub>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc ffd8 	bl	8000db4 <__aeabi_fmul>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc feca 	bl	8000ba4 <__addsf3>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd f880 	bl	8000f1c <__aeabi_fdiv>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	37e8      	adds	r7, #232	@ 0xe8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bdb0      	pop	{r4, r5, r7, pc}
 8003e26:	bf00      	nop
 8003e28:	0800f294 	.word	0x0800f294
 8003e2c:	41700000 	.word	0x41700000
 8003e30:	416ffbe7 	.word	0x416ffbe7
 8003e34:	41c80000 	.word	0x41c80000
 8003e38:	432f0000 	.word	0x432f0000
 8003e3c:	42c80000 	.word	0x42c80000
 8003e40:	42960000 	.word	0x42960000
 8003e44:	3a83126f 	.word	0x3a83126f

08003e48 <MCP3561T_1_Init>:
//	}
//
//}


void MCP3561T_1_Init(GPIO_TypeDef  *Port, uint16_t Pin) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]

	  uint8_t config0_cmnd[2] = {0b01000110, 0b01100011};
 8003e54:	f246 3346 	movw	r3, #25414	@ 0x6346
 8003e58:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  uint8_t config1_cmnd[2] = {0b01001010, 0b00111100};
 8003e5a:	f643 434a 	movw	r3, #15434	@ 0x3c4a
 8003e5e:	843b      	strh	r3, [r7, #32]
	  uint8_t config2_cmnd[2] = {0b01001110, 0b10001011}; // 110
 8003e60:	f648 334e 	movw	r3, #35662	@ 0x8b4e
 8003e64:	83bb      	strh	r3, [r7, #28]
	  uint8_t config3_cmnd[2] = {0b01010010, 0b11000000};
 8003e66:	f24c 0352 	movw	r3, #49234	@ 0xc052
 8003e6a:	833b      	strh	r3, [r7, #24]
	  uint8_t MUX_cmnd[2] 	  = {0b01011010, 0b00001000}; // 0b00001000
 8003e6c:	f640 035a 	movw	r3, #2138	@ 0x85a
 8003e70:	82bb      	strh	r3, [r7, #20]
	  uint8_t IRQ_cmnd[2] 	  = {0b01010110, 0b00000110};
 8003e72:	f240 6356 	movw	r3, #1622	@ 0x656
 8003e76:	823b      	strh	r3, [r7, #16]
	  uint8_t FAST_cmnd 	  =  0b01101000;
 8003e78:	2368      	movs	r3, #104	@ 0x68
 8003e7a:	73fb      	strb	r3, [r7, #15]

	  HAL_Delay(100);
 8003e7c:	2064      	movs	r0, #100	@ 0x64
 8003e7e:	f001 f8d9 	bl	8005034 <HAL_Delay>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	2200      	movs	r2, #0
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f001 fe4e 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &config0_cmnd[0], 2, HAL_MAX_DELAY);
 8003e8e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	2202      	movs	r2, #2
 8003e98:	4851      	ldr	r0, [pc, #324]	@ (8003fe0 <MCP3561T_1_Init+0x198>)
 8003e9a:	f003 f9a4 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 fe40 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	2200      	movs	r2, #0
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 fe3a 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &config1_cmnd[0], 2, HAL_MAX_DELAY);
 8003eb6:	f107 0120 	add.w	r1, r7, #32
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	4847      	ldr	r0, [pc, #284]	@ (8003fe0 <MCP3561T_1_Init+0x198>)
 8003ec2:	f003 f990 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8003ec6:	887b      	ldrh	r3, [r7, #2]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 fe2c 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f001 fe26 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &config2_cmnd[0], 2, HAL_MAX_DELAY);
 8003ede:	f107 011c 	add.w	r1, r7, #28
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	483d      	ldr	r0, [pc, #244]	@ (8003fe0 <MCP3561T_1_Init+0x198>)
 8003eea:	f003 f97c 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8003eee:	887b      	ldrh	r3, [r7, #2]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f001 fe18 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003efa:	887b      	ldrh	r3, [r7, #2]
 8003efc:	2200      	movs	r2, #0
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f001 fe12 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &config3_cmnd[0], 2, HAL_MAX_DELAY);
 8003f06:	f107 0118 	add.w	r1, r7, #24
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4833      	ldr	r0, [pc, #204]	@ (8003fe0 <MCP3561T_1_Init+0x198>)
 8003f12:	f003 f968 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 fe04 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003f22:	887b      	ldrh	r3, [r7, #2]
 8003f24:	2200      	movs	r2, #0
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f001 fdfe 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &IRQ_cmnd[0], 2, HAL_MAX_DELAY);
 8003f2e:	f107 0110 	add.w	r1, r7, #16
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	2202      	movs	r2, #2
 8003f38:	4829      	ldr	r0, [pc, #164]	@ (8003fe0 <MCP3561T_1_Init+0x198>)
 8003f3a:	f003 f954 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	2201      	movs	r2, #1
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 fdf0 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003f4a:	887b      	ldrh	r3, [r7, #2]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f001 fdea 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &MUX_cmnd[0], 2, HAL_MAX_DELAY);
 8003f56:	f107 0114 	add.w	r1, r7, #20
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	2202      	movs	r2, #2
 8003f60:	481f      	ldr	r0, [pc, #124]	@ (8003fe0 <MCP3561T_1_Init+0x198>)
 8003f62:	f003 f940 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8003f66:	887b      	ldrh	r3, [r7, #2]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f001 fddc 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	2200      	movs	r2, #0
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f001 fdd6 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &FAST_cmnd, 1, HAL_MAX_DELAY);
 8003f7e:	f107 010f 	add.w	r1, r7, #15
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295
 8003f86:	2201      	movs	r2, #1
 8003f88:	4815      	ldr	r0, [pc, #84]	@ (8003fe0 <MCP3561T_1_Init+0x198>)
 8003f8a:	f003 f92c 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin,  GPIO_PIN_SET);
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f001 fdc8 	bl	8005b2a <HAL_GPIO_WritePin>

	  uint8_t byte = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73bb      	strb	r3, [r7, #14]
	  uint8_t tx_byte = {0b01000101};
 8003f9e:	2345      	movs	r3, #69	@ 0x45
 8003fa0:	737b      	strb	r3, [r7, #13]
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f001 fdbe 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi2, &tx_byte, &byte, 1, HAL_MAX_DELAY);
 8003fae:	f107 020e 	add.w	r2, r7, #14
 8003fb2:	f107 010d 	add.w	r1, r7, #13
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4808      	ldr	r0, [pc, #32]	@ (8003fe0 <MCP3561T_1_Init+0x198>)
 8003fc0:	f003 fb6e 	bl	80076a0 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(Port, Pin,  GPIO_PIN_SET);
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f001 fdad 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_Delay(100);
 8003fd0:	2064      	movs	r0, #100	@ 0x64
 8003fd2:	f001 f82f 	bl	8005034 <HAL_Delay>
}
 8003fd6:	bf00      	nop
 8003fd8:	3728      	adds	r7, #40	@ 0x28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	200049bc 	.word	0x200049bc

08003fe4 <MCP3561T_2_Init>:

void MCP3561T_2_Init(GPIO_TypeDef  *Port, uint16_t Pin) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	@ 0x30
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]

	  uint8_t config0_cmnd[2] = {0b01000110, 0b01100011};
 8003ff0:	f246 3346 	movw	r3, #25414	@ 0x6346
 8003ff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  uint8_t config1_cmnd[2] = {0b01001010, 0b00111100};
 8003ff6:	f643 434a 	movw	r3, #15434	@ 0x3c4a
 8003ffa:	843b      	strh	r3, [r7, #32]
	  uint8_t config2_cmnd[2] = {0b01001110, 0b10001011}; // 110
 8003ffc:	f648 334e 	movw	r3, #35662	@ 0x8b4e
 8004000:	83bb      	strh	r3, [r7, #28]
	  uint8_t config3_cmnd[2] = {0b01010010, 0b11000010};
 8004002:	f24c 2352 	movw	r3, #49746	@ 0xc252
 8004006:	833b      	strh	r3, [r7, #24]
	  uint8_t MUX_cmnd[2] 	  = {0b01011010, 0b00000001}; // 0b00001000
 8004008:	f44f 73ad 	mov.w	r3, #346	@ 0x15a
 800400c:	82bb      	strh	r3, [r7, #20]
	  uint8_t IRQ_cmnd[2] 	  = {0b01010110, 0b00000110};
 800400e:	f240 6356 	movw	r3, #1622	@ 0x656
 8004012:	823b      	strh	r3, [r7, #16]
	  uint8_t FAST_cmnd = 0b01101000;
 8004014:	2368      	movs	r3, #104	@ 0x68
 8004016:	73fb      	strb	r3, [r7, #15]

	  HAL_Delay(100);
 8004018:	2064      	movs	r0, #100	@ 0x64
 800401a:	f001 f80b 	bl	8005034 <HAL_Delay>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 800401e:	887b      	ldrh	r3, [r7, #2]
 8004020:	2200      	movs	r2, #0
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f001 fd80 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &config0_cmnd[0], 2, HAL_MAX_DELAY);
 800402a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800402e:	f04f 33ff 	mov.w	r3, #4294967295
 8004032:	2202      	movs	r2, #2
 8004034:	4863      	ldr	r0, [pc, #396]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 8004036:	f003 f8d6 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	2201      	movs	r2, #1
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f001 fd72 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	2200      	movs	r2, #0
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f001 fd6c 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &config1_cmnd[0], 2, HAL_MAX_DELAY);
 8004052:	f107 0120 	add.w	r1, r7, #32
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	2202      	movs	r2, #2
 800405c:	4859      	ldr	r0, [pc, #356]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 800405e:	f003 f8c2 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8004062:	887b      	ldrh	r3, [r7, #2]
 8004064:	2201      	movs	r2, #1
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 fd5e 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 800406e:	887b      	ldrh	r3, [r7, #2]
 8004070:	2200      	movs	r2, #0
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f001 fd58 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &config2_cmnd[0], 2, HAL_MAX_DELAY);
 800407a:	f107 011c 	add.w	r1, r7, #28
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
 8004082:	2202      	movs	r2, #2
 8004084:	484f      	ldr	r0, [pc, #316]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 8004086:	f003 f8ae 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 800408a:	887b      	ldrh	r3, [r7, #2]
 800408c:	2201      	movs	r2, #1
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f001 fd4a 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	2200      	movs	r2, #0
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f001 fd44 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &config3_cmnd[0], 2, HAL_MAX_DELAY);
 80040a2:	f107 0118 	add.w	r1, r7, #24
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	2202      	movs	r2, #2
 80040ac:	4845      	ldr	r0, [pc, #276]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 80040ae:	f003 f89a 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	2201      	movs	r2, #1
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f001 fd36 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 80040be:	887b      	ldrh	r3, [r7, #2]
 80040c0:	2200      	movs	r2, #0
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f001 fd30 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &IRQ_cmnd[0], 2, HAL_MAX_DELAY);
 80040ca:	f107 0110 	add.w	r1, r7, #16
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	2202      	movs	r2, #2
 80040d4:	483b      	ldr	r0, [pc, #236]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 80040d6:	f003 f886 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 80040da:	887b      	ldrh	r3, [r7, #2]
 80040dc:	2201      	movs	r2, #1
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f001 fd22 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	2200      	movs	r2, #0
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f001 fd1c 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &MUX_cmnd[0], 2, HAL_MAX_DELAY);
 80040f2:	f107 0114 	add.w	r1, r7, #20
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	2202      	movs	r2, #2
 80040fc:	4831      	ldr	r0, [pc, #196]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 80040fe:	f003 f872 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	2201      	movs	r2, #1
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f001 fd0e 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 800410e:	887b      	ldrh	r3, [r7, #2]
 8004110:	2200      	movs	r2, #0
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f001 fd08 	bl	8005b2a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &FAST_cmnd, 1, HAL_MAX_DELAY);
 800411a:	f107 010f 	add.w	r1, r7, #15
 800411e:	f04f 33ff 	mov.w	r3, #4294967295
 8004122:	2201      	movs	r2, #1
 8004124:	4827      	ldr	r0, [pc, #156]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 8004126:	f003 f85e 	bl	80071e6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(Port, Pin,  GPIO_PIN_SET);
 800412a:	887b      	ldrh	r3, [r7, #2]
 800412c:	2201      	movs	r2, #1
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f001 fcfa 	bl	8005b2a <HAL_GPIO_WritePin>

	  HAL_Delay(50);
 8004136:	2032      	movs	r0, #50	@ 0x32
 8004138:	f000 ff7c 	bl	8005034 <HAL_Delay>

	  int32_t raw_data = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  for(int i=0; i<5; i++) {
 8004140:	2300      	movs	r3, #0
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004144:	e02d      	b.n	80041a2 <MCP3561T_2_Init+0x1be>

		  uint8_t tx = 0b01000001;
 8004146:	2341      	movs	r3, #65	@ 0x41
 8004148:	73bb      	strb	r3, [r7, #14]
		  uint8_t adc_read[3];
		  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	2200      	movs	r2, #0
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f001 fcea 	bl	8005b2a <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &tx, 1, -1);
 8004156:	f107 010e 	add.w	r1, r7, #14
 800415a:	f04f 33ff 	mov.w	r3, #4294967295
 800415e:	2201      	movs	r2, #1
 8004160:	4818      	ldr	r0, [pc, #96]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 8004162:	f003 f840 	bl	80071e6 <HAL_SPI_Transmit>
		  HAL_SPI_Receive(&hspi2, adc_read, 3, -1);
 8004166:	f107 0108 	add.w	r1, r7, #8
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	2203      	movs	r2, #3
 8004170:	4814      	ldr	r0, [pc, #80]	@ (80041c4 <MCP3561T_2_Init+0x1e0>)
 8004172:	f003 f97c 	bl	800746e <HAL_SPI_Receive>
		  HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	2201      	movs	r2, #1
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f001 fcd4 	bl	8005b2a <HAL_GPIO_WritePin>
		  raw_data += ((int32_t)adc_read[0] << 16) | ((int32_t)adc_read[1] << 8) | (int32_t)adc_read[2];
 8004182:	7a3b      	ldrb	r3, [r7, #8]
 8004184:	041a      	lsls	r2, r3, #16
 8004186:	7a7b      	ldrb	r3, [r7, #9]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	4313      	orrs	r3, r2
 800418c:	7aba      	ldrb	r2, [r7, #10]
 800418e:	4313      	orrs	r3, r2
 8004190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004192:	4413      	add	r3, r2
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  HAL_Delay(50);
 8004196:	2032      	movs	r0, #50	@ 0x32
 8004198:	f000 ff4c 	bl	8005034 <HAL_Delay>
	  for(int i=0; i<5; i++) {
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	3301      	adds	r3, #1
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	ddce      	ble.n	8004146 <MCP3561T_2_Init+0x162>
	  }
	  current_offset = raw_data / 5;
 80041a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041aa:	4a07      	ldr	r2, [pc, #28]	@ (80041c8 <MCP3561T_2_Init+0x1e4>)
 80041ac:	fb82 1203 	smull	r1, r2, r2, r3
 80041b0:	1052      	asrs	r2, r2, #1
 80041b2:	17db      	asrs	r3, r3, #31
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	4a05      	ldr	r2, [pc, #20]	@ (80041cc <MCP3561T_2_Init+0x1e8>)
 80041b8:	6013      	str	r3, [r2, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3730      	adds	r7, #48	@ 0x30
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200049bc 	.word	0x200049bc
 80041c8:	66666667 	.word	0x66666667
 80041cc:	200004a0 	.word	0x200004a0

080041d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	60da      	str	r2, [r3, #12]
 80041e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80041e4:	2300      	movs	r3, #0
 80041e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80041e8:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <MX_RTC_Init+0xc0>)
 80041ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004294 <MX_RTC_Init+0xc4>)
 80041ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041ee:	4b28      	ldr	r3, [pc, #160]	@ (8004290 <MX_RTC_Init+0xc0>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80041f4:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <MX_RTC_Init+0xc0>)
 80041f6:	227f      	movs	r2, #127	@ 0x7f
 80041f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80041fa:	4b25      	ldr	r3, [pc, #148]	@ (8004290 <MX_RTC_Init+0xc0>)
 80041fc:	22ff      	movs	r2, #255	@ 0xff
 80041fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004200:	4b23      	ldr	r3, [pc, #140]	@ (8004290 <MX_RTC_Init+0xc0>)
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004206:	4b22      	ldr	r3, [pc, #136]	@ (8004290 <MX_RTC_Init+0xc0>)
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800420c:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <MX_RTC_Init+0xc0>)
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004212:	481f      	ldr	r0, [pc, #124]	@ (8004290 <MX_RTC_Init+0xc0>)
 8004214:	f002 fbba 	bl	800698c <HAL_RTC_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800421e:	f7fe fd65 	bl	8002cec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 8;
 8004222:	2308      	movs	r3, #8
 8004224:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 16;
 8004226:	2310      	movs	r3, #16
 8004228:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 800422a:	231e      	movs	r3, #30
 800422c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	2200      	movs	r2, #0
 800423a:	4619      	mov	r1, r3
 800423c:	4814      	ldr	r0, [pc, #80]	@ (8004290 <MX_RTC_Init+0xc0>)
 800423e:	f002 fc26 	bl	8006a8e <HAL_RTC_SetTime>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004248:	f7fe fd50 	bl	8002cec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800424c:	2306      	movs	r3, #6
 800424e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8004250:	2304      	movs	r3, #4
 8004252:	707b      	strb	r3, [r7, #1]
  sDate.Date = 26;
 8004254:	231a      	movs	r3, #26
 8004256:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 25;
 8004258:	2319      	movs	r3, #25
 800425a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800425c:	463b      	mov	r3, r7
 800425e:	2200      	movs	r2, #0
 8004260:	4619      	mov	r1, r3
 8004262:	480b      	ldr	r0, [pc, #44]	@ (8004290 <MX_RTC_Init+0xc0>)
 8004264:	f002 fd0b 	bl	8006c7e <HAL_RTC_SetDate>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800426e:	f7fe fd3d 	bl	8002cec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8004272:	2204      	movs	r2, #4
 8004274:	2100      	movs	r1, #0
 8004276:	4806      	ldr	r0, [pc, #24]	@ (8004290 <MX_RTC_Init+0xc0>)
 8004278:	f002 fe8f 	bl	8006f9a <HAL_RTCEx_SetWakeUpTimer>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8004282:	f7fe fd33 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004286:	bf00      	nop
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200004fc 	.word	0x200004fc
 8004294:	40002800 	.word	0x40002800

08004298 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <HAL_RTC_MspInit+0x24>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d102      	bne.n	80042b0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80042aa:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <HAL_RTC_MspInit+0x28>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40002800 	.word	0x40002800
 80042c0:	424706d8 	.word	0x424706d8

080042c4 <sd_attach>:

#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

// Podłączenie SD (inicjalizacja)
void sd_attach(void) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042ce:	4802      	ldr	r0, [pc, #8]	@ (80042d8 <sd_attach+0x14>)
 80042d0:	f001 fc2b 	bl	8005b2a <HAL_GPIO_WritePin>
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40020000 	.word	0x40020000

080042dc <sd_dettach>:

// Odłączenie SD
void sd_dettach(void) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 80042e0:	2201      	movs	r2, #1
 80042e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042e6:	4802      	ldr	r0, [pc, #8]	@ (80042f0 <sd_dettach+0x14>)
 80042e8:	f001 fc1f 	bl	8005b2a <HAL_GPIO_WritePin>
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40020000 	.word	0x40020000

080042f4 <getDateTime>:

void getDateTime(char *date_time_str) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	@ 0x30
 80042f8:	af04      	add	r7, sp, #16
 80042fa:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80042fc:	f107 031c 	add.w	r3, r7, #28
 8004300:	2200      	movs	r2, #0
 8004302:	4619      	mov	r1, r3
 8004304:	480d      	ldr	r0, [pc, #52]	@ (800433c <getDateTime+0x48>)
 8004306:	f002 fd3e 	bl	8006d86 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	2200      	movs	r2, #0
 8004310:	4619      	mov	r1, r3
 8004312:	480a      	ldr	r0, [pc, #40]	@ (800433c <getDateTime+0x48>)
 8004314:	f002 fc55 	bl	8006bc2 <HAL_RTC_GetTime>
    snprintf(date_time_str, DATE_TIME_LENGTH, "%02d%02d%02d%02d", sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes);
 8004318:	7f7b      	ldrb	r3, [r7, #29]
 800431a:	4618      	mov	r0, r3
 800431c:	7fbb      	ldrb	r3, [r7, #30]
 800431e:	7a3a      	ldrb	r2, [r7, #8]
 8004320:	7a79      	ldrb	r1, [r7, #9]
 8004322:	9102      	str	r1, [sp, #8]
 8004324:	9201      	str	r2, [sp, #4]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	4603      	mov	r3, r0
 800432a:	4a05      	ldr	r2, [pc, #20]	@ (8004340 <getDateTime+0x4c>)
 800432c:	2110      	movs	r1, #16
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f008 fda0 	bl	800ce74 <sniprintf>
}
 8004334:	bf00      	nop
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	200004fc 	.word	0x200004fc
 8004340:	0800f354 	.word	0x0800f354

08004344 <createFolderWithCSV>:

void createFolderWithCSV(char *path) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b0ae      	sub	sp, #184	@ 0xb8
 8004348:	af02      	add	r7, sp, #8
 800434a:	6078      	str	r0, [r7, #4]

	char file_name[22];
	char file_path[48];

	sd_attach();
 800434c:	f7ff ffba 	bl	80042c4 <sd_attach>
	HAL_Delay(20);
 8004350:	2014      	movs	r0, #20
 8004352:	f000 fe6f 	bl	8005034 <HAL_Delay>

	res = f_mount(&fs, "", 1);
 8004356:	2201      	movs	r2, #1
 8004358:	4957      	ldr	r1, [pc, #348]	@ (80044b8 <createFolderWithCSV+0x174>)
 800435a:	4858      	ldr	r0, [pc, #352]	@ (80044bc <createFolderWithCSV+0x178>)
 800435c:	f007 faf0 	bl	800b940 <f_mount>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	4b56      	ldr	r3, [pc, #344]	@ (80044c0 <createFolderWithCSV+0x17c>)
 8004366:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK) {
 8004368:	4b55      	ldr	r3, [pc, #340]	@ (80044c0 <createFolderWithCSV+0x17c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <createFolderWithCSV+0x46>
		myprintf("f_mount error (%i)\r\n", res);
 8004370:	4b53      	ldr	r3, [pc, #332]	@ (80044c0 <createFolderWithCSV+0x17c>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	4619      	mov	r1, r3
 8004376:	4853      	ldr	r0, [pc, #332]	@ (80044c4 <createFolderWithCSV+0x180>)
 8004378:	f7fd fff2 	bl	8002360 <myprintf>
		prev_logging = 0;
 800437c:	4b52      	ldr	r3, [pc, #328]	@ (80044c8 <createFolderWithCSV+0x184>)
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
		setLogging(0);
 8004382:	2000      	movs	r0, #0
 8004384:	f7ff f840 	bl	8003408 <setLogging>
		return;
 8004388:	e093      	b.n	80044b2 <createFolderWithCSV+0x16e>
	} else {
		myprintf("SD card mount successfully\r\n");
 800438a:	4850      	ldr	r0, [pc, #320]	@ (80044cc <createFolderWithCSV+0x188>)
 800438c:	f7fd ffe8 	bl	8002360 <myprintf>
	}

	getDateTime(&file_name[0]);
 8004390:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ffad 	bl	80042f4 <getDateTime>

	res = f_mkdir(file_name);
 800439a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800439e:	4618      	mov	r0, r3
 80043a0:	f007 feeb 	bl	800c17a <f_mkdir>
 80043a4:	4603      	mov	r3, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b45      	ldr	r3, [pc, #276]	@ (80044c0 <createFolderWithCSV+0x17c>)
 80043aa:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 80043ac:	4b44      	ldr	r3, [pc, #272]	@ (80044c0 <createFolderWithCSV+0x17c>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <createFolderWithCSV+0x7e>
		myprintf("Folder '%s' was created\r\n", file_name);
 80043b4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80043b8:	4619      	mov	r1, r3
 80043ba:	4845      	ldr	r0, [pc, #276]	@ (80044d0 <createFolderWithCSV+0x18c>)
 80043bc:	f7fd ffd0 	bl	8002360 <myprintf>
 80043c0:	e01b      	b.n	80043fa <createFolderWithCSV+0xb6>
	} else if (res == FR_EXIST) {
 80043c2:	4b3f      	ldr	r3, [pc, #252]	@ (80044c0 <createFolderWithCSV+0x17c>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d106      	bne.n	80043d8 <createFolderWithCSV+0x94>
		myprintf("Folder '%s' already exists\r\n", file_name);
 80043ca:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80043ce:	4619      	mov	r1, r3
 80043d0:	4840      	ldr	r0, [pc, #256]	@ (80044d4 <createFolderWithCSV+0x190>)
 80043d2:	f7fd ffc5 	bl	8002360 <myprintf>
 80043d6:	e010      	b.n	80043fa <createFolderWithCSV+0xb6>
	} else {
		myprintf("Error with creating folder %s, (%i)\r\n", file_name, res);
 80043d8:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <createFolderWithCSV+0x17c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80043e2:	4619      	mov	r1, r3
 80043e4:	483c      	ldr	r0, [pc, #240]	@ (80044d8 <createFolderWithCSV+0x194>)
 80043e6:	f7fd ffbb 	bl	8002360 <myprintf>
		f_mount(NULL, "", 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	4932      	ldr	r1, [pc, #200]	@ (80044b8 <createFolderWithCSV+0x174>)
 80043ee:	2000      	movs	r0, #0
 80043f0:	f007 faa6 	bl	800b940 <f_mount>
		sd_dettach();
 80043f4:	f7ff ff72 	bl	80042dc <sd_dettach>
		return;
 80043f8:	e05b      	b.n	80044b2 <createFolderWithCSV+0x16e>
	}

	snprintf(file_path, sizeof(file_path), "%s/%s.csv", file_name, file_name);
 80043fa:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80043fe:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8004402:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	4a34      	ldr	r2, [pc, #208]	@ (80044dc <createFolderWithCSV+0x198>)
 800440c:	2130      	movs	r1, #48	@ 0x30
 800440e:	f008 fd31 	bl	800ce74 <sniprintf>

	memcpy(path, file_path, strlen(file_path) + 1);
 8004412:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004416:	4618      	mov	r0, r3
 8004418:	f7fb feb2 	bl	8000180 <strlen>
 800441c:	4603      	mov	r3, r0
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f008 fe89 	bl	800d13e <memcpy>

	res = f_open(&file, file_path, FA_WRITE | FA_CREATE_ALWAYS);
 800442c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004430:	220a      	movs	r2, #10
 8004432:	4619      	mov	r1, r3
 8004434:	482a      	ldr	r0, [pc, #168]	@ (80044e0 <createFolderWithCSV+0x19c>)
 8004436:	f007 fac9 	bl	800b9cc <f_open>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <createFolderWithCSV+0x17c>)
 8004440:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK) {
 8004442:	4b1f      	ldr	r3, [pc, #124]	@ (80044c0 <createFolderWithCSV+0x17c>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <createFolderWithCSV+0x114>
		myprintf("Error opening .csv file (%i)\r\n", res);
 800444a:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <createFolderWithCSV+0x17c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	4619      	mov	r1, r3
 8004450:	4824      	ldr	r0, [pc, #144]	@ (80044e4 <createFolderWithCSV+0x1a0>)
 8004452:	f7fd ff85 	bl	8002360 <myprintf>
 8004456:	e025      	b.n	80044a4 <createFolderWithCSV+0x160>
	} else {
		char header[] = "time, setpoint, parameter, current, battery voltage, DAC, temp_1, temp_2, ON/OFF, qlmb\r\n";
 8004458:	4a23      	ldr	r2, [pc, #140]	@ (80044e8 <createFolderWithCSV+0x1a4>)
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	4611      	mov	r1, r2
 8004460:	2259      	movs	r2, #89	@ 0x59
 8004462:	4618      	mov	r0, r3
 8004464:	f008 fe6b 	bl	800d13e <memcpy>
		UINT bytes_written;
		res = f_write(&file, header, strlen(header), &bytes_written);
 8004468:	f107 0308 	add.w	r3, r7, #8
 800446c:	4618      	mov	r0, r3
 800446e:	f7fb fe87 	bl	8000180 <strlen>
 8004472:	4602      	mov	r2, r0
 8004474:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004478:	f107 0108 	add.w	r1, r7, #8
 800447c:	4818      	ldr	r0, [pc, #96]	@ (80044e0 <createFolderWithCSV+0x19c>)
 800447e:	f007 fc5f 	bl	800bd40 <f_write>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	4b0e      	ldr	r3, [pc, #56]	@ (80044c0 <createFolderWithCSV+0x17c>)
 8004488:	701a      	strb	r2, [r3, #0]
		if (res != FR_OK) myprintf("Writing header ERROR (%i)\r\n", res);
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <createFolderWithCSV+0x17c>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <createFolderWithCSV+0x15a>
 8004492:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <createFolderWithCSV+0x17c>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	4814      	ldr	r0, [pc, #80]	@ (80044ec <createFolderWithCSV+0x1a8>)
 800449a:	f7fd ff61 	bl	8002360 <myprintf>

		f_close(&file);
 800449e:	4810      	ldr	r0, [pc, #64]	@ (80044e0 <createFolderWithCSV+0x19c>)
 80044a0:	f007 fe41 	bl	800c126 <f_close>
	}

	f_mount(NULL, "", 0);
 80044a4:	2200      	movs	r2, #0
 80044a6:	4904      	ldr	r1, [pc, #16]	@ (80044b8 <createFolderWithCSV+0x174>)
 80044a8:	2000      	movs	r0, #0
 80044aa:	f007 fa49 	bl	800b940 <f_mount>
	sd_dettach();
 80044ae:	f7ff ff15 	bl	80042dc <sd_dettach>
}
 80044b2:	37b0      	adds	r7, #176	@ 0xb0
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	0800f368 	.word	0x0800f368
 80044bc:	2000051c 	.word	0x2000051c
 80044c0:	2000097c 	.word	0x2000097c
 80044c4:	0800f36c 	.word	0x0800f36c
 80044c8:	2000097d 	.word	0x2000097d
 80044cc:	0800f384 	.word	0x0800f384
 80044d0:	0800f3a4 	.word	0x0800f3a4
 80044d4:	0800f3c0 	.word	0x0800f3c0
 80044d8:	0800f3e0 	.word	0x0800f3e0
 80044dc:	0800f408 	.word	0x0800f408
 80044e0:	2000074c 	.word	0x2000074c
 80044e4:	0800f414 	.word	0x0800f414
 80044e8:	0800f450 	.word	0x0800f450
 80044ec:	0800f434 	.word	0x0800f434

080044f0 <addDataToBuffer>:

void addDataToBuffer(void) {
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	b0a9      	sub	sp, #164	@ 0xa4
 80044f6:	af14      	add	r7, sp, #80	@ 0x50
    static float time = 0.0f;

    static char sd_buffer[MAX_SD_BUFFER_SIZE][256];
    static uint16_t sd_buffer_idx = 0;

    if (prev_logging == 0 && getLogging() == 1) {
 80044f8:	4b6b      	ldr	r3, [pc, #428]	@ (80046a8 <addDataToBuffer+0x1b8>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d117      	bne.n	8004530 <addDataToBuffer+0x40>
 8004500:	f7fe ff76 	bl	80033f0 <getLogging>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d112      	bne.n	8004530 <addDataToBuffer+0x40>
        prev_logging = 1;
 800450a:	4b67      	ldr	r3, [pc, #412]	@ (80046a8 <addDataToBuffer+0x1b8>)
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
        createFolderWithCSV(&file_path[0]);
 8004510:	4866      	ldr	r0, [pc, #408]	@ (80046ac <addDataToBuffer+0x1bc>)
 8004512:	f7ff ff17 	bl	8004344 <createFolderWithCSV>
        time_base = HAL_GetTick();
 8004516:	f000 fd83 	bl	8005020 <HAL_GetTick>
 800451a:	4603      	mov	r3, r0
 800451c:	4a64      	ldr	r2, [pc, #400]	@ (80046b0 <addDataToBuffer+0x1c0>)
 800451e:	6013      	str	r3, [r2, #0]
        time = 0.0f;
 8004520:	4b64      	ldr	r3, [pc, #400]	@ (80046b4 <addDataToBuffer+0x1c4>)
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
        sd_buffer_idx = 0;
 8004528:	4b63      	ldr	r3, [pc, #396]	@ (80046b8 <addDataToBuffer+0x1c8>)
 800452a:	2200      	movs	r2, #0
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	e011      	b.n	8004554 <addDataToBuffer+0x64>
    } else {
        time = (float)(HAL_GetTick() - time_base) / 1000.0f;
 8004530:	f000 fd76 	bl	8005020 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	4b5e      	ldr	r3, [pc, #376]	@ (80046b0 <addDataToBuffer+0x1c0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	4618      	mov	r0, r3
 800453e:	f7fc fbe1 	bl	8000d04 <__aeabi_ui2f>
 8004542:	4603      	mov	r3, r0
 8004544:	495d      	ldr	r1, [pc, #372]	@ (80046bc <addDataToBuffer+0x1cc>)
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc fce8 	bl	8000f1c <__aeabi_fdiv>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	4b58      	ldr	r3, [pc, #352]	@ (80046b4 <addDataToBuffer+0x1c4>)
 8004552:	601a      	str	r2, [r3, #0]
    }

    // Collect current timestamp and data
    RTC_DateTypeDef sDate;
    RTC_TimeTypeDef sTime;
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004554:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004558:	2200      	movs	r2, #0
 800455a:	4619      	mov	r1, r3
 800455c:	4858      	ldr	r0, [pc, #352]	@ (80046c0 <addDataToBuffer+0x1d0>)
 800455e:	f002 fc12 	bl	8006d86 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004562:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004566:	2200      	movs	r2, #0
 8004568:	4619      	mov	r1, r3
 800456a:	4855      	ldr	r0, [pc, #340]	@ (80046c0 <addDataToBuffer+0x1d0>)
 800456c:	f002 fb29 	bl	8006bc2 <HAL_RTC_GetTime>

    // Format line (safe and \r\n newline)
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 8004570:	4b51      	ldr	r3, [pc, #324]	@ (80046b8 <addDataToBuffer+0x1c8>)
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	4a53      	ldr	r2, [pc, #332]	@ (80046c4 <addDataToBuffer+0x1d4>)
 8004578:	4413      	add	r3, r2
 800457a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800457c:	4b4d      	ldr	r3, [pc, #308]	@ (80046b4 <addDataToBuffer+0x1c4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb ff69 	bl	8000458 <__aeabi_f2d>
 8004586:	e9c7 0108 	strd	r0, r1, [r7, #32]
        "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.2f,%.2f,%d,%.2f\r\n",
        time, getSetpoint(), getParameter(), getCurrent(), getBatteryVoltage(),
 800458a:	f7fe fbb5 	bl	8002cf8 <getSetpoint>
 800458e:	4603      	mov	r3, r0
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb ff61 	bl	8000458 <__aeabi_f2d>
 8004596:	e9c7 0106 	strd	r0, r1, [r7, #24]
        time, getSetpoint(), getParameter(), getCurrent(), getBatteryVoltage(),
 800459a:	f7fe fea5 	bl	80032e8 <getParameter>
 800459e:	4603      	mov	r3, r0
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fb ff59 	bl	8000458 <__aeabi_f2d>
 80045a6:	e9c7 0104 	strd	r0, r1, [r7, #16]
        time, getSetpoint(), getParameter(), getCurrent(), getBatteryVoltage(),
 80045aa:	f7fe fc2b 	bl	8002e04 <getCurrent>
 80045ae:	4603      	mov	r3, r0
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fb ff51 	bl	8000458 <__aeabi_f2d>
 80045b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
        time, getSetpoint(), getParameter(), getCurrent(), getBatteryVoltage(),
 80045ba:	f7fe fd9b 	bl	80030f4 <getBatteryVoltage>
 80045be:	4603      	mov	r3, r0
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ff49 	bl	8000458 <__aeabi_f2d>
 80045c6:	e9c7 0100 	strd	r0, r1, [r7]
        getDacOutput(), temp_1, temp_3, getOnOff(), qlmb);
 80045ca:	f7fe fe31 	bl	8003230 <getDacOutput>
 80045ce:	4603      	mov	r3, r0
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ff41 	bl	8000458 <__aeabi_f2d>
 80045d6:	4682      	mov	sl, r0
 80045d8:	468b      	mov	fp, r1
        getDacOutput(), temp_1, temp_3, getOnOff(), qlmb);
 80045da:	4b3b      	ldr	r3, [pc, #236]	@ (80046c8 <addDataToBuffer+0x1d8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fb ff3a 	bl	8000458 <__aeabi_f2d>
 80045e4:	4680      	mov	r8, r0
 80045e6:	4689      	mov	r9, r1
        getDacOutput(), temp_1, temp_3, getOnOff(), qlmb);
 80045e8:	4b38      	ldr	r3, [pc, #224]	@ (80046cc <addDataToBuffer+0x1dc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fb ff33 	bl	8000458 <__aeabi_f2d>
 80045f2:	4604      	mov	r4, r0
 80045f4:	460d      	mov	r5, r1
        getDacOutput(), temp_1, temp_3, getOnOff(), qlmb);
 80045f6:	f7fe fed9 	bl	80033ac <getOnOff>
 80045fa:	4603      	mov	r3, r0
    int len = snprintf(sd_buffer[sd_buffer_idx], sizeof(sd_buffer[sd_buffer_idx]),
 80045fc:	461e      	mov	r6, r3
 80045fe:	4b34      	ldr	r3, [pc, #208]	@ (80046d0 <addDataToBuffer+0x1e0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fb ff28 	bl	8000458 <__aeabi_f2d>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8004610:	9610      	str	r6, [sp, #64]	@ 0x40
 8004612:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8004616:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 800461a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 800461e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004622:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800462a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800462e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004636:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800463a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800463e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004642:	e9cd 2300 	strd	r2, r3, [sp]
 8004646:	4a23      	ldr	r2, [pc, #140]	@ (80046d4 <addDataToBuffer+0x1e4>)
 8004648:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800464c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800464e:	f008 fc11 	bl	800ce74 <sniprintf>
 8004652:	64f8      	str	r0, [r7, #76]	@ 0x4c

    if (len < 0) {
 8004654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004656:	2b00      	cmp	r3, #0
 8004658:	da03      	bge.n	8004662 <addDataToBuffer+0x172>
        myprintf("Encoding error in snprintf!\r\n");
 800465a:	481f      	ldr	r0, [pc, #124]	@ (80046d8 <addDataToBuffer+0x1e8>)
 800465c:	f7fd fe80 	bl	8002360 <myprintf>
        return;
 8004660:	e01e      	b.n	80046a0 <addDataToBuffer+0x1b0>
    }
    if (len >= sizeof(sd_buffer[sd_buffer_idx])) {
 8004662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004664:	2bff      	cmp	r3, #255	@ 0xff
 8004666:	d904      	bls.n	8004672 <addDataToBuffer+0x182>
        myprintf("CSV line too long (%d), skipping row to avoid overflow!\r\n", len);
 8004668:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800466a:	481c      	ldr	r0, [pc, #112]	@ (80046dc <addDataToBuffer+0x1ec>)
 800466c:	f7fd fe78 	bl	8002360 <myprintf>
        return;
 8004670:	e016      	b.n	80046a0 <addDataToBuffer+0x1b0>
    }

    sd_buffer_idx++;
 8004672:	4b11      	ldr	r3, [pc, #68]	@ (80046b8 <addDataToBuffer+0x1c8>)
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	4b0f      	ldr	r3, [pc, #60]	@ (80046b8 <addDataToBuffer+0x1c8>)
 800467c:	801a      	strh	r2, [r3, #0]

    if (sd_buffer_idx >= getLoggingBufferSize()) {
 800467e:	f7fe fedb 	bl	8003438 <getLoggingBufferSize>
 8004682:	4603      	mov	r3, r0
 8004684:	461a      	mov	r2, r3
 8004686:	4b0c      	ldr	r3, [pc, #48]	@ (80046b8 <addDataToBuffer+0x1c8>)
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d808      	bhi.n	80046a0 <addDataToBuffer+0x1b0>
        writeBufferToCsv(sd_buffer, sd_buffer_idx);
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <addDataToBuffer+0x1c8>)
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	4619      	mov	r1, r3
 8004694:	480b      	ldr	r0, [pc, #44]	@ (80046c4 <addDataToBuffer+0x1d4>)
 8004696:	f000 f823 	bl	80046e0 <writeBufferToCsv>
        sd_buffer_idx = 0;
 800469a:	4b07      	ldr	r3, [pc, #28]	@ (80046b8 <addDataToBuffer+0x1c8>)
 800469c:	2200      	movs	r2, #0
 800469e:	801a      	strh	r2, [r3, #0]
    }
}
 80046a0:	3754      	adds	r7, #84	@ 0x54
 80046a2:	46bd      	mov	sp, r7
 80046a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a8:	2000097d 	.word	0x2000097d
 80046ac:	20000980 	.word	0x20000980
 80046b0:	200009b0 	.word	0x200009b0
 80046b4:	200009b4 	.word	0x200009b4
 80046b8:	200009b8 	.word	0x200009b8
 80046bc:	447a0000 	.word	0x447a0000
 80046c0:	200004fc 	.word	0x200004fc
 80046c4:	200009bc 	.word	0x200009bc
 80046c8:	200004be 	.word	0x200004be
 80046cc:	200004c6 	.word	0x200004c6
 80046d0:	200004a4 	.word	0x200004a4
 80046d4:	0800f4ac 	.word	0x0800f4ac
 80046d8:	0800f4e0 	.word	0x0800f4e0
 80046dc:	0800f500 	.word	0x0800f500

080046e0 <writeBufferToCsv>:

void writeBufferToCsv(char buffer[][256], uint16_t size) {
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
    sd_attach();
 80046ec:	f7ff fdea 	bl	80042c4 <sd_attach>

    f_mount(&fs, "", 1);
 80046f0:	2201      	movs	r2, #1
 80046f2:	4934      	ldr	r1, [pc, #208]	@ (80047c4 <writeBufferToCsv+0xe4>)
 80046f4:	4834      	ldr	r0, [pc, #208]	@ (80047c8 <writeBufferToCsv+0xe8>)
 80046f6:	f007 f923 	bl	800b940 <f_mount>

    res = f_open(&file, file_path, FA_WRITE | FA_OPEN_APPEND);
 80046fa:	2232      	movs	r2, #50	@ 0x32
 80046fc:	4933      	ldr	r1, [pc, #204]	@ (80047cc <writeBufferToCsv+0xec>)
 80046fe:	4834      	ldr	r0, [pc, #208]	@ (80047d0 <writeBufferToCsv+0xf0>)
 8004700:	f007 f964 	bl	800b9cc <f_open>
 8004704:	4603      	mov	r3, r0
 8004706:	461a      	mov	r2, r3
 8004708:	4b32      	ldr	r3, [pc, #200]	@ (80047d4 <writeBufferToCsv+0xf4>)
 800470a:	701a      	strb	r2, [r3, #0]
    if (res == FR_OK) {
 800470c:	4b31      	ldr	r3, [pc, #196]	@ (80047d4 <writeBufferToCsv+0xf4>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d145      	bne.n	80047a0 <writeBufferToCsv+0xc0>
        UINT bytes_written;

        for (int i = 0; i < size; i++) {
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e023      	b.n	8004762 <writeBufferToCsv+0x82>
            res = f_write(&file, buffer[i], strlen(buffer[i]), &bytes_written);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	18d4      	adds	r4, r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f7fb fd28 	bl	8000180 <strlen>
 8004730:	4602      	mov	r2, r0
 8004732:	f107 030c 	add.w	r3, r7, #12
 8004736:	4621      	mov	r1, r4
 8004738:	4825      	ldr	r0, [pc, #148]	@ (80047d0 <writeBufferToCsv+0xf0>)
 800473a:	f007 fb01 	bl	800bd40 <f_write>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <writeBufferToCsv+0xf4>)
 8004744:	701a      	strb	r2, [r3, #0]
            if (res != FR_OK) {
 8004746:	4b23      	ldr	r3, [pc, #140]	@ (80047d4 <writeBufferToCsv+0xf4>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d006      	beq.n	800475c <writeBufferToCsv+0x7c>
                myprintf("f_write error (%i)\r\n", res);
 800474e:	4b21      	ldr	r3, [pc, #132]	@ (80047d4 <writeBufferToCsv+0xf4>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	4820      	ldr	r0, [pc, #128]	@ (80047d8 <writeBufferToCsv+0xf8>)
 8004756:	f7fd fe03 	bl	8002360 <myprintf>
                break;
 800475a:	e006      	b.n	800476a <writeBufferToCsv+0x8a>
        for (int i = 0; i < size; i++) {
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3301      	adds	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	887b      	ldrh	r3, [r7, #2]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	429a      	cmp	r2, r3
 8004768:	dbd7      	blt.n	800471a <writeBufferToCsv+0x3a>
            }
        }

        myprintf("Data was added to .csv\r\n");
 800476a:	481c      	ldr	r0, [pc, #112]	@ (80047dc <writeBufferToCsv+0xfc>)
 800476c:	f7fd fdf8 	bl	8002360 <myprintf>
        f_close(&file);
 8004770:	4817      	ldr	r0, [pc, #92]	@ (80047d0 <writeBufferToCsv+0xf0>)
 8004772:	f007 fcd8 	bl	800c126 <f_close>

        for (int i = 0; i < size; i++) {
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	e00c      	b.n	8004796 <writeBufferToCsv+0xb6>
            memset(buffer[i], 0, 256);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004788:	2100      	movs	r1, #0
 800478a:	4618      	mov	r0, r3
 800478c:	f008 fc4a 	bl	800d024 <memset>
        for (int i = 0; i < size; i++) {
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3301      	adds	r3, #1
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	429a      	cmp	r2, r3
 800479c:	dbee      	blt.n	800477c <writeBufferToCsv+0x9c>
 800479e:	e005      	b.n	80047ac <writeBufferToCsv+0xcc>
        }

    } else {
        myprintf("ERROR CSV (%i)\r\n", res);
 80047a0:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <writeBufferToCsv+0xf4>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	4619      	mov	r1, r3
 80047a6:	480e      	ldr	r0, [pc, #56]	@ (80047e0 <writeBufferToCsv+0x100>)
 80047a8:	f7fd fdda 	bl	8002360 <myprintf>
    }

    f_mount(NULL, "", 0);
 80047ac:	2200      	movs	r2, #0
 80047ae:	4905      	ldr	r1, [pc, #20]	@ (80047c4 <writeBufferToCsv+0xe4>)
 80047b0:	2000      	movs	r0, #0
 80047b2:	f007 f8c5 	bl	800b940 <f_mount>
    sd_dettach();
 80047b6:	f7ff fd91 	bl	80042dc <sd_dettach>
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd90      	pop	{r4, r7, pc}
 80047c2:	bf00      	nop
 80047c4:	0800f368 	.word	0x0800f368
 80047c8:	2000051c 	.word	0x2000051c
 80047cc:	20000980 	.word	0x20000980
 80047d0:	2000074c 	.word	0x2000074c
 80047d4:	2000097c 	.word	0x2000097c
 80047d8:	0800f53c 	.word	0x0800f53c
 80047dc:	0800f554 	.word	0x0800f554
 80047e0:	0800f570 	.word	0x0800f570

080047e4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80047e8:	4b17      	ldr	r3, [pc, #92]	@ (8004848 <MX_SPI2_Init+0x64>)
 80047ea:	4a18      	ldr	r2, [pc, #96]	@ (800484c <MX_SPI2_Init+0x68>)
 80047ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80047ee:	4b16      	ldr	r3, [pc, #88]	@ (8004848 <MX_SPI2_Init+0x64>)
 80047f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80047f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80047f6:	4b14      	ldr	r3, [pc, #80]	@ (8004848 <MX_SPI2_Init+0x64>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80047fc:	4b12      	ldr	r3, [pc, #72]	@ (8004848 <MX_SPI2_Init+0x64>)
 80047fe:	2200      	movs	r2, #0
 8004800:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004802:	4b11      	ldr	r3, [pc, #68]	@ (8004848 <MX_SPI2_Init+0x64>)
 8004804:	2200      	movs	r2, #0
 8004806:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004808:	4b0f      	ldr	r3, [pc, #60]	@ (8004848 <MX_SPI2_Init+0x64>)
 800480a:	2200      	movs	r2, #0
 800480c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800480e:	4b0e      	ldr	r3, [pc, #56]	@ (8004848 <MX_SPI2_Init+0x64>)
 8004810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004814:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <MX_SPI2_Init+0x64>)
 8004818:	2230      	movs	r2, #48	@ 0x30
 800481a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800481c:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <MX_SPI2_Init+0x64>)
 800481e:	2200      	movs	r2, #0
 8004820:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004822:	4b09      	ldr	r3, [pc, #36]	@ (8004848 <MX_SPI2_Init+0x64>)
 8004824:	2200      	movs	r2, #0
 8004826:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004828:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <MX_SPI2_Init+0x64>)
 800482a:	2200      	movs	r2, #0
 800482c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800482e:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <MX_SPI2_Init+0x64>)
 8004830:	220a      	movs	r2, #10
 8004832:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004834:	4804      	ldr	r0, [pc, #16]	@ (8004848 <MX_SPI2_Init+0x64>)
 8004836:	f002 fc4d 	bl	80070d4 <HAL_SPI_Init>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004840:	f7fe fa54 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004844:	bf00      	nop
 8004846:	bd80      	pop	{r7, pc}
 8004848:	200049bc 	.word	0x200049bc
 800484c:	40003800 	.word	0x40003800

08004850 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004854:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <MX_SPI3_Init+0x64>)
 8004856:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <MX_SPI3_Init+0x68>)
 8004858:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800485a:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <MX_SPI3_Init+0x64>)
 800485c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004860:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004862:	4b14      	ldr	r3, [pc, #80]	@ (80048b4 <MX_SPI3_Init+0x64>)
 8004864:	2200      	movs	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004868:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <MX_SPI3_Init+0x64>)
 800486a:	2200      	movs	r2, #0
 800486c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800486e:	4b11      	ldr	r3, [pc, #68]	@ (80048b4 <MX_SPI3_Init+0x64>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004874:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <MX_SPI3_Init+0x64>)
 8004876:	2200      	movs	r2, #0
 8004878:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800487a:	4b0e      	ldr	r3, [pc, #56]	@ (80048b4 <MX_SPI3_Init+0x64>)
 800487c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004880:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004882:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <MX_SPI3_Init+0x64>)
 8004884:	2230      	movs	r2, #48	@ 0x30
 8004886:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004888:	4b0a      	ldr	r3, [pc, #40]	@ (80048b4 <MX_SPI3_Init+0x64>)
 800488a:	2200      	movs	r2, #0
 800488c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800488e:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <MX_SPI3_Init+0x64>)
 8004890:	2200      	movs	r2, #0
 8004892:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004894:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <MX_SPI3_Init+0x64>)
 8004896:	2200      	movs	r2, #0
 8004898:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800489a:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <MX_SPI3_Init+0x64>)
 800489c:	220a      	movs	r2, #10
 800489e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80048a0:	4804      	ldr	r0, [pc, #16]	@ (80048b4 <MX_SPI3_Init+0x64>)
 80048a2:	f002 fc17 	bl	80070d4 <HAL_SPI_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80048ac:	f7fe fa1e 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20004a14 	.word	0x20004a14
 80048b8:	40003c00 	.word	0x40003c00

080048bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08c      	sub	sp, #48	@ 0x30
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	f107 031c 	add.w	r3, r7, #28
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a44      	ldr	r2, [pc, #272]	@ (80049ec <HAL_SPI_MspInit+0x130>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d13a      	bne.n	8004954 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80048de:	4b44      	ldr	r3, [pc, #272]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	4a43      	ldr	r2, [pc, #268]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 80048e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80048ea:	4b41      	ldr	r3, [pc, #260]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048f6:	4b3e      	ldr	r3, [pc, #248]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4a3d      	ldr	r2, [pc, #244]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	61d3      	str	r3, [r2, #28]
 8004902:	4b3b      	ldr	r3, [pc, #236]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800490e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8004912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004914:	2302      	movs	r3, #2
 8004916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800491c:	2301      	movs	r3, #1
 800491e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004920:	2305      	movs	r3, #5
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004924:	f107 031c 	add.w	r3, r7, #28
 8004928:	4619      	mov	r1, r3
 800492a:	4832      	ldr	r0, [pc, #200]	@ (80049f4 <HAL_SPI_MspInit+0x138>)
 800492c:	f000 ff56 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004930:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004936:	2302      	movs	r3, #2
 8004938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800493a:	2302      	movs	r3, #2
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800493e:	2301      	movs	r3, #1
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004942:	2305      	movs	r3, #5
 8004944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004946:	f107 031c 	add.w	r3, r7, #28
 800494a:	4619      	mov	r1, r3
 800494c:	4829      	ldr	r0, [pc, #164]	@ (80049f4 <HAL_SPI_MspInit+0x138>)
 800494e:	f000 ff45 	bl	80057dc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004952:	e046      	b.n	80049e2 <HAL_SPI_MspInit+0x126>
  else if(spiHandle->Instance==SPI3)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a27      	ldr	r2, [pc, #156]	@ (80049f8 <HAL_SPI_MspInit+0x13c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d141      	bne.n	80049e2 <HAL_SPI_MspInit+0x126>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800495e:	4b24      	ldr	r3, [pc, #144]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	4a23      	ldr	r2, [pc, #140]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 8004964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004968:	6253      	str	r3, [r2, #36]	@ 0x24
 800496a:	4b21      	ldr	r3, [pc, #132]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004976:	4b1e      	ldr	r3, [pc, #120]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	61d3      	str	r3, [r2, #28]
 8004982:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <HAL_SPI_MspInit+0x134>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800498e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004994:	2302      	movs	r3, #2
 8004996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800499c:	2301      	movs	r3, #1
 800499e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80049a0:	2306      	movs	r3, #6
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049a4:	f107 031c 	add.w	r3, r7, #28
 80049a8:	4619      	mov	r1, r3
 80049aa:	4814      	ldr	r0, [pc, #80]	@ (80049fc <HAL_SPI_MspInit+0x140>)
 80049ac:	f000 ff16 	bl	80057dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80049b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b6:	2302      	movs	r3, #2
 80049b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ba:	2301      	movs	r3, #1
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80049be:	2301      	movs	r3, #1
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80049c2:	2306      	movs	r3, #6
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049c6:	f107 031c 	add.w	r3, r7, #28
 80049ca:	4619      	mov	r1, r3
 80049cc:	480b      	ldr	r0, [pc, #44]	@ (80049fc <HAL_SPI_MspInit+0x140>)
 80049ce:	f000 ff05 	bl	80057dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	202f      	movs	r0, #47	@ 0x2f
 80049d8:	f000 fc25 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80049dc:	202f      	movs	r0, #47	@ 0x2f
 80049de:	f000 fc3e 	bl	800525e <HAL_NVIC_EnableIRQ>
}
 80049e2:	bf00      	nop
 80049e4:	3730      	adds	r7, #48	@ 0x30
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40003800 	.word	0x40003800
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40020400 	.word	0x40020400
 80049f8:	40003c00 	.word	0x40003c00
 80049fc:	40020800 	.word	0x40020800

08004a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004a06:	4b15      	ldr	r3, [pc, #84]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	4a14      	ldr	r2, [pc, #80]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a10:	6253      	str	r3, [r2, #36]	@ 0x24
 8004a12:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4a0e      	ldr	r2, [pc, #56]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	6213      	str	r3, [r2, #32]
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a36:	4b09      	ldr	r3, [pc, #36]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	4a08      	ldr	r2, [pc, #32]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a40:	6253      	str	r3, [r2, #36]	@ 0x24
 8004a42:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <HAL_MspInit+0x5c>)
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004a4e:	2007      	movs	r0, #7
 8004a50:	f000 fbde 	bl	8005210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40023800 	.word	0x40023800

08004a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <NMI_Handler+0x4>

08004a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <HardFault_Handler+0x4>

08004a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <MemManage_Handler+0x4>

08004a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a7c:	bf00      	nop
 8004a7e:	e7fd      	b.n	8004a7c <BusFault_Handler+0x4>

08004a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <UsageFault_Handler+0x4>

08004a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a98:	bf00      	nop
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ab0:	f000 faa4 	bl	8004ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ab4:	bf00      	nop
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(iSW_exti_Pin);
 8004abc:	2080      	movs	r0, #128	@ 0x80
 8004abe:	f001 f84d 	bl	8005b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004acc:	4802      	ldr	r0, [pc, #8]	@ (8004ad8 <TIM2_IRQHandler+0x10>)
 8004ace:	f003 facd 	bl	800806c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20004a70 	.word	0x20004a70

08004adc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ae0:	4802      	ldr	r0, [pc, #8]	@ (8004aec <USART2_IRQHandler+0x10>)
 8004ae2:	f003 fee5 	bl	80088b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20004af0 	.word	0x20004af0

08004af0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(iCLK_exti_Pin);
 8004af4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004af8:	f001 f830 	bl	8005b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004afc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004b00:	f001 f82c 	bl	8005b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b04:	bf00      	nop
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004b0c:	4802      	ldr	r0, [pc, #8]	@ (8004b18 <SPI3_IRQHandler+0x10>)
 8004b0e:	f002 ff71 	bl	80079f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20004a14 	.word	0x20004a14

08004b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return 1;
 8004b20:	2301      	movs	r3, #1
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr

08004b2a <_kill>:

int _kill(int pid, int sig)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b34:	f008 fac8 	bl	800d0c8 <__errno>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2216      	movs	r2, #22
 8004b3c:	601a      	str	r2, [r3, #0]
  return -1;
 8004b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <_exit>:

void _exit (int status)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b52:	f04f 31ff 	mov.w	r1, #4294967295
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff ffe7 	bl	8004b2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <_exit+0x12>

08004b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e00a      	b.n	8004b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b72:	f3af 8000 	nop.w
 8004b76:	4601      	mov	r1, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	60ba      	str	r2, [r7, #8]
 8004b7e:	b2ca      	uxtb	r2, r1
 8004b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	3301      	adds	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	dbf0      	blt.n	8004b72 <_read+0x12>
  }

  return len;
 8004b90:	687b      	ldr	r3, [r7, #4]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	e009      	b.n	8004bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	60ba      	str	r2, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	dbf1      	blt.n	8004bac <_write+0x12>
  }
  return len;
 8004bc8:	687b      	ldr	r3, [r7, #4]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_close>:

int _close(int file)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bf8:	605a      	str	r2, [r3, #4]
  return 0;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <_isatty>:

int _isatty(int file)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c0e:	2301      	movs	r3, #1
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
	...

08004c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c3c:	4a14      	ldr	r2, [pc, #80]	@ (8004c90 <_sbrk+0x5c>)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	@ (8004c94 <_sbrk+0x60>)
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c48:	4b13      	ldr	r3, [pc, #76]	@ (8004c98 <_sbrk+0x64>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c50:	4b11      	ldr	r3, [pc, #68]	@ (8004c98 <_sbrk+0x64>)
 8004c52:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <_sbrk+0x68>)
 8004c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c56:	4b10      	ldr	r3, [pc, #64]	@ (8004c98 <_sbrk+0x64>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d207      	bcs.n	8004c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c64:	f008 fa30 	bl	800d0c8 <__errno>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	220c      	movs	r2, #12
 8004c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	e009      	b.n	8004c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c74:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <_sbrk+0x64>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c7a:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <_sbrk+0x64>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	4a05      	ldr	r2, [pc, #20]	@ (8004c98 <_sbrk+0x64>)
 8004c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20014000 	.word	0x20014000
 8004c94:	00000400 	.word	0x00000400
 8004c98:	20004a6c 	.word	0x20004a6c
 8004c9c:	20004ce8 	.word	0x20004ce8

08004ca0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004cd2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8004cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cd8:	4b19      	ldr	r3, [pc, #100]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8004cde:	4b18      	ldr	r3, [pc, #96]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004ce0:	2263      	movs	r2, #99	@ 0x63
 8004ce2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ce4:	4b16      	ldr	r3, [pc, #88]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cea:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004cf0:	4813      	ldr	r0, [pc, #76]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004cf2:	f003 f8df 	bl	8007eb4 <HAL_TIM_Base_Init>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004cfc:	f7fd fff6 	bl	8002cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d06:	f107 0308 	add.w	r3, r7, #8
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	480c      	ldr	r0, [pc, #48]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004d0e:	f003 fa79 	bl	8008204 <HAL_TIM_ConfigClockSource>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004d18:	f7fd ffe8 	bl	8002cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d24:	463b      	mov	r3, r7
 8004d26:	4619      	mov	r1, r3
 8004d28:	4805      	ldr	r0, [pc, #20]	@ (8004d40 <MX_TIM2_Init+0x94>)
 8004d2a:	f003 fc63 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004d34:	f7fd ffda 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004d38:	bf00      	nop
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20004a70 	.word	0x20004a70

08004d44 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d52:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <MX_TIM6_Init+0x64>)
 8004d54:	4a15      	ldr	r2, [pc, #84]	@ (8004dac <MX_TIM6_Init+0x68>)
 8004d56:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8004d58:	4b13      	ldr	r3, [pc, #76]	@ (8004da8 <MX_TIM6_Init+0x64>)
 8004d5a:	221f      	movs	r2, #31
 8004d5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d5e:	4b12      	ldr	r3, [pc, #72]	@ (8004da8 <MX_TIM6_Init+0x64>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004d64:	4b10      	ldr	r3, [pc, #64]	@ (8004da8 <MX_TIM6_Init+0x64>)
 8004d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004da8 <MX_TIM6_Init+0x64>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004d72:	480d      	ldr	r0, [pc, #52]	@ (8004da8 <MX_TIM6_Init+0x64>)
 8004d74:	f003 f89e 	bl	8007eb4 <HAL_TIM_Base_Init>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004d7e:	f7fd ffb5 	bl	8002cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4806      	ldr	r0, [pc, #24]	@ (8004da8 <MX_TIM6_Init+0x64>)
 8004d90:	f003 fc30 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004d9a:	f7fd ffa7 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20004ab0 	.word	0x20004ab0
 8004dac:	40001000 	.word	0x40001000

08004db0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc0:	d114      	bne.n	8004dec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004dc2:	4b15      	ldr	r3, [pc, #84]	@ (8004e18 <HAL_TIM_Base_MspInit+0x68>)
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	4a14      	ldr	r2, [pc, #80]	@ (8004e18 <HAL_TIM_Base_MspInit+0x68>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6253      	str	r3, [r2, #36]	@ 0x24
 8004dce:	4b12      	ldr	r3, [pc, #72]	@ (8004e18 <HAL_TIM_Base_MspInit+0x68>)
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2100      	movs	r1, #0
 8004dde:	201c      	movs	r0, #28
 8004de0:	f000 fa21 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004de4:	201c      	movs	r0, #28
 8004de6:	f000 fa3a 	bl	800525e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004dea:	e010      	b.n	8004e0e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e1c <HAL_TIM_Base_MspInit+0x6c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10b      	bne.n	8004e0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004df6:	4b08      	ldr	r3, [pc, #32]	@ (8004e18 <HAL_TIM_Base_MspInit+0x68>)
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	4a07      	ldr	r2, [pc, #28]	@ (8004e18 <HAL_TIM_Base_MspInit+0x68>)
 8004dfc:	f043 0310 	orr.w	r3, r3, #16
 8004e00:	6253      	str	r3, [r2, #36]	@ 0x24
 8004e02:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <HAL_TIM_Base_MspInit+0x68>)
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40001000 	.word	0x40001000

08004e20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e24:	4b11      	ldr	r3, [pc, #68]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e26:	4a12      	ldr	r2, [pc, #72]	@ (8004e70 <MX_USART2_UART_Init+0x50>)
 8004e28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004e2a:	4b10      	ldr	r3, [pc, #64]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e32:	4b0e      	ldr	r3, [pc, #56]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e38:	4b0c      	ldr	r3, [pc, #48]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e44:	4b09      	ldr	r3, [pc, #36]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e46:	220c      	movs	r2, #12
 8004e48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e4a:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e50:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e56:	4805      	ldr	r0, [pc, #20]	@ (8004e6c <MX_USART2_UART_Init+0x4c>)
 8004e58:	f003 fc2a 	bl	80086b0 <HAL_UART_Init>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004e62:	f7fd ff43 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20004af0 	.word	0x20004af0
 8004e70:	40004400 	.word	0x40004400

08004e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	@ 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1b      	ldr	r2, [pc, #108]	@ (8004f00 <HAL_UART_MspInit+0x8c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d12f      	bne.n	8004ef6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e96:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <HAL_UART_MspInit+0x90>)
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004f04 <HAL_UART_MspInit+0x90>)
 8004e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea0:	6253      	str	r3, [r2, #36]	@ 0x24
 8004ea2:	4b18      	ldr	r3, [pc, #96]	@ (8004f04 <HAL_UART_MspInit+0x90>)
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eae:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <HAL_UART_MspInit+0x90>)
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	4a14      	ldr	r2, [pc, #80]	@ (8004f04 <HAL_UART_MspInit+0x90>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	61d3      	str	r3, [r2, #28]
 8004eba:	4b12      	ldr	r3, [pc, #72]	@ (8004f04 <HAL_UART_MspInit+0x90>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ed6:	2307      	movs	r3, #7
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eda:	f107 0314 	add.w	r3, r7, #20
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4809      	ldr	r0, [pc, #36]	@ (8004f08 <HAL_UART_MspInit+0x94>)
 8004ee2:	f000 fc7b 	bl	80057dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2100      	movs	r1, #0
 8004eea:	2026      	movs	r0, #38	@ 0x26
 8004eec:	f000 f99b 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ef0:	2026      	movs	r0, #38	@ 0x26
 8004ef2:	f000 f9b4 	bl	800525e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	3728      	adds	r7, #40	@ 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40020000 	.word	0x40020000

08004f0c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8004f0c:	f7ff fec8 	bl	8004ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f10:	480b      	ldr	r0, [pc, #44]	@ (8004f40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004f12:	490c      	ldr	r1, [pc, #48]	@ (8004f44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004f14:	4a0c      	ldr	r2, [pc, #48]	@ (8004f48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f18:	e002      	b.n	8004f20 <LoopCopyDataInit>

08004f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f1e:	3304      	adds	r3, #4

08004f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f24:	d3f9      	bcc.n	8004f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f26:	4a09      	ldr	r2, [pc, #36]	@ (8004f4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004f28:	4c09      	ldr	r4, [pc, #36]	@ (8004f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f2c:	e001      	b.n	8004f32 <LoopFillZerobss>

08004f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f30:	3204      	adds	r2, #4

08004f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f34:	d3fb      	bcc.n	8004f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f36:	f008 f8cd 	bl	800d0d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f3a:	f7fd fcc9 	bl	80028d0 <main>
  bx lr
 8004f3e:	4770      	bx	lr
  ldr r0, =_sdata
 8004f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f44:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004f48:	0800fa1c 	.word	0x0800fa1c
  ldr r2, =_sbss
 8004f4c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004f50:	20004ce8 	.word	0x20004ce8

08004f54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f54:	e7fe      	b.n	8004f54 <ADC1_IRQHandler>

08004f56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f60:	2003      	movs	r0, #3
 8004f62:	f000 f955 	bl	8005210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f66:	2000      	movs	r0, #0
 8004f68:	f000 f80e 	bl	8004f88 <HAL_InitTick>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	71fb      	strb	r3, [r7, #7]
 8004f76:	e001      	b.n	8004f7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f78:	f7ff fd42 	bl	8004a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004f94:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <HAL_InitTick+0x68>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d022      	beq.n	8004fe2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004f9c:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <HAL_InitTick+0x6c>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <HAL_InitTick+0x68>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f962 	bl	800527a <HAL_SYSTICK_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10f      	bne.n	8004fdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b0f      	cmp	r3, #15
 8004fc0:	d809      	bhi.n	8004fd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fca:	f000 f92c 	bl	8005226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004fce:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff8 <HAL_InitTick+0x70>)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e007      	b.n	8004fe6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	e004      	b.n	8004fe6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e001      	b.n	8004fe6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	2000000c 	.word	0x2000000c
 8004ff4:	20000004 	.word	0x20000004
 8004ff8:	20000008 	.word	0x20000008

08004ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005000:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_IncTick+0x1c>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_IncTick+0x20>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4413      	add	r3, r2
 800500a:	4a03      	ldr	r2, [pc, #12]	@ (8005018 <HAL_IncTick+0x1c>)
 800500c:	6013      	str	r3, [r2, #0]
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20004b38 	.word	0x20004b38
 800501c:	2000000c 	.word	0x2000000c

08005020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return uwTick;
 8005024:	4b02      	ldr	r3, [pc, #8]	@ (8005030 <HAL_GetTick+0x10>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr
 8005030:	20004b38 	.word	0x20004b38

08005034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800503c:	f7ff fff0 	bl	8005020 <HAL_GetTick>
 8005040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d004      	beq.n	8005058 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800504e:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <HAL_Delay+0x40>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005058:	bf00      	nop
 800505a:	f7ff ffe1 	bl	8005020 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	429a      	cmp	r2, r3
 8005068:	d8f7      	bhi.n	800505a <HAL_Delay+0x26>
  {
  }
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	2000000c 	.word	0x2000000c

08005078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005088:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <__NVIC_SetPriorityGrouping+0x44>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005094:	4013      	ands	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050aa:	4a04      	ldr	r2, [pc, #16]	@ (80050bc <__NVIC_SetPriorityGrouping+0x44>)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	60d3      	str	r3, [r2, #12]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	e000ed00 	.word	0xe000ed00

080050c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050c4:	4b04      	ldr	r3, [pc, #16]	@ (80050d8 <__NVIC_GetPriorityGrouping+0x18>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	0a1b      	lsrs	r3, r3, #8
 80050ca:	f003 0307 	and.w	r3, r3, #7
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	db0b      	blt.n	8005106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	f003 021f 	and.w	r2, r3, #31
 80050f4:	4906      	ldr	r1, [pc, #24]	@ (8005110 <__NVIC_EnableIRQ+0x34>)
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	2001      	movs	r0, #1
 80050fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	e000e100 	.word	0xe000e100

08005114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	6039      	str	r1, [r7, #0]
 800511e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005124:	2b00      	cmp	r3, #0
 8005126:	db0a      	blt.n	800513e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	b2da      	uxtb	r2, r3
 800512c:	490c      	ldr	r1, [pc, #48]	@ (8005160 <__NVIC_SetPriority+0x4c>)
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	0112      	lsls	r2, r2, #4
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	440b      	add	r3, r1
 8005138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800513c:	e00a      	b.n	8005154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	4908      	ldr	r1, [pc, #32]	@ (8005164 <__NVIC_SetPriority+0x50>)
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	3b04      	subs	r3, #4
 800514c:	0112      	lsls	r2, r2, #4
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	440b      	add	r3, r1
 8005152:	761a      	strb	r2, [r3, #24]
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	e000e100 	.word	0xe000e100
 8005164:	e000ed00 	.word	0xe000ed00

08005168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	@ 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f1c3 0307 	rsb	r3, r3, #7
 8005182:	2b04      	cmp	r3, #4
 8005184:	bf28      	it	cs
 8005186:	2304      	movcs	r3, #4
 8005188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3304      	adds	r3, #4
 800518e:	2b06      	cmp	r3, #6
 8005190:	d902      	bls.n	8005198 <NVIC_EncodePriority+0x30>
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3b03      	subs	r3, #3
 8005196:	e000      	b.n	800519a <NVIC_EncodePriority+0x32>
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800519c:	f04f 32ff 	mov.w	r2, #4294967295
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43da      	mvns	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	401a      	ands	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051b0:	f04f 31ff 	mov.w	r1, #4294967295
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ba:	43d9      	mvns	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c0:	4313      	orrs	r3, r2
         );
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3724      	adds	r7, #36	@ 0x24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051dc:	d301      	bcc.n	80051e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051de:	2301      	movs	r3, #1
 80051e0:	e00f      	b.n	8005202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051e2:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <SysTick_Config+0x40>)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ea:	210f      	movs	r1, #15
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	f7ff ff90 	bl	8005114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <SysTick_Config+0x40>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051fa:	4b04      	ldr	r3, [pc, #16]	@ (800520c <SysTick_Config+0x40>)
 80051fc:	2207      	movs	r2, #7
 80051fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	e000e010 	.word	0xe000e010

08005210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff ff2d 	bl	8005078 <__NVIC_SetPriorityGrouping>
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	4603      	mov	r3, r0
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005238:	f7ff ff42 	bl	80050c0 <__NVIC_GetPriorityGrouping>
 800523c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f7ff ff90 	bl	8005168 <NVIC_EncodePriority>
 8005248:	4602      	mov	r2, r0
 800524a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ff5f 	bl	8005114 <__NVIC_SetPriority>
}
 8005256:	bf00      	nop
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	4603      	mov	r3, r0
 8005266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff ff35 	bl	80050dc <__NVIC_EnableIRQ>
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ffa2 	bl	80051cc <SysTick_Config>
 8005288:	4603      	mov	r3, r0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d008      	beq.n	80052bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2204      	movs	r2, #4
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e022      	b.n	8005302 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 020e 	bic.w	r2, r2, #14
 80052ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	f003 021c 	and.w	r2, r3, #28
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f202 	lsl.w	r2, r1, r2
 80052ee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d005      	beq.n	8005330 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2204      	movs	r2, #4
 8005328:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
 800532e:	e029      	b.n	8005384 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 020e 	bic.w	r2, r2, #14
 800533e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	f003 021c 	and.w	r2, r3, #28
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535c:	2101      	movs	r1, #1
 800535e:	fa01 f202 	lsl.w	r2, r1, r2
 8005362:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	4798      	blx	r3
    }
  }
  return status;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005398:	f7ff fe42 	bl	8005020 <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800539e:	e010      	b.n	80053c2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d00c      	beq.n	80053c2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <FLASH_WaitForLastOperation+0x2e>
 80053ae:	f7ff fe37 	bl	8005020 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d201      	bcs.n	80053c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e036      	b.n	8005430 <FLASH_WaitForLastOperation+0xa0>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80053c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <FLASH_WaitForLastOperation+0xa8>)
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d0e8      	beq.n	80053a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80053ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005438 <FLASH_WaitForLastOperation+0xa8>)
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d102      	bne.n	80053e0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80053da:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <FLASH_WaitForLastOperation+0xa8>)
 80053dc:	2202      	movs	r2, #2
 80053de:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80053e0:	4b15      	ldr	r3, [pc, #84]	@ (8005438 <FLASH_WaitForLastOperation+0xa8>)
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ec:	d01b      	beq.n	8005426 <FLASH_WaitForLastOperation+0x96>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80053ee:	4b12      	ldr	r3, [pc, #72]	@ (8005438 <FLASH_WaitForLastOperation+0xa8>)
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fa:	d014      	beq.n	8005426 <FLASH_WaitForLastOperation+0x96>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 80053fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <FLASH_WaitForLastOperation+0xa8>)
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005408:	d00d      	beq.n	8005426 <FLASH_WaitForLastOperation+0x96>
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800540a:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <FLASH_WaitForLastOperation+0xa8>)
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005416:	d006      	beq.n	8005426 <FLASH_WaitForLastOperation+0x96>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8005418:	4b07      	ldr	r3, [pc, #28]	@ (8005438 <FLASH_WaitForLastOperation+0xa8>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8005420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005424:	d103      	bne.n	800542e <FLASH_WaitForLastOperation+0x9e>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005426:	f000 f809 	bl	800543c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <FLASH_WaitForLastOperation+0xa0>
  }

  /* There is no error flag set */
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023c00 	.word	0x40023c00

0800543c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005446:	4b2e      	ldr	r3, [pc, #184]	@ (8005500 <FLASH_SetErrorCode+0xc4>)
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005452:	d109      	bne.n	8005468 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005454:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	4a29      	ldr	r2, [pc, #164]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 800545e:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005466:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8005468:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <FLASH_SetErrorCode+0xc4>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005474:	d109      	bne.n	800548a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005476:	4b23      	ldr	r3, [pc, #140]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	4a21      	ldr	r2, [pc, #132]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 8005480:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005488:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800548a:	4b1d      	ldr	r3, [pc, #116]	@ (8005500 <FLASH_SetErrorCode+0xc4>)
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005492:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005496:	d109      	bne.n	80054ac <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005498:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f043 0304 	orr.w	r3, r3, #4
 80054a0:	4a18      	ldr	r2, [pc, #96]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 80054a2:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054aa:	607b      	str	r3, [r7, #4]
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
    flags |= FLASH_FLAG_RDERR;
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 80054ac:	4b14      	ldr	r3, [pc, #80]	@ (8005500 <FLASH_SetErrorCode+0xc4>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b8:	d109      	bne.n	80054ce <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 80054ba:	4b12      	ldr	r3, [pc, #72]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f043 0320 	orr.w	r3, r3, #32
 80054c2:	4a10      	ldr	r2, [pc, #64]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 80054c4:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054cc:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80054ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005500 <FLASH_SetErrorCode+0xc4>)
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054da:	d109      	bne.n	80054f0 <FLASH_SetErrorCode+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f043 0308 	orr.w	r3, r3, #8
 80054e4:	4a07      	ldr	r2, [pc, #28]	@ (8005504 <FLASH_SetErrorCode+0xc8>)
 80054e6:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054ee:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80054f0:	4a03      	ldr	r2, [pc, #12]	@ (8005500 <FLASH_SetErrorCode+0xc4>)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6193      	str	r3, [r2, #24]
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr
 8005500:	40023c00 	.word	0x40023c00
 8005504:	20004b3c 	.word	0x20004b3c

08005508 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800550c:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800551a:	4a07      	ldr	r2, [pc, #28]	@ (8005538 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800551c:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800551e:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8005520:	4a06      	ldr	r2, [pc, #24]	@ (800553c <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8005522:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
}
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40023c00 	.word	0x40023c00
 8005538:	89abcdef 	.word	0x89abcdef
 800553c:	02030405 	.word	0x02030405

08005540 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8005544:	4b05      	ldr	r3, [pc, #20]	@ (800555c <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a04      	ldr	r2, [pc, #16]	@ (800555c <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40023c00 	.word	0x40023c00

08005560 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800556c:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 800556e:	7c1b      	ldrb	r3, [r3, #16]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_FLASHEx_DATAEEPROM_Program+0x18>
 8005574:	2302      	movs	r3, #2
 8005576:	e058      	b.n	800562a <HAL_FLASHEx_DATAEEPROM_Program+0xca>
 8005578:	4b2e      	ldr	r3, [pc, #184]	@ (8005634 <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 800557a:	2201      	movs	r2, #1
 800557c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800557e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005582:	f7ff ff05 	bl	8005390 <FLASH_WaitForLastOperation>
 8005586:	4603      	mov	r3, r0
 8005588:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d148      	bne.n	8005622 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005590:	4b28      	ldr	r3, [pc, #160]	@ (8005634 <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 8005592:	2200      	movs	r2, #0
 8005594:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d106      	bne.n	80055aa <HAL_FLASHEx_DATAEEPROM_Program+0x4a>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	68b8      	ldr	r0, [r7, #8]
 80055a0:	f000 f8fe 	bl	80057a0 <FLASH_DATAEEPROM_ProgramWord>
 80055a4:	4603      	mov	r3, r0
 80055a6:	75fb      	strb	r3, [r7, #23]
 80055a8:	e03b      	b.n	8005622 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d108      	bne.n	80055c2 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	68b8      	ldr	r0, [r7, #8]
 80055b8:	f000 f8d3 	bl	8005762 <FLASH_DATAEEPROM_ProgramHalfWord>
 80055bc:	4603      	mov	r3, r0
 80055be:	75fb      	strb	r3, [r7, #23]
 80055c0:	e02f      	b.n	8005622 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d108      	bne.n	80055da <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	4619      	mov	r1, r3
 80055ce:	68b8      	ldr	r0, [r7, #8]
 80055d0:	f000 f8a8 	bl	8005724 <FLASH_DATAEEPROM_ProgramByte>
 80055d4:	4603      	mov	r3, r0
 80055d6:	75fb      	strb	r3, [r7, #23]
 80055d8:	e023      	b.n	8005622 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d108      	bne.n	80055f2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	4619      	mov	r1, r3
 80055e6:	68b8      	ldr	r0, [r7, #8]
 80055e8:	f000 f826 	bl	8005638 <FLASH_DATAEEPROM_FastProgramByte>
 80055ec:	4603      	mov	r3, r0
 80055ee:	75fb      	strb	r3, [r7, #23]
 80055f0:	e017      	b.n	8005622 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d108      	bne.n	800560a <HAL_FLASHEx_DATAEEPROM_Program+0xaa>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4619      	mov	r1, r3
 80055fe:	68b8      	ldr	r0, [r7, #8]
 8005600:	f000 f842 	bl	8005688 <FLASH_DATAEEPROM_FastProgramHalfWord>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]
 8005608:	e00b      	b.n	8005622 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b10      	cmp	r3, #16
 800560e:	d106      	bne.n	800561e <HAL_FLASHEx_DATAEEPROM_Program+0xbe>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	68b8      	ldr	r0, [r7, #8]
 8005614:	f000 f860 	bl	80056d8 <FLASH_DATAEEPROM_FastProgramWord>
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]
 800561c:	e001      	b.n	8005622 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else
    {
      status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005622:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 8005624:	2200      	movs	r2, #0
 8005626:	741a      	strb	r2, [r3, #16]

  return status;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20004b3c 	.word	0x20004b3c

08005638 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005648:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800564c:	f7ff fea0 	bl	8005390 <FLASH_WaitForLastOperation>
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <FLASH_DATAEEPROM_FastProgramByte+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800565a:	4b0a      	ldr	r3, [pc, #40]	@ (8005684 <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	4a09      	ldr	r2, [pc, #36]	@ (8005684 <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 8005660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005664:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /*!Cat1*/
    /* If the previous operation is completed, proceed to write the new Data */
    *(__IO uint8_t *)Address = Data;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800566c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005670:	f7ff fe8e 	bl	8005390 <FLASH_WaitForLastOperation>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40023c00 	.word	0x40023c00

08005688 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005698:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800569c:	f7ff fe78 	bl	8005390 <FLASH_WaitForLastOperation>
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10e      	bne.n	80056c8 <FLASH_DATAEEPROM_FastProgramHalfWord+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80056aa:	4b0a      	ldr	r3, [pc, #40]	@ (80056d4 <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4a09      	ldr	r2, [pc, #36]	@ (80056d4 <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 80056b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b4:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* !Cat1 */
    /* If the previous operation is completed, proceed to write the new data */
    *(__IO uint16_t *)Address = Data;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	887a      	ldrh	r2, [r7, #2]
 80056ba:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80056c0:	f7ff fe66 	bl	8005390 <FLASH_WaitForLastOperation>
 80056c4:	4603      	mov	r3, r0
 80056c6:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40023c00 	.word	0x40023c00

080056d8 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80056ea:	f7ff fe51 	bl	8005390 <FLASH_WaitForLastOperation>
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10e      	bne.n	8005716 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80056f8:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a08      	ldr	r2, [pc, #32]	@ (8005720 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 80056fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005702:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800570a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800570e:	f7ff fe3f 	bl	8005390 <FLASH_WaitForLastOperation>
 8005712:	4603      	mov	r3, r0
 8005714:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40023c00 	.word	0x40023c00

08005724 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005734:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005738:	f7ff fe2a 	bl	8005390 <FLASH_WaitForLastOperation>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <FLASH_DATAEEPROM_ProgramByte+0x34>
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint8_t *)Address = Data;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800574c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005750:	f7ff fe1e 	bl	8005390 <FLASH_WaitForLastOperation>
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005772:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005776:	f7ff fe0b 	bl	8005390 <FLASH_WaitForLastOperation>
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d108      	bne.n	8005796 <FLASH_DATAEEPROM_ProgramHalfWord+0x34>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint16_t *)Address = Data;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	887a      	ldrh	r2, [r7, #2]
 8005788:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800578a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800578e:	f7ff fdff 	bl	8005390 <FLASH_WaitForLastOperation>
 8005792:	4603      	mov	r3, r0
 8005794:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80057ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80057b2:	f7ff fded 	bl	8005390 <FLASH_WaitForLastOperation>
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d108      	bne.n	80057d2 <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80057c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80057ca:	f7ff fde1 	bl	8005390 <FLASH_WaitForLastOperation>
 80057ce:	4603      	mov	r3, r0
 80057d0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80057f2:	e160      	b.n	8005ab6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	2101      	movs	r1, #1
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	4013      	ands	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8152 	beq.w	8005ab0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d005      	beq.n	8005824 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005820:	2b02      	cmp	r3, #2
 8005822:	d130      	bne.n	8005886 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	2203      	movs	r2, #3
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800585a:	2201      	movs	r2, #1
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43db      	mvns	r3, r3
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4013      	ands	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f003 0201 	and.w	r2, r3, #1
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b03      	cmp	r3, #3
 8005890:	d017      	beq.n	80058c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	2203      	movs	r2, #3
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d123      	bne.n	8005916 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	08da      	lsrs	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3208      	adds	r2, #8
 80058d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	220f      	movs	r2, #15
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4013      	ands	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	08da      	lsrs	r2, r3, #3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3208      	adds	r2, #8
 8005910:	6939      	ldr	r1, [r7, #16]
 8005912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	2203      	movs	r2, #3
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0203 	and.w	r2, r3, #3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80ac 	beq.w	8005ab0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005958:	4b5e      	ldr	r3, [pc, #376]	@ (8005ad4 <HAL_GPIO_Init+0x2f8>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ad4 <HAL_GPIO_Init+0x2f8>)
 800595e:	f043 0301 	orr.w	r3, r3, #1
 8005962:	6213      	str	r3, [r2, #32]
 8005964:	4b5b      	ldr	r3, [pc, #364]	@ (8005ad4 <HAL_GPIO_Init+0x2f8>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005970:	4a59      	ldr	r2, [pc, #356]	@ (8005ad8 <HAL_GPIO_Init+0x2fc>)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	3302      	adds	r3, #2
 8005978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	220f      	movs	r2, #15
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	43db      	mvns	r3, r3
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4013      	ands	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a51      	ldr	r2, [pc, #324]	@ (8005adc <HAL_GPIO_Init+0x300>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d025      	beq.n	80059e8 <HAL_GPIO_Init+0x20c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a50      	ldr	r2, [pc, #320]	@ (8005ae0 <HAL_GPIO_Init+0x304>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d01f      	beq.n	80059e4 <HAL_GPIO_Init+0x208>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a4f      	ldr	r2, [pc, #316]	@ (8005ae4 <HAL_GPIO_Init+0x308>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d019      	beq.n	80059e0 <HAL_GPIO_Init+0x204>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a4e      	ldr	r2, [pc, #312]	@ (8005ae8 <HAL_GPIO_Init+0x30c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d013      	beq.n	80059dc <HAL_GPIO_Init+0x200>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a4d      	ldr	r2, [pc, #308]	@ (8005aec <HAL_GPIO_Init+0x310>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00d      	beq.n	80059d8 <HAL_GPIO_Init+0x1fc>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a4c      	ldr	r2, [pc, #304]	@ (8005af0 <HAL_GPIO_Init+0x314>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d007      	beq.n	80059d4 <HAL_GPIO_Init+0x1f8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a4b      	ldr	r2, [pc, #300]	@ (8005af4 <HAL_GPIO_Init+0x318>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d101      	bne.n	80059d0 <HAL_GPIO_Init+0x1f4>
 80059cc:	2306      	movs	r3, #6
 80059ce:	e00c      	b.n	80059ea <HAL_GPIO_Init+0x20e>
 80059d0:	2307      	movs	r3, #7
 80059d2:	e00a      	b.n	80059ea <HAL_GPIO_Init+0x20e>
 80059d4:	2305      	movs	r3, #5
 80059d6:	e008      	b.n	80059ea <HAL_GPIO_Init+0x20e>
 80059d8:	2304      	movs	r3, #4
 80059da:	e006      	b.n	80059ea <HAL_GPIO_Init+0x20e>
 80059dc:	2303      	movs	r3, #3
 80059de:	e004      	b.n	80059ea <HAL_GPIO_Init+0x20e>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e002      	b.n	80059ea <HAL_GPIO_Init+0x20e>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_GPIO_Init+0x20e>
 80059e8:	2300      	movs	r3, #0
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	f002 0203 	and.w	r2, r2, #3
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	4093      	lsls	r3, r2
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059fa:	4937      	ldr	r1, [pc, #220]	@ (8005ad8 <HAL_GPIO_Init+0x2fc>)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	3302      	adds	r3, #2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a08:	4b3b      	ldr	r3, [pc, #236]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005a2c:	4a32      	ldr	r2, [pc, #200]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a32:	4b31      	ldr	r3, [pc, #196]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005a56:	4a28      	ldr	r2, [pc, #160]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a5c:	4b26      	ldr	r3, [pc, #152]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	43db      	mvns	r3, r3
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a80:	4a1d      	ldr	r2, [pc, #116]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a86:	4b1c      	ldr	r3, [pc, #112]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4013      	ands	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005aaa:	4a13      	ldr	r2, [pc, #76]	@ (8005af8 <HAL_GPIO_Init+0x31c>)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f47f ae97 	bne.w	80057f4 <HAL_GPIO_Init+0x18>
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40020000 	.word	0x40020000
 8005ae0:	40020400 	.word	0x40020400
 8005ae4:	40020800 	.word	0x40020800
 8005ae8:	40020c00 	.word	0x40020c00
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40021400 	.word	0x40021400
 8005af4:	40021800 	.word	0x40021800
 8005af8:	40010400 	.word	0x40010400

08005afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	887b      	ldrh	r3, [r7, #2]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
 8005b18:	e001      	b.n	8005b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr

08005b2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	807b      	strh	r3, [r7, #2]
 8005b36:	4613      	mov	r3, r2
 8005b38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b3a:	787b      	ldrb	r3, [r7, #1]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b40:	887a      	ldrh	r2, [r7, #2]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005b46:	e003      	b.n	8005b50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	041a      	lsls	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	619a      	str	r2, [r3, #24]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr
	...

08005b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b66:	4b08      	ldr	r3, [pc, #32]	@ (8005b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b72:	4a05      	ldr	r2, [pc, #20]	@ (8005b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b78:	88fb      	ldrh	r3, [r7, #6]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fb ff30 	bl	80019e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40010400 	.word	0x40010400

08005b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e31d      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b9e:	4b94      	ldr	r3, [pc, #592]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ba8:	4b91      	ldr	r3, [pc, #580]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bb0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d07b      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d006      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d10f      	bne.n	8005bea <HAL_RCC_OscConfig+0x5e>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd0:	d10b      	bne.n	8005bea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd2:	4b87      	ldr	r3, [pc, #540]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d06a      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x128>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d166      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e2f7      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d106      	bne.n	8005c00 <HAL_RCC_OscConfig+0x74>
 8005bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e02d      	b.n	8005c5c <HAL_RCC_OscConfig+0xd0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10c      	bne.n	8005c22 <HAL_RCC_OscConfig+0x96>
 8005c08:	4b79      	ldr	r3, [pc, #484]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a78      	ldr	r2, [pc, #480]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	4b76      	ldr	r3, [pc, #472]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a75      	ldr	r2, [pc, #468]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	e01c      	b.n	8005c5c <HAL_RCC_OscConfig+0xd0>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCC_OscConfig+0xb8>
 8005c2a:	4b71      	ldr	r3, [pc, #452]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a70      	ldr	r2, [pc, #448]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4b6e      	ldr	r3, [pc, #440]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a6d      	ldr	r2, [pc, #436]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e00b      	b.n	8005c5c <HAL_RCC_OscConfig+0xd0>
 8005c44:	4b6a      	ldr	r3, [pc, #424]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a69      	ldr	r2, [pc, #420]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	4b67      	ldr	r3, [pc, #412]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a66      	ldr	r2, [pc, #408]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d013      	beq.n	8005c8c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c64:	f7ff f9dc 	bl	8005020 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c6c:	f7ff f9d8 	bl	8005020 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	@ 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e2ad      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0xe0>
 8005c8a:	e014      	b.n	8005cb6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8c:	f7ff f9c8 	bl	8005020 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c94:	f7ff f9c4 	bl	8005020 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	@ 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e299      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ca6:	4b52      	ldr	r3, [pc, #328]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <HAL_RCC_OscConfig+0x108>
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d05a      	beq.n	8005d78 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2b0c      	cmp	r3, #12
 8005ccc:	d119      	bne.n	8005d02 <HAL_RCC_OscConfig+0x176>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d116      	bne.n	8005d02 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd4:	4b46      	ldr	r3, [pc, #280]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_RCC_OscConfig+0x160>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e276      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cec:	4b40      	ldr	r3, [pc, #256]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	493d      	ldr	r1, [pc, #244]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d00:	e03a      	b.n	8005d78 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d020      	beq.n	8005d4c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8005df4 <HAL_RCC_OscConfig+0x268>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7ff f986 	bl	8005020 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d18:	f7ff f982 	bl	8005020 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e257      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d2a:	4b31      	ldr	r3, [pc, #196]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d36:	4b2e      	ldr	r3, [pc, #184]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	492a      	ldr	r1, [pc, #168]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	604b      	str	r3, [r1, #4]
 8005d4a:	e015      	b.n	8005d78 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d4c:	4b29      	ldr	r3, [pc, #164]	@ (8005df4 <HAL_RCC_OscConfig+0x268>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d52:	f7ff f965 	bl	8005020 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d5a:	f7ff f961 	bl	8005020 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e236      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d6c:	4b20      	ldr	r3, [pc, #128]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f0      	bne.n	8005d5a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80b8 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d170      	bne.n	8005e6e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d8c:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_OscConfig+0x218>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e21a      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1a      	ldr	r2, [r3, #32]
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d921      	bls.n	8005df8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fc7d 	bl	80066b8 <RCC_SetFlashLatencyFromMSIRange>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e208      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dc8:	4b09      	ldr	r3, [pc, #36]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	4906      	ldr	r1, [pc, #24]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dda:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	061b      	lsls	r3, r3, #24
 8005de8:	4901      	ldr	r1, [pc, #4]	@ (8005df0 <HAL_RCC_OscConfig+0x264>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	604b      	str	r3, [r1, #4]
 8005dee:	e020      	b.n	8005e32 <HAL_RCC_OscConfig+0x2a6>
 8005df0:	40023800 	.word	0x40023800
 8005df4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005df8:	4b99      	ldr	r3, [pc, #612]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	4996      	ldr	r1, [pc, #600]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e0a:	4b95      	ldr	r3, [pc, #596]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	061b      	lsls	r3, r3, #24
 8005e18:	4991      	ldr	r1, [pc, #580]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fc48 	bl	80066b8 <RCC_SetFlashLatencyFromMSIRange>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e1d3      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	0b5b      	lsrs	r3, r3, #13
 8005e38:	3301      	adds	r3, #1
 8005e3a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005e42:	4a87      	ldr	r2, [pc, #540]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005e44:	6892      	ldr	r2, [r2, #8]
 8005e46:	0912      	lsrs	r2, r2, #4
 8005e48:	f002 020f 	and.w	r2, r2, #15
 8005e4c:	4985      	ldr	r1, [pc, #532]	@ (8006064 <HAL_RCC_OscConfig+0x4d8>)
 8005e4e:	5c8a      	ldrb	r2, [r1, r2]
 8005e50:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005e52:	4a85      	ldr	r2, [pc, #532]	@ (8006068 <HAL_RCC_OscConfig+0x4dc>)
 8005e54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e56:	4b85      	ldr	r3, [pc, #532]	@ (800606c <HAL_RCC_OscConfig+0x4e0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff f894 	bl	8004f88 <HAL_InitTick>
 8005e60:	4603      	mov	r3, r0
 8005e62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d045      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	e1b5      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d029      	beq.n	8005eca <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e76:	4b7e      	ldr	r3, [pc, #504]	@ (8006070 <HAL_RCC_OscConfig+0x4e4>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7c:	f7ff f8d0 	bl	8005020 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e84:	f7ff f8cc 	bl	8005020 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e1a1      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e96:	4b72      	ldr	r3, [pc, #456]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	496c      	ldr	r1, [pc, #432]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	061b      	lsls	r3, r3, #24
 8005ec2:	4967      	ldr	r1, [pc, #412]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	604b      	str	r3, [r1, #4]
 8005ec8:	e015      	b.n	8005ef6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005eca:	4b69      	ldr	r3, [pc, #420]	@ (8006070 <HAL_RCC_OscConfig+0x4e4>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed0:	f7ff f8a6 	bl	8005020 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ed8:	f7ff f8a2 	bl	8005020 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e177      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005eea:	4b5d      	ldr	r3, [pc, #372]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d030      	beq.n	8005f64 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8006074 <HAL_RCC_OscConfig+0x4e8>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f10:	f7ff f886 	bl	8005020 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f18:	f7ff f882 	bl	8005020 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e157      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f2a:	4b4d      	ldr	r3, [pc, #308]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x38c>
 8005f36:	e015      	b.n	8005f64 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f38:	4b4e      	ldr	r3, [pc, #312]	@ (8006074 <HAL_RCC_OscConfig+0x4e8>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3e:	f7ff f86f 	bl	8005020 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f46:	f7ff f86b 	bl	8005020 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e140      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f58:	4b41      	ldr	r3, [pc, #260]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f0      	bne.n	8005f46 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80b5 	beq.w	80060dc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f72:	2300      	movs	r3, #0
 8005f74:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f76:	4b3a      	ldr	r3, [pc, #232]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f82:	4b37      	ldr	r3, [pc, #220]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	4a36      	ldr	r2, [pc, #216]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f8c:	6253      	str	r3, [r2, #36]	@ 0x24
 8005f8e:	4b34      	ldr	r3, [pc, #208]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b36      	ldr	r3, [pc, #216]	@ (8006078 <HAL_RCC_OscConfig+0x4ec>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d118      	bne.n	8005fdc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005faa:	4b33      	ldr	r3, [pc, #204]	@ (8006078 <HAL_RCC_OscConfig+0x4ec>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a32      	ldr	r2, [pc, #200]	@ (8006078 <HAL_RCC_OscConfig+0x4ec>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb6:	f7ff f833 	bl	8005020 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbe:	f7ff f82f 	bl	8005020 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b64      	cmp	r3, #100	@ 0x64
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e104      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	4b29      	ldr	r3, [pc, #164]	@ (8006078 <HAL_RCC_OscConfig+0x4ec>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x466>
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fee:	6353      	str	r3, [r2, #52]	@ 0x34
 8005ff0:	e02d      	b.n	800604e <HAL_RCC_OscConfig+0x4c2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x488>
 8005ffa:	4b19      	ldr	r3, [pc, #100]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ffe:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8006000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006004:	6353      	str	r3, [r2, #52]	@ 0x34
 8006006:	4b16      	ldr	r3, [pc, #88]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 800600c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006010:	6353      	str	r3, [r2, #52]	@ 0x34
 8006012:	e01c      	b.n	800604e <HAL_RCC_OscConfig+0x4c2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b05      	cmp	r3, #5
 800601a:	d10c      	bne.n	8006036 <HAL_RCC_OscConfig+0x4aa>
 800601c:	4b10      	ldr	r3, [pc, #64]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 800601e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006020:	4a0f      	ldr	r2, [pc, #60]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8006022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006026:	6353      	str	r3, [r2, #52]	@ 0x34
 8006028:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 800602a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602c:	4a0c      	ldr	r2, [pc, #48]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 800602e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006032:	6353      	str	r3, [r2, #52]	@ 0x34
 8006034:	e00b      	b.n	800604e <HAL_RCC_OscConfig+0x4c2>
 8006036:	4b0a      	ldr	r3, [pc, #40]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8006038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603a:	4a09      	ldr	r2, [pc, #36]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 800603c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006040:	6353      	str	r3, [r2, #52]	@ 0x34
 8006042:	4b07      	ldr	r3, [pc, #28]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8006044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006046:	4a06      	ldr	r2, [pc, #24]	@ (8006060 <HAL_RCC_OscConfig+0x4d4>)
 8006048:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800604c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d024      	beq.n	80060a0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006056:	f7fe ffe3 	bl	8005020 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800605c:	e019      	b.n	8006092 <HAL_RCC_OscConfig+0x506>
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800
 8006064:	0800f5fc 	.word	0x0800f5fc
 8006068:	20000004 	.word	0x20000004
 800606c:	20000008 	.word	0x20000008
 8006070:	42470020 	.word	0x42470020
 8006074:	42470680 	.word	0x42470680
 8006078:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800607c:	f7fe ffd0 	bl	8005020 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e0a3      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006092:	4b54      	ldr	r3, [pc, #336]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 8006094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0ee      	beq.n	800607c <HAL_RCC_OscConfig+0x4f0>
 800609e:	e014      	b.n	80060ca <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a0:	f7fe ffbe 	bl	8005020 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060a6:	e00a      	b.n	80060be <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a8:	f7fe ffba 	bl	8005020 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e08d      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060be:	4b49      	ldr	r3, [pc, #292]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 80060c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1ee      	bne.n	80060a8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060ca:	7ffb      	ldrb	r3, [r7, #31]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d105      	bne.n	80060dc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d0:	4b44      	ldr	r3, [pc, #272]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	4a43      	ldr	r2, [pc, #268]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 80060d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060da:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d079      	beq.n	80061d8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2b0c      	cmp	r3, #12
 80060e8:	d056      	beq.n	8006198 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d13b      	bne.n	800616a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f2:	4b3d      	ldr	r3, [pc, #244]	@ (80061e8 <HAL_RCC_OscConfig+0x65c>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fe ff92 	bl	8005020 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006100:	f7fe ff8e 	bl	8005020 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e063      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006112:	4b34      	ldr	r3, [pc, #208]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800611e:	4b31      	ldr	r3, [pc, #196]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	4319      	orrs	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006134:	430b      	orrs	r3, r1
 8006136:	492b      	ldr	r1, [pc, #172]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 8006138:	4313      	orrs	r3, r2
 800613a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800613c:	4b2a      	ldr	r3, [pc, #168]	@ (80061e8 <HAL_RCC_OscConfig+0x65c>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006142:	f7fe ff6d 	bl	8005020 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614a:	f7fe ff69 	bl	8005020 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e03e      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800615c:	4b21      	ldr	r3, [pc, #132]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f0      	beq.n	800614a <HAL_RCC_OscConfig+0x5be>
 8006168:	e036      	b.n	80061d8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800616a:	4b1f      	ldr	r3, [pc, #124]	@ (80061e8 <HAL_RCC_OscConfig+0x65c>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fe ff56 	bl	8005020 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006178:	f7fe ff52 	bl	8005020 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e027      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800618a:	4b16      	ldr	r3, [pc, #88]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f0      	bne.n	8006178 <HAL_RCC_OscConfig+0x5ec>
 8006196:	e01f      	b.n	80061d8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e01a      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061a4:	4b0f      	ldr	r3, [pc, #60]	@ (80061e4 <HAL_RCC_OscConfig+0x658>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d10d      	bne.n	80061d4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d106      	bne.n	80061d4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d001      	beq.n	80061d8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800
 80061e8:	42470060 	.word	0x42470060

080061ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e11a      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006200:	4b8f      	ldr	r3, [pc, #572]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d919      	bls.n	8006242 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d105      	bne.n	8006220 <HAL_RCC_ClockConfig+0x34>
 8006214:	4b8a      	ldr	r3, [pc, #552]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a89      	ldr	r2, [pc, #548]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 800621a:	f043 0304 	orr.w	r3, r3, #4
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b87      	ldr	r3, [pc, #540]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f023 0201 	bic.w	r2, r3, #1
 8006228:	4985      	ldr	r1, [pc, #532]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006230:	4b83      	ldr	r3, [pc, #524]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d001      	beq.n	8006242 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e0f9      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800624e:	4b7d      	ldr	r3, [pc, #500]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	497a      	ldr	r1, [pc, #488]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 800625c:	4313      	orrs	r3, r2
 800625e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 808e 	beq.w	800638a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d107      	bne.n	8006286 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006276:	4b73      	ldr	r3, [pc, #460]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d121      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e0d7      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d107      	bne.n	800629e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800628e:	4b6d      	ldr	r3, [pc, #436]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d115      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e0cb      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d107      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062a6:	4b67      	ldr	r3, [pc, #412]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e0bf      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80062b6:	4b63      	ldr	r3, [pc, #396]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e0b7      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062c6:	4b5f      	ldr	r3, [pc, #380]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f023 0203 	bic.w	r2, r3, #3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	495c      	ldr	r1, [pc, #368]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062d8:	f7fe fea2 	bl	8005020 <HAL_GetTick>
 80062dc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d112      	bne.n	800630c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062e6:	e00a      	b.n	80062fe <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e8:	f7fe fe9a 	bl	8005020 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e09b      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062fe:	4b51      	ldr	r3, [pc, #324]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 030c 	and.w	r3, r3, #12
 8006306:	2b08      	cmp	r3, #8
 8006308:	d1ee      	bne.n	80062e8 <HAL_RCC_ClockConfig+0xfc>
 800630a:	e03e      	b.n	800638a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d112      	bne.n	800633a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006314:	e00a      	b.n	800632c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006316:	f7fe fe83 	bl	8005020 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006324:	4293      	cmp	r3, r2
 8006326:	d901      	bls.n	800632c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e084      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800632c:	4b45      	ldr	r3, [pc, #276]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 030c 	and.w	r3, r3, #12
 8006334:	2b0c      	cmp	r3, #12
 8006336:	d1ee      	bne.n	8006316 <HAL_RCC_ClockConfig+0x12a>
 8006338:	e027      	b.n	800638a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d11d      	bne.n	800637e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006342:	e00a      	b.n	800635a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006344:	f7fe fe6c 	bl	8005020 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d901      	bls.n	800635a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e06d      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800635a:	4b3a      	ldr	r3, [pc, #232]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 030c 	and.w	r3, r3, #12
 8006362:	2b04      	cmp	r3, #4
 8006364:	d1ee      	bne.n	8006344 <HAL_RCC_ClockConfig+0x158>
 8006366:	e010      	b.n	800638a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006368:	f7fe fe5a 	bl	8005020 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e05b      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800637e:	4b31      	ldr	r3, [pc, #196]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1ee      	bne.n	8006368 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800638a:	4b2d      	ldr	r3, [pc, #180]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d219      	bcs.n	80063cc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d105      	bne.n	80063aa <HAL_RCC_ClockConfig+0x1be>
 800639e:	4b28      	ldr	r3, [pc, #160]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a27      	ldr	r2, [pc, #156]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 80063a4:	f043 0304 	orr.w	r3, r3, #4
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b25      	ldr	r3, [pc, #148]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	4923      	ldr	r1, [pc, #140]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ba:	4b21      	ldr	r3, [pc, #132]	@ (8006440 <HAL_RCC_ClockConfig+0x254>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e034      	b.n	8006436 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4917      	ldr	r1, [pc, #92]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f6:	4b13      	ldr	r3, [pc, #76]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	490f      	ldr	r1, [pc, #60]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 8006406:	4313      	orrs	r3, r2
 8006408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800640a:	f000 f823 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 800640e:	4602      	mov	r2, r0
 8006410:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <HAL_RCC_ClockConfig+0x258>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	490b      	ldr	r1, [pc, #44]	@ (8006448 <HAL_RCC_ClockConfig+0x25c>)
 800641c:	5ccb      	ldrb	r3, [r1, r3]
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	4a0a      	ldr	r2, [pc, #40]	@ (800644c <HAL_RCC_ClockConfig+0x260>)
 8006424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <HAL_RCC_ClockConfig+0x264>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fdac 	bl	8004f88 <HAL_InitTick>
 8006430:	4603      	mov	r3, r0
 8006432:	72fb      	strb	r3, [r7, #11]

  return status;
 8006434:	7afb      	ldrb	r3, [r7, #11]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40023c00 	.word	0x40023c00
 8006444:	40023800 	.word	0x40023800
 8006448:	0800f5fc 	.word	0x0800f5fc
 800644c:	20000004 	.word	0x20000004
 8006450:	20000008 	.word	0x20000008

08006454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006458:	b092      	sub	sp, #72	@ 0x48
 800645a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800645c:	4b79      	ldr	r3, [pc, #484]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006464:	f003 030c 	and.w	r3, r3, #12
 8006468:	2b0c      	cmp	r3, #12
 800646a:	d00d      	beq.n	8006488 <HAL_RCC_GetSysClockFreq+0x34>
 800646c:	2b0c      	cmp	r3, #12
 800646e:	f200 80d5 	bhi.w	800661c <HAL_RCC_GetSysClockFreq+0x1c8>
 8006472:	2b04      	cmp	r3, #4
 8006474:	d002      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x28>
 8006476:	2b08      	cmp	r3, #8
 8006478:	d003      	beq.n	8006482 <HAL_RCC_GetSysClockFreq+0x2e>
 800647a:	e0cf      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800647c:	4b72      	ldr	r3, [pc, #456]	@ (8006648 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800647e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006480:	e0da      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006482:	4b72      	ldr	r3, [pc, #456]	@ (800664c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006484:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006486:	e0d7      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800648a:	0c9b      	lsrs	r3, r3, #18
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	4b6f      	ldr	r3, [pc, #444]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006492:	5c9b      	ldrb	r3, [r3, r2]
 8006494:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006498:	0d9b      	lsrs	r3, r3, #22
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	3301      	adds	r3, #1
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064a2:	4b68      	ldr	r3, [pc, #416]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d05d      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80064ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b0:	2200      	movs	r2, #0
 80064b2:	4618      	mov	r0, r3
 80064b4:	4611      	mov	r1, r2
 80064b6:	4604      	mov	r4, r0
 80064b8:	460d      	mov	r5, r1
 80064ba:	4622      	mov	r2, r4
 80064bc:	462b      	mov	r3, r5
 80064be:	f04f 0000 	mov.w	r0, #0
 80064c2:	f04f 0100 	mov.w	r1, #0
 80064c6:	0159      	lsls	r1, r3, #5
 80064c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064cc:	0150      	lsls	r0, r2, #5
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4621      	mov	r1, r4
 80064d4:	1a51      	subs	r1, r2, r1
 80064d6:	6139      	str	r1, [r7, #16]
 80064d8:	4629      	mov	r1, r5
 80064da:	eb63 0301 	sbc.w	r3, r3, r1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064ec:	4659      	mov	r1, fp
 80064ee:	018b      	lsls	r3, r1, #6
 80064f0:	4651      	mov	r1, sl
 80064f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064f6:	4651      	mov	r1, sl
 80064f8:	018a      	lsls	r2, r1, #6
 80064fa:	46d4      	mov	ip, sl
 80064fc:	ebb2 080c 	subs.w	r8, r2, ip
 8006500:	4659      	mov	r1, fp
 8006502:	eb63 0901 	sbc.w	r9, r3, r1
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800651a:	4690      	mov	r8, r2
 800651c:	4699      	mov	r9, r3
 800651e:	4623      	mov	r3, r4
 8006520:	eb18 0303 	adds.w	r3, r8, r3
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	462b      	mov	r3, r5
 8006528:	eb49 0303 	adc.w	r3, r9, r3
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800653a:	4629      	mov	r1, r5
 800653c:	024b      	lsls	r3, r1, #9
 800653e:	4620      	mov	r0, r4
 8006540:	4629      	mov	r1, r5
 8006542:	4604      	mov	r4, r0
 8006544:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006548:	4601      	mov	r1, r0
 800654a:	024a      	lsls	r2, r1, #9
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006552:	2200      	movs	r2, #0
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006556:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800655c:	f7fa fe16 	bl	800118c <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4613      	mov	r3, r2
 8006566:	647b      	str	r3, [r7, #68]	@ 0x44
 8006568:	e055      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656c:	2200      	movs	r2, #0
 800656e:	623b      	str	r3, [r7, #32]
 8006570:	627a      	str	r2, [r7, #36]	@ 0x24
 8006572:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006576:	4642      	mov	r2, r8
 8006578:	464b      	mov	r3, r9
 800657a:	f04f 0000 	mov.w	r0, #0
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	0159      	lsls	r1, r3, #5
 8006584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006588:	0150      	lsls	r0, r2, #5
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	46c4      	mov	ip, r8
 8006590:	ebb2 0a0c 	subs.w	sl, r2, ip
 8006594:	4640      	mov	r0, r8
 8006596:	4649      	mov	r1, r9
 8006598:	468c      	mov	ip, r1
 800659a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065b2:	ebb2 040a 	subs.w	r4, r2, sl
 80065b6:	eb63 050b 	sbc.w	r5, r3, fp
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	00eb      	lsls	r3, r5, #3
 80065c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065c8:	00e2      	lsls	r2, r4, #3
 80065ca:	4614      	mov	r4, r2
 80065cc:	461d      	mov	r5, r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	18e3      	adds	r3, r4, r3
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	460b      	mov	r3, r1
 80065d6:	eb45 0303 	adc.w	r3, r5, r3
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065e8:	4629      	mov	r1, r5
 80065ea:	028b      	lsls	r3, r1, #10
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	4604      	mov	r4, r0
 80065f2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80065f6:	4601      	mov	r1, r0
 80065f8:	028a      	lsls	r2, r1, #10
 80065fa:	4610      	mov	r0, r2
 80065fc:	4619      	mov	r1, r3
 80065fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006600:	2200      	movs	r2, #0
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	61fa      	str	r2, [r7, #28]
 8006606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800660a:	f7fa fdbf 	bl	800118c <__aeabi_uldivmod>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4613      	mov	r3, r2
 8006614:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8006616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006618:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800661a:	e00d      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800661c:	4b09      	ldr	r3, [pc, #36]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	0b5b      	lsrs	r3, r3, #13
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	3301      	adds	r3, #1
 800662c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8006636:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800663a:	4618      	mov	r0, r3
 800663c:	3748      	adds	r7, #72	@ 0x48
 800663e:	46bd      	mov	sp, r7
 8006640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	00f42400 	.word	0x00f42400
 800664c:	007a1200 	.word	0x007a1200
 8006650:	0800f5f0 	.word	0x0800f5f0

08006654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006658:	4b02      	ldr	r3, [pc, #8]	@ (8006664 <HAL_RCC_GetHCLKFreq+0x10>)
 800665a:	681b      	ldr	r3, [r3, #0]
}
 800665c:	4618      	mov	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr
 8006664:	20000004 	.word	0x20000004

08006668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800666c:	f7ff fff2 	bl	8006654 <HAL_RCC_GetHCLKFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	0a1b      	lsrs	r3, r3, #8
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4903      	ldr	r1, [pc, #12]	@ (800668c <HAL_RCC_GetPCLK1Freq+0x24>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006684:	4618      	mov	r0, r3
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40023800 	.word	0x40023800
 800668c:	0800f60c 	.word	0x0800f60c

08006690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006694:	f7ff ffde 	bl	8006654 <HAL_RCC_GetHCLKFreq>
 8006698:	4602      	mov	r2, r0
 800669a:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	0adb      	lsrs	r3, r3, #11
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	4903      	ldr	r1, [pc, #12]	@ (80066b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066a6:	5ccb      	ldrb	r3, [r1, r3]
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40023800 	.word	0x40023800
 80066b4:	0800f60c 	.word	0x0800f60c

080066b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80066c0:	2300      	movs	r3, #0
 80066c2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80066c4:	4b29      	ldr	r3, [pc, #164]	@ (800676c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d12c      	bne.n	800672a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80066d0:	4b26      	ldr	r3, [pc, #152]	@ (800676c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80066dc:	4b24      	ldr	r3, [pc, #144]	@ (8006770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	e016      	b.n	8006716 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e8:	4b20      	ldr	r3, [pc, #128]	@ (800676c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	4a1f      	ldr	r2, [pc, #124]	@ (800676c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f2:	6253      	str	r3, [r2, #36]	@ 0x24
 80066f4:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006700:	4b1b      	ldr	r3, [pc, #108]	@ (8006770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8006708:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800670a:	4b18      	ldr	r3, [pc, #96]	@ (800676c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	4a17      	ldr	r2, [pc, #92]	@ (800676c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006714:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800671c:	d105      	bne.n	800672a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006724:	d101      	bne.n	800672a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8006726:	2301      	movs	r3, #1
 8006728:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d105      	bne.n	800673c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8006730:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a0f      	ldr	r2, [pc, #60]	@ (8006774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006736:	f043 0304 	orr.w	r3, r3, #4
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	4b0d      	ldr	r3, [pc, #52]	@ (8006774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f023 0201 	bic.w	r2, r3, #1
 8006744:	490b      	ldr	r1, [pc, #44]	@ (8006774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800674c:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	429a      	cmp	r2, r3
 8006758:	d001      	beq.n	800675e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40023800 	.word	0x40023800
 8006770:	40007000 	.word	0x40007000
 8006774:	40023c00 	.word	0x40023c00

08006778 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80ed 	beq.w	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800679a:	2300      	movs	r3, #0
 800679c:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800679e:	4b78      	ldr	r3, [pc, #480]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80067a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067aa:	4b75      	ldr	r3, [pc, #468]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	4a74      	ldr	r2, [pc, #464]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80067b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b4:	6253      	str	r3, [r2, #36]	@ 0x24
 80067b6:	4b72      	ldr	r3, [pc, #456]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067be:	60bb      	str	r3, [r7, #8]
 80067c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d118      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80067d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067de:	f7fe fc1f 	bl	8005020 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e4:	e008      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e6:	f7fe fc1b 	bl	8005020 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b64      	cmp	r3, #100	@ 0x64
 80067f2:	d901      	bls.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e0be      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f8:	4b62      	ldr	r3, [pc, #392]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006804:	4b5e      	ldr	r3, [pc, #376]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800680c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	429a      	cmp	r2, r3
 800681a:	d106      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	429a      	cmp	r2, r3
 8006828:	d00f      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006832:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006836:	d108      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006838:	4b51      	ldr	r3, [pc, #324]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006844:	d101      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e095      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800684a:	4b4d      	ldr	r3, [pc, #308]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800684c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006852:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d041      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d005      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10c      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	429a      	cmp	r2, r3
 8006880:	d02d      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d027      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800688e:	4b3c      	ldr	r3, [pc, #240]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006892:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006896:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006898:	4b3b      	ldr	r3, [pc, #236]	@ (8006988 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800689a:	2201      	movs	r2, #1
 800689c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800689e:	4b3a      	ldr	r3, [pc, #232]	@ (8006988 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80068a4:	4a36      	ldr	r2, [pc, #216]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6353      	str	r3, [r2, #52]	@ 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d014      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b4:	f7fe fbb4 	bl	8005020 <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ba:	e00a      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068bc:	f7fe fbb0 	bl	8005020 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e051      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80068d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0ee      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068f6:	d10a      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80068f8:	4b21      	ldr	r3, [pc, #132]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006908:	491d      	ldr	r1, [pc, #116]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800690a:	4313      	orrs	r3, r2
 800690c:	600b      	str	r3, [r1, #0]
 800690e:	4b1c      	ldr	r3, [pc, #112]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800691a:	4919      	ldr	r1, [pc, #100]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800691c:	4313      	orrs	r3, r2
 800691e:	634b      	str	r3, [r1, #52]	@ 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01a      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006934:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006938:	d10a      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800693a:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800694a:	490d      	ldr	r1, [pc, #52]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800694c:	4313      	orrs	r3, r2
 800694e:	600b      	str	r3, [r1, #0]
 8006950:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800695c:	4908      	ldr	r1, [pc, #32]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800695e:	4313      	orrs	r3, r2
 8006960:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d105      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006968:	4b05      	ldr	r3, [pc, #20]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800696a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696c:	4a04      	ldr	r2, [pc, #16]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800696e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006972:	6253      	str	r3, [r2, #36]	@ 0x24
    }
  }

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40023800 	.word	0x40023800
 8006984:	40007000 	.word	0x40007000
 8006988:	424706dc 	.word	0x424706dc

0800698c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e073      	b.n	8006a86 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	7f5b      	ldrb	r3, [r3, #29]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fd fc72 	bl	8004298 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d055      	beq.n	8006a74 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	22ca      	movs	r2, #202	@ 0xca
 80069ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2253      	movs	r2, #83	@ 0x53
 80069d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fa48 	bl	8006e6e <RTC_EnterInitMode>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d12c      	bne.n	8006a42 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80069f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069fa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6899      	ldr	r1, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68d2      	ldr	r2, [r2, #12]
 8006a22:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6919      	ldr	r1, [r3, #16]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	041a      	lsls	r2, r3, #16
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa4f 	bl	8006edc <RTC_ExitInitMode>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d110      	bne.n	8006a6a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a56:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	22ff      	movs	r2, #255	@ 0xff
 8006a70:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a72:	e001      	b.n	8006a78 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a8e:	b590      	push	{r4, r7, lr}
 8006a90:	b087      	sub	sp, #28
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	7f1b      	ldrb	r3, [r3, #28]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_RTC_SetTime+0x1c>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e087      	b.n	8006bba <HAL_RTC_SetTime+0x12c>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d126      	bne.n	8006b0a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2200      	movs	r2, #0
 8006ace:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fa26 	bl	8006f26 <RTC_ByteToBcd2>
 8006ada:	4603      	mov	r3, r0
 8006adc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fa1f 	bl	8006f26 <RTC_ByteToBcd2>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006aec:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	789b      	ldrb	r3, [r3, #2]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fa17 	bl	8006f26 <RTC_ByteToBcd2>
 8006af8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006afa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	78db      	ldrb	r3, [r3, #3]
 8006b02:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b04:	4313      	orrs	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e018      	b.n	8006b3c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b2a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b30:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	78db      	ldrb	r3, [r3, #3]
 8006b36:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	22ca      	movs	r2, #202	@ 0xca
 8006b42:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2253      	movs	r2, #83	@ 0x53
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f98e 	bl	8006e6e <RTC_EnterInitMode>
 8006b52:	4603      	mov	r3, r0
 8006b54:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b56:	7cfb      	ldrb	r3, [r7, #19]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d120      	bne.n	8006b9e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006b66:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006b6a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006b7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6899      	ldr	r1, [r3, #8]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f9a1 	bl	8006edc <RTC_ExitInitMode>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	22ff      	movs	r2, #255	@ 0xff
 8006bb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	771a      	strb	r2, [r3, #28]

  return status;
 8006bb8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd90      	pop	{r4, r7, pc}

08006bc2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b086      	sub	sp, #24
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(RTC_SUBSECOND_SUPPORT)
  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	609a      	str	r2, [r3, #8]
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006bf4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	0c1b      	lsrs	r3, r3, #16
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	0d9b      	lsrs	r3, r3, #22
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d11a      	bne.n	8006c74 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f98c 	bl	8006f60 <RTC_Bcd2ToByte>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 f983 	bl	8006f60 <RTC_Bcd2ToByte>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	789b      	ldrb	r3, [r3, #2]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f97a 	bl	8006f60 <RTC_Bcd2ToByte>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c7e:	b590      	push	{r4, r7, lr}
 8006c80:	b087      	sub	sp, #28
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	7f1b      	ldrb	r3, [r3, #28]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_RTC_SetDate+0x1c>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e071      	b.n	8006d7e <HAL_RTC_SetDate+0x100>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10e      	bne.n	8006cca <HAL_RTC_SetDate+0x4c>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	f023 0310 	bic.w	r3, r3, #16
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	330a      	adds	r3, #10
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d11c      	bne.n	8006d0a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	78db      	ldrb	r3, [r3, #3]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f926 	bl	8006f26 <RTC_ByteToBcd2>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 f91f 	bl	8006f26 <RTC_ByteToBcd2>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	789b      	ldrb	r3, [r3, #2]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f917 	bl	8006f26 <RTC_ByteToBcd2>
 8006cf8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006cfa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e00e      	b.n	8006d28 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	78db      	ldrb	r3, [r3, #3]
 8006d0e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d16:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d1c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	22ca      	movs	r2, #202	@ 0xca
 8006d2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2253      	movs	r2, #83	@ 0x53
 8006d36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f898 	bl	8006e6e <RTC_EnterInitMode>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d42:	7cfb      	ldrb	r3, [r7, #19]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10c      	bne.n	8006d62 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006d56:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 f8bf 	bl	8006edc <RTC_ExitInitMode>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006d62:	7cfb      	ldrb	r3, [r7, #19]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	22ff      	movs	r2, #255	@ 0xff
 8006d74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	771a      	strb	r2, [r3, #28]

  return status;
 8006d7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd90      	pop	{r4, r7, pc}

08006d86 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b086      	sub	sp, #24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006da0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006da4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	0c1b      	lsrs	r3, r3, #16
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	0b5b      	lsrs	r3, r3, #13
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d11a      	bne.n	8006e1a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	78db      	ldrb	r3, [r3, #3]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 f8b9 	bl	8006f60 <RTC_Bcd2ToByte>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 f8b0 	bl	8006f60 <RTC_Bcd2ToByte>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	789b      	ldrb	r3, [r3, #2]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f8a7 	bl	8006f60 <RTC_Bcd2ToByte>
 8006e12:	4603      	mov	r3, r0
 8006e14:	461a      	mov	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f64f 7257 	movw	r2, #65367	@ 0xff57
 8006e38:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e3a:	f7fe f8f1 	bl	8005020 <HAL_GetTick>
 8006e3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e40:	e009      	b.n	8006e56 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e42:	f7fe f8ed 	bl	8005020 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e50:	d901      	bls.n	8006e56 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e007      	b.n	8006e66 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0ee      	beq.n	8006e42 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d122      	bne.n	8006ed2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e9c:	f7fe f8c0 	bl	8005020 <HAL_GetTick>
 8006ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ea2:	e00c      	b.n	8006ebe <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ea4:	f7fe f8bc 	bl	8005020 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eb2:	d904      	bls.n	8006ebe <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <RTC_EnterInitMode+0x64>
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d1e8      	bne.n	8006ea4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ef6:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff ff8c 	bl	8006e24 <HAL_RTC_WaitForSynchro>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d004      	beq.n	8006f1c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2204      	movs	r2, #4
 8006f16:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006f34:	e005      	b.n	8006f42 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	3b0a      	subs	r3, #10
 8006f40:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	2b09      	cmp	r3, #9
 8006f46:	d8f6      	bhi.n	8006f36 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b2db      	uxtb	r3, r3
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	091b      	lsrs	r3, r3, #4
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	b2db      	uxtb	r3, r3
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr

08006f9a <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b086      	sub	sp, #24
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	7f1b      	ldrb	r3, [r3, #28]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e08a      	b.n	80070cc <HAL_RTCEx_SetWakeUpTimer+0x132>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	22ca      	movs	r2, #202	@ 0xca
 8006fc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2253      	movs	r2, #83	@ 0x53
 8006fd0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01e      	beq.n	800701e <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8006fe0:	f7fe f81e 	bl	8005020 <HAL_GetTick>
 8006fe4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8006fe6:	e013      	b.n	8007010 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fe8:	f7fe f81a 	bl	8005020 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ff6:	d90b      	bls.n	8007010 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	22ff      	movs	r2, #255	@ 0xff
 8006ffe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2203      	movs	r2, #3
 8007004:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e05d      	b.n	80070cc <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e4      	bne.n	8006fe8 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800702c:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	b2da      	uxtb	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800703e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007040:	f7fd ffee 	bl	8005020 <HAL_GetTick>
 8007044:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007046:	e013      	b.n	8007070 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007048:	f7fd ffea 	bl	8005020 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007056:	d90b      	bls.n	8007070 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	22ff      	movs	r2, #255	@ 0xff
 800705e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2203      	movs	r2, #3
 8007064:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e02d      	b.n	80070cc <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0e4      	beq.n	8007048 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0207 	bic.w	r2, r2, #7
 800708c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6899      	ldr	r1, [r3, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	430a      	orrs	r2, r1
 800709c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	22ff      	movs	r2, #255	@ 0xff
 80070bc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e07b      	b.n	80071de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d108      	bne.n	8007100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070f6:	d009      	beq.n	800710c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	61da      	str	r2, [r3, #28]
 80070fe:	e005      	b.n	800710c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fd fbc8 	bl	80048bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007190:	ea42 0103 	orr.w	r1, r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	0c1b      	lsrs	r3, r3, #16
 80071aa:	f003 0104 	and.w	r1, r3, #4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b2:	f003 0210 	and.w	r2, r3, #16
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b088      	sub	sp, #32
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f6:	f7fd ff13 	bl	8005020 <HAL_GetTick>
 80071fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80071fc:	88fb      	ldrh	r3, [r7, #6]
 80071fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d001      	beq.n	8007210 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800720c:	2302      	movs	r3, #2
 800720e:	e12a      	b.n	8007466 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_SPI_Transmit+0x36>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e122      	b.n	8007466 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_SPI_Transmit+0x48>
 800722a:	2302      	movs	r3, #2
 800722c:	e11b      	b.n	8007466 <HAL_SPI_Transmit+0x280>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2203      	movs	r2, #3
 800723a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	88fa      	ldrh	r2, [r7, #6]
 800724e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	88fa      	ldrh	r2, [r7, #6]
 8007254:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800727c:	d10f      	bne.n	800729e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800728c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800729c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a8:	2b40      	cmp	r3, #64	@ 0x40
 80072aa:	d007      	beq.n	80072bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072c4:	d152      	bne.n	800736c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <HAL_SPI_Transmit+0xee>
 80072ce:	8b7b      	ldrh	r3, [r7, #26]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d145      	bne.n	8007360 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e4:	1c9a      	adds	r2, r3, #2
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072f8:	e032      	b.n	8007360 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b02      	cmp	r3, #2
 8007306:	d112      	bne.n	800732e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730c:	881a      	ldrh	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007318:	1c9a      	adds	r2, r3, #2
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800732c:	e018      	b.n	8007360 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800732e:	f7fd fe77 	bl	8005020 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d803      	bhi.n	8007346 <HAL_SPI_Transmit+0x160>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d102      	bne.n	800734c <HAL_SPI_Transmit+0x166>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d109      	bne.n	8007360 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e082      	b.n	8007466 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1c7      	bne.n	80072fa <HAL_SPI_Transmit+0x114>
 800736a:	e053      	b.n	8007414 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <HAL_SPI_Transmit+0x194>
 8007374:	8b7b      	ldrh	r3, [r7, #26]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d147      	bne.n	800740a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073a0:	e033      	b.n	800740a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d113      	bne.n	80073d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80073d6:	e018      	b.n	800740a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073d8:	f7fd fe22 	bl	8005020 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d803      	bhi.n	80073f0 <HAL_SPI_Transmit+0x20a>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d102      	bne.n	80073f6 <HAL_SPI_Transmit+0x210>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e02d      	b.n	8007466 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1c6      	bne.n	80073a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fcf7 	bl	8007e0c <SPI_EndRxTxTransaction>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007464:	2300      	movs	r3, #0
  }
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES 
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af02      	add	r7, sp, #8
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4613      	mov	r3, r2
 800747c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d001      	beq.n	800748e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800748a:	2302      	movs	r3, #2
 800748c:	e104      	b.n	8007698 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_SPI_Receive+0x2c>
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e0fc      	b.n	8007698 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074a6:	d112      	bne.n	80074ce <HAL_SPI_Receive+0x60>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10e      	bne.n	80074ce <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2204      	movs	r2, #4
 80074b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f8eb 	bl	80076a0 <HAL_SPI_TransmitReceive>
 80074ca:	4603      	mov	r3, r0
 80074cc:	e0e4      	b.n	8007698 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ce:	f7fd fda7 	bl	8005020 <HAL_GetTick>
 80074d2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_SPI_Receive+0x74>
 80074de:	2302      	movs	r3, #2
 80074e0:	e0da      	b.n	8007698 <HAL_SPI_Receive+0x22a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2204      	movs	r2, #4
 80074ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	88fa      	ldrh	r2, [r7, #6]
 8007502:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007530:	d10f      	bne.n	8007552 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007550:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755c:	2b40      	cmp	r3, #64	@ 0x40
 800755e:	d007      	beq.n	8007570 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800756e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d170      	bne.n	800765a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007578:	e035      	b.n	80075e6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b01      	cmp	r3, #1
 8007586:	d115      	bne.n	80075b4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f103 020c 	add.w	r2, r3, #12
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075b2:	e018      	b.n	80075e6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b4:	f7fd fd34 	bl	8005020 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d803      	bhi.n	80075cc <HAL_SPI_Receive+0x15e>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ca:	d102      	bne.n	80075d2 <HAL_SPI_Receive+0x164>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e058      	b.n	8007698 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1c4      	bne.n	800757a <HAL_SPI_Receive+0x10c>
 80075f0:	e038      	b.n	8007664 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d113      	bne.n	8007628 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760a:	b292      	uxth	r2, r2
 800760c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007612:	1c9a      	adds	r2, r3, #2
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007626:	e018      	b.n	800765a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007628:	f7fd fcfa 	bl	8005020 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d803      	bhi.n	8007640 <HAL_SPI_Receive+0x1d2>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	d102      	bne.n	8007646 <HAL_SPI_Receive+0x1d8>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e01e      	b.n	8007698 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1c6      	bne.n	80075f2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fb69 	bl	8007d40 <SPI_EndRxTransaction>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007696:	2300      	movs	r3, #0
  }
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	@ 0x28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076ae:	2301      	movs	r3, #1
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076b2:	f7fd fcb5 	bl	8005020 <HAL_GetTick>
 80076b6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076be:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80076c6:	887b      	ldrh	r3, [r7, #2]
 80076c8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076ca:	7ffb      	ldrb	r3, [r7, #31]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d00c      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x4a>
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076d6:	d106      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x46>
 80076e0:	7ffb      	ldrb	r3, [r7, #31]
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d001      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
 80076e8:	e17f      	b.n	80079ea <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x5c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x5c>
 80076f6:	887b      	ldrh	r3, [r7, #2]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e174      	b.n	80079ea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_SPI_TransmitReceive+0x6e>
 800770a:	2302      	movs	r3, #2
 800770c:	e16d      	b.n	80079ea <HAL_SPI_TransmitReceive+0x34a>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b04      	cmp	r3, #4
 8007720:	d003      	beq.n	800772a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2205      	movs	r2, #5
 8007726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	887a      	ldrh	r2, [r7, #2]
 800773a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	887a      	ldrh	r2, [r7, #2]
 8007740:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	887a      	ldrh	r2, [r7, #2]
 800774c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	887a      	ldrh	r2, [r7, #2]
 8007752:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776a:	2b40      	cmp	r3, #64	@ 0x40
 800776c:	d007      	beq.n	800777e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800777c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007786:	d17e      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_SPI_TransmitReceive+0xf6>
 8007790:	8afb      	ldrh	r3, [r7, #22]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d16c      	bne.n	8007870 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a6:	1c9a      	adds	r2, r3, #2
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ba:	e059      	b.n	8007870 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d11b      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x162>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d016      	beq.n	8007802 <HAL_SPI_TransmitReceive+0x162>
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d113      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077de:	881a      	ldrh	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	1c9a      	adds	r2, r3, #2
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d119      	bne.n	8007844 <HAL_SPI_TransmitReceive+0x1a4>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d014      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007824:	b292      	uxth	r2, r2
 8007826:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782c:	1c9a      	adds	r2, r3, #2
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007840:	2301      	movs	r3, #1
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007844:	f7fd fbec 	bl	8005020 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007850:	429a      	cmp	r2, r3
 8007852:	d80d      	bhi.n	8007870 <HAL_SPI_TransmitReceive+0x1d0>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d009      	beq.n	8007870 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e0bc      	b.n	80079ea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1a0      	bne.n	80077bc <HAL_SPI_TransmitReceive+0x11c>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d19b      	bne.n	80077bc <HAL_SPI_TransmitReceive+0x11c>
 8007884:	e082      	b.n	800798c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <HAL_SPI_TransmitReceive+0x1f4>
 800788e:	8afb      	ldrh	r3, [r7, #22]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d171      	bne.n	8007978 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	330c      	adds	r3, #12
 800789e:	7812      	ldrb	r2, [r2, #0]
 80078a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078ba:	e05d      	b.n	8007978 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d11c      	bne.n	8007904 <HAL_SPI_TransmitReceive+0x264>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d017      	beq.n	8007904 <HAL_SPI_TransmitReceive+0x264>
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d114      	bne.n	8007904 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	330c      	adds	r3, #12
 80078e4:	7812      	ldrb	r2, [r2, #0]
 80078e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b01      	cmp	r3, #1
 8007910:	d119      	bne.n	8007946 <HAL_SPI_TransmitReceive+0x2a6>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d014      	beq.n	8007946 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007942:	2301      	movs	r3, #1
 8007944:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007946:	f7fd fb6b 	bl	8005020 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007952:	429a      	cmp	r2, r3
 8007954:	d803      	bhi.n	800795e <HAL_SPI_TransmitReceive+0x2be>
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d102      	bne.n	8007964 <HAL_SPI_TransmitReceive+0x2c4>
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	2b00      	cmp	r3, #0
 8007962:	d109      	bne.n	8007978 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e038      	b.n	80079ea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d19c      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x21c>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d197      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800798c:	6a3a      	ldr	r2, [r7, #32]
 800798e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fa3b 	bl	8007e0c <SPI_EndRxTxTransaction>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d008      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e01d      	b.n	80079ea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e000      	b.n	80079ea <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80079e8:	2300      	movs	r3, #0
  }
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3728      	adds	r7, #40	@ 0x28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	099b      	lsrs	r3, r3, #6
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10f      	bne.n	8007a38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	099b      	lsrs	r3, r3, #6
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d004      	beq.n	8007a38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	4798      	blx	r3
    return;
 8007a36:	e0d7      	b.n	8007be8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00a      	beq.n	8007a5a <HAL_SPI_IRQHandler+0x66>
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	09db      	lsrs	r3, r3, #7
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d004      	beq.n	8007a5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	4798      	blx	r3
    return;
 8007a58:	e0c6      	b.n	8007be8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	095b      	lsrs	r3, r3, #5
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10c      	bne.n	8007a80 <HAL_SPI_IRQHandler+0x8c>
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	099b      	lsrs	r3, r3, #6
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	0a1b      	lsrs	r3, r3, #8
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80b4 	beq.w	8007be8 <HAL_SPI_IRQHandler+0x1f4>
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 80ad 	beq.w	8007be8 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	099b      	lsrs	r3, r3, #6
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d023      	beq.n	8007ae2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d011      	beq.n	8007aca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aaa:	f043 0204 	orr.w	r2, r3, #4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	e00b      	b.n	8007ae2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	693b      	ldr	r3, [r7, #16]
        return;
 8007ae0:	e082      	b.n	8007be8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d014      	beq.n	8007b18 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af2:	f043 0201 	orr.w	r2, r3, #1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	0a1b      	lsrs	r3, r3, #8
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00c      	beq.n	8007b3e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b28:	f043 0208 	orr.w	r2, r3, #8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b30:	2300      	movs	r3, #0
 8007b32:	60bb      	str	r3, [r7, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	60bb      	str	r3, [r7, #8]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d04f      	beq.n	8007be6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b54:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d104      	bne.n	8007b72 <HAL_SPI_IRQHandler+0x17e>
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d034      	beq.n	8007bdc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0203 	bic.w	r2, r2, #3
 8007b80:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d011      	beq.n	8007bae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8e:	4a18      	ldr	r2, [pc, #96]	@ (8007bf0 <HAL_SPI_IRQHandler+0x1fc>)
 8007b90:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fd fbb8 	bl	800530c <HAL_DMA_Abort_IT>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d016      	beq.n	8007be4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bba:	4a0d      	ldr	r2, [pc, #52]	@ (8007bf0 <HAL_SPI_IRQHandler+0x1fc>)
 8007bbc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fd fba2 	bl	800530c <HAL_DMA_Abort_IT>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007bda:	e003      	b.n	8007be4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f809 	bl	8007bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007be2:	e000      	b.n	8007be6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007be4:	bf00      	nop
    return;
 8007be6:	bf00      	nop
  }
}
 8007be8:	3720      	adds	r7, #32
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	08007c07 	.word	0x08007c07

08007bf4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr

08007c06 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c12:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff ffe7 	bl	8007bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c40:	f7fd f9ee 	bl	8005020 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c50:	f7fd f9e6 	bl	8005020 <HAL_GetTick>
 8007c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c56:	4b39      	ldr	r3, [pc, #228]	@ (8007d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	015b      	lsls	r3, r3, #5
 8007c5c:	0d1b      	lsrs	r3, r3, #20
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	fb02 f303 	mul.w	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c66:	e054      	b.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d050      	beq.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c70:	f7fd f9d6 	bl	8005020 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d902      	bls.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d13d      	bne.n	8007d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c9e:	d111      	bne.n	8007cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca8:	d004      	beq.n	8007cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cb2:	d107      	bne.n	8007cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ccc:	d10f      	bne.n	8007cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e017      	b.n	8007d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	bf0c      	ite	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	2300      	movne	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d19b      	bne.n	8007c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000004 	.word	0x20000004

08007d40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d54:	d111      	bne.n	8007d7a <SPI_EndRxTransaction+0x3a>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d5e:	d004      	beq.n	8007d6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d68:	d107      	bne.n	8007d7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d82:	d12a      	bne.n	8007dda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d8c:	d012      	beq.n	8007db4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2200      	movs	r2, #0
 8007d96:	2180      	movs	r1, #128	@ 0x80
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7ff ff49 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d02d      	beq.n	8007e00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da8:	f043 0220 	orr.w	r2, r3, #32
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e026      	b.n	8007e02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f7ff ff36 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01a      	beq.n	8007e00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dce:	f043 0220 	orr.w	r2, r3, #32
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e013      	b.n	8007e02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2200      	movs	r2, #0
 8007de2:	2101      	movs	r1, #1
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff ff23 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df4:	f043 0220 	orr.w	r2, r3, #32
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e000      	b.n	8007e02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	2102      	movs	r1, #2
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff ff04 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d007      	beq.n	8007e3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e32:	f043 0220 	orr.w	r2, r3, #32
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e032      	b.n	8007ea4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007eac <SPI_EndRxTxTransaction+0xa0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb0 <SPI_EndRxTxTransaction+0xa4>)
 8007e44:	fba2 2303 	umull	r2, r3, r2, r3
 8007e48:	0d5b      	lsrs	r3, r3, #21
 8007e4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e5c:	d112      	bne.n	8007e84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2200      	movs	r2, #0
 8007e66:	2180      	movs	r1, #128	@ 0x80
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff fee1 	bl	8007c30 <SPI_WaitFlagStateUntilTimeout>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d016      	beq.n	8007ea2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e78:	f043 0220 	orr.w	r2, r3, #32
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e00f      	b.n	8007ea4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9a:	2b80      	cmp	r3, #128	@ 0x80
 8007e9c:	d0f2      	beq.n	8007e84 <SPI_EndRxTxTransaction+0x78>
 8007e9e:	e000      	b.n	8007ea2 <SPI_EndRxTxTransaction+0x96>
        break;
 8007ea0:	bf00      	nop
  }

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20000004 	.word	0x20000004
 8007eb0:	165e9f81 	.word	0x165e9f81

08007eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e031      	b.n	8007f2a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7fc ff68 	bl	8004db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f000 fa72 	bl	80083dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d001      	beq.n	8007f4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e032      	b.n	8007fb2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5c:	d00e      	beq.n	8007f7c <HAL_TIM_Base_Start+0x48>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a16      	ldr	r2, [pc, #88]	@ (8007fbc <HAL_TIM_Base_Start+0x88>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d009      	beq.n	8007f7c <HAL_TIM_Base_Start+0x48>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a14      	ldr	r2, [pc, #80]	@ (8007fc0 <HAL_TIM_Base_Start+0x8c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d004      	beq.n	8007f7c <HAL_TIM_Base_Start+0x48>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a13      	ldr	r2, [pc, #76]	@ (8007fc4 <HAL_TIM_Base_Start+0x90>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d111      	bne.n	8007fa0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b06      	cmp	r3, #6
 8007f8c:	d010      	beq.n	8007fb0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f042 0201 	orr.w	r2, r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9e:	e007      	b.n	8007fb0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0201 	orr.w	r2, r2, #1
 8007fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	40000800 	.word	0x40000800
 8007fc4:	40010800 	.word	0x40010800

08007fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d001      	beq.n	8007fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e03a      	b.n	8008056 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0201 	orr.w	r2, r2, #1
 8007ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008000:	d00e      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x58>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a16      	ldr	r2, [pc, #88]	@ (8008060 <HAL_TIM_Base_Start_IT+0x98>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x58>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a14      	ldr	r2, [pc, #80]	@ (8008064 <HAL_TIM_Base_Start_IT+0x9c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x58>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a13      	ldr	r2, [pc, #76]	@ (8008068 <HAL_TIM_Base_Start_IT+0xa0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d111      	bne.n	8008044 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b06      	cmp	r3, #6
 8008030:	d010      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0201 	orr.w	r2, r2, #1
 8008040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008042:	e007      	b.n	8008054 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0201 	orr.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	bc80      	pop	{r7}
 800805e:	4770      	bx	lr
 8008060:	40000400 	.word	0x40000400
 8008064:	40000800 	.word	0x40000800
 8008068:	40010800 	.word	0x40010800

0800806c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d020      	beq.n	80080d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01b      	beq.n	80080d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f06f 0202 	mvn.w	r2, #2
 80080a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	f003 0303 	and.w	r3, r3, #3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f974 	bl	80083a4 <HAL_TIM_IC_CaptureCallback>
 80080bc:	e005      	b.n	80080ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f967 	bl	8008392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f976 	bl	80083b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f003 0304 	and.w	r3, r3, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d020      	beq.n	800811c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01b      	beq.n	800811c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0204 	mvn.w	r2, #4
 80080ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2202      	movs	r2, #2
 80080f2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f94e 	bl	80083a4 <HAL_TIM_IC_CaptureCallback>
 8008108:	e005      	b.n	8008116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f941 	bl	8008392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f950 	bl	80083b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d020      	beq.n	8008168 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f003 0308 	and.w	r3, r3, #8
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01b      	beq.n	8008168 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0208 	mvn.w	r2, #8
 8008138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2204      	movs	r2, #4
 800813e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f928 	bl	80083a4 <HAL_TIM_IC_CaptureCallback>
 8008154:	e005      	b.n	8008162 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f91b 	bl	8008392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f92a 	bl	80083b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	2b00      	cmp	r3, #0
 8008170:	d020      	beq.n	80081b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01b      	beq.n	80081b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f06f 0210 	mvn.w	r2, #16
 8008184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2208      	movs	r2, #8
 800818a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f902 	bl	80083a4 <HAL_TIM_IC_CaptureCallback>
 80081a0:	e005      	b.n	80081ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f8f5 	bl	8008392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f904 	bl	80083b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00c      	beq.n	80081d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0201 	mvn.w	r2, #1
 80081d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fa fd70 	bl	8002cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00c      	beq.n	80081fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8e6 	bl	80083c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081fc:	bf00      	nop
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_TIM_ConfigClockSource+0x1c>
 800821c:	2302      	movs	r3, #2
 800821e:	e0b4      	b.n	800838a <HAL_TIM_ConfigClockSource+0x186>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800823e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008258:	d03e      	beq.n	80082d8 <HAL_TIM_ConfigClockSource+0xd4>
 800825a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800825e:	f200 8087 	bhi.w	8008370 <HAL_TIM_ConfigClockSource+0x16c>
 8008262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008266:	f000 8086 	beq.w	8008376 <HAL_TIM_ConfigClockSource+0x172>
 800826a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800826e:	d87f      	bhi.n	8008370 <HAL_TIM_ConfigClockSource+0x16c>
 8008270:	2b70      	cmp	r3, #112	@ 0x70
 8008272:	d01a      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0xa6>
 8008274:	2b70      	cmp	r3, #112	@ 0x70
 8008276:	d87b      	bhi.n	8008370 <HAL_TIM_ConfigClockSource+0x16c>
 8008278:	2b60      	cmp	r3, #96	@ 0x60
 800827a:	d050      	beq.n	800831e <HAL_TIM_ConfigClockSource+0x11a>
 800827c:	2b60      	cmp	r3, #96	@ 0x60
 800827e:	d877      	bhi.n	8008370 <HAL_TIM_ConfigClockSource+0x16c>
 8008280:	2b50      	cmp	r3, #80	@ 0x50
 8008282:	d03c      	beq.n	80082fe <HAL_TIM_ConfigClockSource+0xfa>
 8008284:	2b50      	cmp	r3, #80	@ 0x50
 8008286:	d873      	bhi.n	8008370 <HAL_TIM_ConfigClockSource+0x16c>
 8008288:	2b40      	cmp	r3, #64	@ 0x40
 800828a:	d058      	beq.n	800833e <HAL_TIM_ConfigClockSource+0x13a>
 800828c:	2b40      	cmp	r3, #64	@ 0x40
 800828e:	d86f      	bhi.n	8008370 <HAL_TIM_ConfigClockSource+0x16c>
 8008290:	2b30      	cmp	r3, #48	@ 0x30
 8008292:	d064      	beq.n	800835e <HAL_TIM_ConfigClockSource+0x15a>
 8008294:	2b30      	cmp	r3, #48	@ 0x30
 8008296:	d86b      	bhi.n	8008370 <HAL_TIM_ConfigClockSource+0x16c>
 8008298:	2b20      	cmp	r3, #32
 800829a:	d060      	beq.n	800835e <HAL_TIM_ConfigClockSource+0x15a>
 800829c:	2b20      	cmp	r3, #32
 800829e:	d867      	bhi.n	8008370 <HAL_TIM_ConfigClockSource+0x16c>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d05c      	beq.n	800835e <HAL_TIM_ConfigClockSource+0x15a>
 80082a4:	2b10      	cmp	r3, #16
 80082a6:	d05a      	beq.n	800835e <HAL_TIM_ConfigClockSource+0x15a>
 80082a8:	e062      	b.n	8008370 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082ba:	f000 f97c 	bl	80085b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80082cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	609a      	str	r2, [r3, #8]
      break;
 80082d6:	e04f      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082e8:	f000 f965 	bl	80085b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689a      	ldr	r2, [r3, #8]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082fa:	609a      	str	r2, [r3, #8]
      break;
 80082fc:	e03c      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800830a:	461a      	mov	r2, r3
 800830c:	f000 f8dc 	bl	80084c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2150      	movs	r1, #80	@ 0x50
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f933 	bl	8008582 <TIM_ITRx_SetConfig>
      break;
 800831c:	e02c      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800832a:	461a      	mov	r2, r3
 800832c:	f000 f8fa 	bl	8008524 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2160      	movs	r1, #96	@ 0x60
 8008336:	4618      	mov	r0, r3
 8008338:	f000 f923 	bl	8008582 <TIM_ITRx_SetConfig>
      break;
 800833c:	e01c      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800834a:	461a      	mov	r2, r3
 800834c:	f000 f8bc 	bl	80084c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2140      	movs	r1, #64	@ 0x40
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f913 	bl	8008582 <TIM_ITRx_SetConfig>
      break;
 800835c:	e00c      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4619      	mov	r1, r3
 8008368:	4610      	mov	r0, r2
 800836a:	f000 f90a 	bl	8008582 <TIM_ITRx_SetConfig>
      break;
 800836e:	e003      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	73fb      	strb	r3, [r7, #15]
      break;
 8008374:	e000      	b.n	8008378 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr

080083b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr

080083c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr
	...

080083dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f2:	d00f      	beq.n	8008414 <TIM_Base_SetConfig+0x38>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a2e      	ldr	r2, [pc, #184]	@ (80084b0 <TIM_Base_SetConfig+0xd4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00b      	beq.n	8008414 <TIM_Base_SetConfig+0x38>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a2d      	ldr	r2, [pc, #180]	@ (80084b4 <TIM_Base_SetConfig+0xd8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d007      	beq.n	8008414 <TIM_Base_SetConfig+0x38>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a2c      	ldr	r2, [pc, #176]	@ (80084b8 <TIM_Base_SetConfig+0xdc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_Base_SetConfig+0x38>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a2b      	ldr	r2, [pc, #172]	@ (80084bc <TIM_Base_SetConfig+0xe0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d108      	bne.n	8008426 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800841a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842c:	d017      	beq.n	800845e <TIM_Base_SetConfig+0x82>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a1f      	ldr	r2, [pc, #124]	@ (80084b0 <TIM_Base_SetConfig+0xd4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <TIM_Base_SetConfig+0x82>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a1e      	ldr	r2, [pc, #120]	@ (80084b4 <TIM_Base_SetConfig+0xd8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00f      	beq.n	800845e <TIM_Base_SetConfig+0x82>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a1d      	ldr	r2, [pc, #116]	@ (80084b8 <TIM_Base_SetConfig+0xdc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00b      	beq.n	800845e <TIM_Base_SetConfig+0x82>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a1c      	ldr	r2, [pc, #112]	@ (80084bc <TIM_Base_SetConfig+0xe0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d007      	beq.n	800845e <TIM_Base_SetConfig+0x82>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a1b      	ldr	r2, [pc, #108]	@ (80084c0 <TIM_Base_SetConfig+0xe4>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d003      	beq.n	800845e <TIM_Base_SetConfig+0x82>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a1a      	ldr	r2, [pc, #104]	@ (80084c4 <TIM_Base_SetConfig+0xe8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d108      	bne.n	8008470 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f043 0204 	orr.w	r2, r3, #4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	601a      	str	r2, [r3, #0]
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40000c00 	.word	0x40000c00
 80084bc:	40010800 	.word	0x40010800
 80084c0:	40010c00 	.word	0x40010c00
 80084c4:	40011000 	.word	0x40011000

080084c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	f023 0201 	bic.w	r2, r3, #1
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f023 030a 	bic.w	r3, r3, #10
 8008504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	621a      	str	r2, [r3, #32]
}
 800851a:	bf00      	nop
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	bc80      	pop	{r7}
 8008522:	4770      	bx	lr

08008524 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	f023 0210 	bic.w	r2, r3, #16
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800854e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	031b      	lsls	r3, r3, #12
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4313      	orrs	r3, r2
 8008558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008560:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	621a      	str	r2, [r3, #32]
}
 8008578:	bf00      	nop
 800857a:	371c      	adds	r7, #28
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr

08008582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008582:	b480      	push	{r7}
 8008584:	b085      	sub	sp, #20
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	f043 0307 	orr.w	r3, r3, #7
 80085a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	609a      	str	r2, [r3, #8]
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr

080085b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b087      	sub	sp, #28
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	607a      	str	r2, [r7, #4]
 80085c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	021a      	lsls	r2, r3, #8
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	431a      	orrs	r2, r3
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	4313      	orrs	r3, r2
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	609a      	str	r2, [r3, #8]
}
 80085ea:	bf00      	nop
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr

080085f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008608:	2302      	movs	r3, #2
 800860a:	e046      	b.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864e:	d00e      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a13      	ldr	r2, [pc, #76]	@ (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d009      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a12      	ldr	r2, [pc, #72]	@ (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a10      	ldr	r2, [pc, #64]	@ (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d10c      	bne.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	4313      	orrs	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000800 	.word	0x40000800
 80086ac:	40010800 	.word	0x40010800

080086b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e042      	b.n	8008748 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fc fbcc 	bl	8004e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2224      	movs	r2, #36	@ 0x24
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80086f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fdcb 	bl	8009290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691a      	ldr	r2, [r3, #16]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2220      	movs	r2, #32
 800873c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08a      	sub	sp, #40	@ 0x28
 8008754:	af02      	add	r7, sp, #8
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	4613      	mov	r3, r2
 800875e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b20      	cmp	r3, #32
 800876e:	d175      	bne.n	800885c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <HAL_UART_Transmit+0x2c>
 8008776:	88fb      	ldrh	r3, [r7, #6]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e06e      	b.n	800885e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2221      	movs	r2, #33	@ 0x21
 800878a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800878e:	f7fc fc47 	bl	8005020 <HAL_GetTick>
 8008792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	88fa      	ldrh	r2, [r7, #6]
 8008798:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	88fa      	ldrh	r2, [r7, #6]
 800879e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a8:	d108      	bne.n	80087bc <HAL_UART_Transmit+0x6c>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d104      	bne.n	80087bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	e003      	b.n	80087c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087c4:	e02e      	b.n	8008824 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2200      	movs	r2, #0
 80087ce:	2180      	movs	r1, #128	@ 0x80
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 fb32 	bl	8008e3a <UART_WaitOnFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e03a      	b.n	800885e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10b      	bne.n	8008806 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	3302      	adds	r3, #2
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	e007      	b.n	8008816 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800881a:	b29b      	uxth	r3, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1cb      	bne.n	80087c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2200      	movs	r2, #0
 8008836:	2140      	movs	r1, #64	@ 0x40
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 fafe 	bl	8008e3a <UART_WaitOnFlagUntilTimeout>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2220      	movs	r2, #32
 8008848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e006      	b.n	800885e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	e000      	b.n	800885e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800885c:	2302      	movs	r3, #2
  }
}
 800885e:	4618      	mov	r0, r3
 8008860:	3720      	adds	r7, #32
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	4613      	mov	r3, r2
 8008872:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b20      	cmp	r3, #32
 800887e:	d112      	bne.n	80088a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <HAL_UART_Receive_IT+0x26>
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e00b      	b.n	80088a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	461a      	mov	r2, r3
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fb25 	bl	8008eec <UART_Start_Receive_IT>
 80088a2:	4603      	mov	r3, r0
 80088a4:	e000      	b.n	80088a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80088a6:	2302      	movs	r3, #2
  }
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b0ba      	sub	sp, #232	@ 0xe8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80088dc:	2300      	movs	r3, #0
 80088de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80088ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10f      	bne.n	8008916 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <HAL_UART_IRQHandler+0x66>
 8008902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fbff 	bl	8009112 <UART_Receive_IT>
      return;
 8008914:	e271      	b.n	8008dfa <HAL_UART_IRQHandler+0x54a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80de 	beq.w	8008adc <HAL_UART_IRQHandler+0x22c>
 8008920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d106      	bne.n	800893a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800892c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008930:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 80d1 	beq.w	8008adc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800893a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <HAL_UART_IRQHandler+0xae>
 8008946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800894a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008956:	f043 0201 	orr.w	r2, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800895e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <HAL_UART_IRQHandler+0xd2>
 800896a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800897a:	f043 0202 	orr.w	r2, r3, #2
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <HAL_UART_IRQHandler+0xf6>
 800898e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899e:	f043 0204 	orr.w	r2, r3, #4
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089aa:	f003 0308 	and.w	r3, r3, #8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d011      	beq.n	80089d6 <HAL_UART_IRQHandler+0x126>
 80089b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d105      	bne.n	80089ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ce:	f043 0208 	orr.w	r2, r3, #8
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 8208 	beq.w	8008df0 <HAL_UART_IRQHandler+0x540>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089e4:	f003 0320 	and.w	r3, r3, #32
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d008      	beq.n	80089fe <HAL_UART_IRQHandler+0x14e>
 80089ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fb8a 	bl	8009112 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a08:	2b40      	cmp	r3, #64	@ 0x40
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2301      	moveq	r3, #1
 8008a0e:	2300      	movne	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a1a:	f003 0308 	and.w	r3, r3, #8
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d103      	bne.n	8008a2a <HAL_UART_IRQHandler+0x17a>
 8008a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d04f      	beq.n	8008aca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa97 	bl	8008f5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3a:	2b40      	cmp	r3, #64	@ 0x40
 8008a3c:	d141      	bne.n	8008ac2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3314      	adds	r3, #20
 8008a44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3314      	adds	r3, #20
 8008a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1d9      	bne.n	8008a3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d013      	beq.n	8008aba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a96:	4a89      	ldr	r2, [pc, #548]	@ (8008cbc <HAL_UART_IRQHandler+0x40c>)
 8008a98:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fc fc34 	bl	800530c <HAL_DMA_Abort_IT>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d016      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab8:	e00e      	b.n	8008ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f9a9 	bl	8008e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac0:	e00a      	b.n	8008ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f9a5 	bl	8008e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac8:	e006      	b.n	8008ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9a1 	bl	8008e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008ad6:	e18b      	b.n	8008df0 <HAL_UART_IRQHandler+0x540>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad8:	bf00      	nop
    return;
 8008ada:	e189      	b.n	8008df0 <HAL_UART_IRQHandler+0x540>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	f040 8165 	bne.w	8008db0 <HAL_UART_IRQHandler+0x500>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aea:	f003 0310 	and.w	r3, r3, #16
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 815e 	beq.w	8008db0 <HAL_UART_IRQHandler+0x500>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8157 	beq.w	8008db0 <HAL_UART_IRQHandler+0x500>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b02:	2300      	movs	r3, #0
 8008b04:	60bb      	str	r3, [r7, #8]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60bb      	str	r3, [r7, #8]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	60bb      	str	r3, [r7, #8]
 8008b16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b22:	2b40      	cmp	r3, #64	@ 0x40
 8008b24:	f040 80cc 	bne.w	8008cc0 <HAL_UART_IRQHandler+0x410>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80a8 	beq.w	8008c8e <HAL_UART_IRQHandler+0x3de>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b46:	429a      	cmp	r2, r3
 8008b48:	f080 80a1 	bcs.w	8008c8e <HAL_UART_IRQHandler+0x3de>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	f000 8088 	beq.w	8008c70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	330c      	adds	r3, #12
 8008b66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b6e:	e853 3f00 	ldrex	r3, [r3]
 8008b72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	330c      	adds	r3, #12
 8008b88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008b8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b9c:	e841 2300 	strex	r3, r2, [r1]
 8008ba0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1d9      	bne.n	8008b60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3314      	adds	r3, #20
 8008bb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008bbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bbe:	f023 0301 	bic.w	r3, r3, #1
 8008bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3314      	adds	r3, #20
 8008bcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008bd0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008bd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008bd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008be2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e1      	bne.n	8008bac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3314      	adds	r3, #20
 8008bee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3314      	adds	r3, #20
 8008c08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008c0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008c12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e3      	bne.n	8008be8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	330c      	adds	r3, #12
 8008c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c40:	f023 0310 	bic.w	r3, r3, #16
 8008c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	330c      	adds	r3, #12
 8008c4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e3      	bne.n	8008c2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fc fb11 	bl	8005292 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f8cc 	bl	8008e24 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008c8c:	e0b2      	b.n	8008df4 <HAL_UART_IRQHandler+0x544>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c96:	429a      	cmp	r2, r3
 8008c98:	f040 80ac 	bne.w	8008df4 <HAL_UART_IRQHandler+0x544>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	f040 80a6 	bne.w	8008df4 <HAL_UART_IRQHandler+0x544>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f8b5 	bl	8008e24 <HAL_UARTEx_RxEventCallback>
      return;
 8008cba:	e09b      	b.n	8008df4 <HAL_UART_IRQHandler+0x544>
 8008cbc:	08009023 	.word	0x08009023
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 808e 	beq.w	8008df8 <HAL_UART_IRQHandler+0x548>
          && (nb_rx_data > 0U))
 8008cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 8089 	beq.w	8008df8 <HAL_UART_IRQHandler+0x548>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	330c      	adds	r3, #12
 8008cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	330c      	adds	r3, #12
 8008d06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008d0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e3      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3314      	adds	r3, #20
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	f023 0301 	bic.w	r3, r3, #1
 8008d34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008d42:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e3      	bne.n	8008d1e <HAL_UART_IRQHandler+0x46e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	330c      	adds	r3, #12
 8008d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0310 	bic.w	r3, r3, #16
 8008d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	330c      	adds	r3, #12
 8008d84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008d88:	61fa      	str	r2, [r7, #28]
 8008d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	69b9      	ldr	r1, [r7, #24]
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	617b      	str	r3, [r7, #20]
   return(result);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e3      	bne.n	8008d64 <HAL_UART_IRQHandler+0x4b4>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008da2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f83b 	bl	8008e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dae:	e023      	b.n	8008df8 <HAL_UART_IRQHandler+0x548>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d009      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x520>
 8008dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x520>
  {
    UART_Transmit_IT(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f93b 	bl	8009044 <UART_Transmit_IT>
    return;
 8008dce:	e014      	b.n	8008dfa <HAL_UART_IRQHandler+0x54a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00e      	beq.n	8008dfa <HAL_UART_IRQHandler+0x54a>
 8008ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d008      	beq.n	8008dfa <HAL_UART_IRQHandler+0x54a>
  {
    UART_EndTransmit_IT(huart);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f97a 	bl	80090e2 <UART_EndTransmit_IT>
    return;
 8008dee:	e004      	b.n	8008dfa <HAL_UART_IRQHandler+0x54a>
    return;
 8008df0:	bf00      	nop
 8008df2:	e002      	b.n	8008dfa <HAL_UART_IRQHandler+0x54a>
      return;
 8008df4:	bf00      	nop
 8008df6:	e000      	b.n	8008dfa <HAL_UART_IRQHandler+0x54a>
      return;
 8008df8:	bf00      	nop
  }
}
 8008dfa:	37e8      	adds	r7, #232	@ 0xe8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr

08008e12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr

08008e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr

08008e3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b086      	sub	sp, #24
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	603b      	str	r3, [r7, #0]
 8008e46:	4613      	mov	r3, r2
 8008e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e4a:	e03b      	b.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e52:	d037      	beq.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e54:	f7fc f8e4 	bl	8005020 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	6a3a      	ldr	r2, [r7, #32]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d302      	bcc.n	8008e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e03a      	b.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f003 0304 	and.w	r3, r3, #4
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d023      	beq.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b80      	cmp	r3, #128	@ 0x80
 8008e80:	d020      	beq.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2b40      	cmp	r3, #64	@ 0x40
 8008e86:	d01d      	beq.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d116      	bne.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 f856 	bl	8008f5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2208      	movs	r2, #8
 8008eb6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e00f      	b.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	bf0c      	ite	eq
 8008ed4:	2301      	moveq	r3, #1
 8008ed6:	2300      	movne	r3, #0
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	461a      	mov	r2, r3
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d0b4      	beq.n	8008e4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	88fa      	ldrh	r2, [r7, #6]
 8008f04:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	88fa      	ldrh	r2, [r7, #6]
 8008f0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2222      	movs	r2, #34	@ 0x22
 8008f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d007      	beq.n	8008f32 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	695a      	ldr	r2, [r3, #20]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0201 	orr.w	r2, r2, #1
 8008f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f042 0220 	orr.w	r2, r2, #32
 8008f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr

08008f5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b095      	sub	sp, #84	@ 0x54
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	330c      	adds	r3, #12
 8008f84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f86:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e5      	bne.n	8008f66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3314      	adds	r3, #20
 8008fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	f023 0301 	bic.w	r3, r3, #1
 8008fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3314      	adds	r3, #20
 8008fb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e5      	bne.n	8008f9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d119      	bne.n	800900a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	330c      	adds	r3, #12
 8008fdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f023 0310 	bic.w	r3, r3, #16
 8008fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	330c      	adds	r3, #12
 8008ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ff6:	61ba      	str	r2, [r7, #24]
 8008ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	6979      	ldr	r1, [r7, #20]
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	613b      	str	r3, [r7, #16]
   return(result);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e5      	bne.n	8008fd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009018:	bf00      	nop
 800901a:	3754      	adds	r7, #84	@ 0x54
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr

08009022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff feeb 	bl	8008e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800903c:	bf00      	nop
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b21      	cmp	r3, #33	@ 0x21
 8009056:	d13e      	bne.n	80090d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009060:	d114      	bne.n	800908c <UART_Transmit_IT+0x48>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d110      	bne.n	800908c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800907e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	1c9a      	adds	r2, r3, #2
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	621a      	str	r2, [r3, #32]
 800908a:	e008      	b.n	800909e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	1c59      	adds	r1, r3, #1
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6211      	str	r1, [r2, #32]
 8009096:	781a      	ldrb	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	4619      	mov	r1, r3
 80090ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10f      	bne.n	80090d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	e000      	b.n	80090d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090d6:	2302      	movs	r3, #2
  }
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr

080090e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fe7c 	bl	8008e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b08c      	sub	sp, #48	@ 0x30
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b22      	cmp	r3, #34	@ 0x22
 800912c:	f040 80aa 	bne.w	8009284 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009138:	d115      	bne.n	8009166 <UART_Receive_IT+0x54>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d111      	bne.n	8009166 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009146:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	b29b      	uxth	r3, r3
 8009150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009154:	b29a      	uxth	r2, r3
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915e:	1c9a      	adds	r2, r3, #2
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	629a      	str	r2, [r3, #40]	@ 0x28
 8009164:	e024      	b.n	80091b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009174:	d007      	beq.n	8009186 <UART_Receive_IT+0x74>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <UART_Receive_IT+0x82>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	b2da      	uxtb	r2, r3
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	e008      	b.n	80091a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	4619      	mov	r1, r3
 80091be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d15d      	bne.n	8009280 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0220 	bic.w	r2, r2, #32
 80091d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	695a      	ldr	r2, [r3, #20]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009206:	2b01      	cmp	r3, #1
 8009208:	d135      	bne.n	8009276 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	330c      	adds	r3, #12
 8009216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	613b      	str	r3, [r7, #16]
   return(result);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f023 0310 	bic.w	r3, r3, #16
 8009226:	627b      	str	r3, [r7, #36]	@ 0x24
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	330c      	adds	r3, #12
 800922e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009230:	623a      	str	r2, [r7, #32]
 8009232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	69f9      	ldr	r1, [r7, #28]
 8009236:	6a3a      	ldr	r2, [r7, #32]
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	61bb      	str	r3, [r7, #24]
   return(result);
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e5      	bne.n	8009210 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0310 	and.w	r3, r3, #16
 800924e:	2b10      	cmp	r3, #16
 8009250:	d10a      	bne.n	8009268 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff fdd8 	bl	8008e24 <HAL_UARTEx_RxEventCallback>
 8009274:	e002      	b.n	800927c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7f9 f898 	bl	80023ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	e002      	b.n	8009286 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	e000      	b.n	8009286 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009284:	2302      	movs	r3, #2
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	3730      	adds	r7, #48	@ 0x30
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	431a      	orrs	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	431a      	orrs	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80092d0:	f023 030c 	bic.w	r3, r3, #12
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	6812      	ldr	r2, [r2, #0]
 80092d8:	68b9      	ldr	r1, [r7, #8]
 80092da:	430b      	orrs	r3, r1
 80092dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699a      	ldr	r2, [r3, #24]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a55      	ldr	r2, [pc, #340]	@ (8009450 <UART_SetConfig+0x1c0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d103      	bne.n	8009306 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80092fe:	f7fd f9c7 	bl	8006690 <HAL_RCC_GetPCLK2Freq>
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	e002      	b.n	800930c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009306:	f7fd f9af 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 800930a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009314:	d14c      	bne.n	80093b0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	009a      	lsls	r2, r3, #2
 8009320:	441a      	add	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	fbb2 f3f3 	udiv	r3, r2, r3
 800932c:	4a49      	ldr	r2, [pc, #292]	@ (8009454 <UART_SetConfig+0x1c4>)
 800932e:	fba2 2303 	umull	r2, r3, r2, r3
 8009332:	095b      	lsrs	r3, r3, #5
 8009334:	0119      	lsls	r1, r3, #4
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4613      	mov	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	009a      	lsls	r2, r3, #2
 8009340:	441a      	add	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	fbb2 f2f3 	udiv	r2, r2, r3
 800934c:	4b41      	ldr	r3, [pc, #260]	@ (8009454 <UART_SetConfig+0x1c4>)
 800934e:	fba3 0302 	umull	r0, r3, r3, r2
 8009352:	095b      	lsrs	r3, r3, #5
 8009354:	2064      	movs	r0, #100	@ 0x64
 8009356:	fb00 f303 	mul.w	r3, r0, r3
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	00db      	lsls	r3, r3, #3
 800935e:	3332      	adds	r3, #50	@ 0x32
 8009360:	4a3c      	ldr	r2, [pc, #240]	@ (8009454 <UART_SetConfig+0x1c4>)
 8009362:	fba2 2303 	umull	r2, r3, r2, r3
 8009366:	095b      	lsrs	r3, r3, #5
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800936e:	4419      	add	r1, r3
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	009a      	lsls	r2, r3, #2
 800937a:	441a      	add	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	fbb2 f2f3 	udiv	r2, r2, r3
 8009386:	4b33      	ldr	r3, [pc, #204]	@ (8009454 <UART_SetConfig+0x1c4>)
 8009388:	fba3 0302 	umull	r0, r3, r3, r2
 800938c:	095b      	lsrs	r3, r3, #5
 800938e:	2064      	movs	r0, #100	@ 0x64
 8009390:	fb00 f303 	mul.w	r3, r0, r3
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	3332      	adds	r3, #50	@ 0x32
 800939a:	4a2e      	ldr	r2, [pc, #184]	@ (8009454 <UART_SetConfig+0x1c4>)
 800939c:	fba2 2303 	umull	r2, r3, r2, r3
 80093a0:	095b      	lsrs	r3, r3, #5
 80093a2:	f003 0207 	and.w	r2, r3, #7
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	440a      	add	r2, r1
 80093ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093ae:	e04a      	b.n	8009446 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009a      	lsls	r2, r3, #2
 80093ba:	441a      	add	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c6:	4a23      	ldr	r2, [pc, #140]	@ (8009454 <UART_SetConfig+0x1c4>)
 80093c8:	fba2 2303 	umull	r2, r3, r2, r3
 80093cc:	095b      	lsrs	r3, r3, #5
 80093ce:	0119      	lsls	r1, r3, #4
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009a      	lsls	r2, r3, #2
 80093da:	441a      	add	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80093e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009454 <UART_SetConfig+0x1c4>)
 80093e8:	fba3 0302 	umull	r0, r3, r3, r2
 80093ec:	095b      	lsrs	r3, r3, #5
 80093ee:	2064      	movs	r0, #100	@ 0x64
 80093f0:	fb00 f303 	mul.w	r3, r0, r3
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	3332      	adds	r3, #50	@ 0x32
 80093fa:	4a16      	ldr	r2, [pc, #88]	@ (8009454 <UART_SetConfig+0x1c4>)
 80093fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009400:	095b      	lsrs	r3, r3, #5
 8009402:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009406:	4419      	add	r1, r3
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009a      	lsls	r2, r3, #2
 8009412:	441a      	add	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	fbb2 f2f3 	udiv	r2, r2, r3
 800941e:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <UART_SetConfig+0x1c4>)
 8009420:	fba3 0302 	umull	r0, r3, r3, r2
 8009424:	095b      	lsrs	r3, r3, #5
 8009426:	2064      	movs	r0, #100	@ 0x64
 8009428:	fb00 f303 	mul.w	r3, r0, r3
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	3332      	adds	r3, #50	@ 0x32
 8009432:	4a08      	ldr	r2, [pc, #32]	@ (8009454 <UART_SetConfig+0x1c4>)
 8009434:	fba2 2303 	umull	r2, r3, r2, r3
 8009438:	095b      	lsrs	r3, r3, #5
 800943a:	f003 020f 	and.w	r2, r3, #15
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	440a      	add	r2, r1
 8009444:	609a      	str	r2, [r3, #8]
}
 8009446:	bf00      	nop
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	40013800 	.word	0x40013800
 8009454:	51eb851f 	.word	0x51eb851f

08009458 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800945c:	4904      	ldr	r1, [pc, #16]	@ (8009470 <MX_FATFS_Init+0x18>)
 800945e:	4805      	ldr	r0, [pc, #20]	@ (8009474 <MX_FATFS_Init+0x1c>)
 8009460:	f002 ffdc 	bl	800c41c <FATFS_LinkDriver>
 8009464:	4603      	mov	r3, r0
 8009466:	461a      	mov	r2, r3
 8009468:	4b03      	ldr	r3, [pc, #12]	@ (8009478 <MX_FATFS_Init+0x20>)
 800946a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800946c:	bf00      	nop
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20004b58 	.word	0x20004b58
 8009474:	20000010 	.word	0x20000010
 8009478:	20004b54 	.word	0x20004b54

0800947c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009480:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009482:	4618      	mov	r0, r3
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr

0800948a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	4603      	mov	r3, r0
 8009492:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	/*
    Stat = STA_NOINIT;
    return Stat;
    */
    return USER_SPI_initialize(pdrv);
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f9d6 	bl	8009848 <USER_SPI_initialize>
 800949c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	4603      	mov	r3, r0
 80094ae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	/*
    Stat = STA_NOINIT;
    return Stat;
    */
    return USER_SPI_status(pdrv);
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fab4 	bl	8009a20 <USER_SPI_status>
 80094b8:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	/*
    return RES_OK;
    */
    return USER_SPI_read(pdrv, buff, sector, count);
 80094d2:	7bf8      	ldrb	r0, [r7, #15]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	f000 fab5 	bl	8009a48 <USER_SPI_read>
 80094de:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	/*
    return RES_OK;
    */
	return USER_SPI_write(pdrv, buff, sector, count);
 80094f8:	7bf8      	ldrb	r0, [r7, #15]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	f000 fb08 	bl	8009b14 <USER_SPI_write>
 8009504:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	4603      	mov	r3, r0
 8009516:	603a      	str	r2, [r7, #0]
 8009518:	71fb      	strb	r3, [r7, #7]
 800951a:	460b      	mov	r3, r1
 800951c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	/*
    DRESULT res = RES_ERROR;
    return res;
    */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800951e:	79b9      	ldrb	r1, [r7, #6]
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fb71 	bl	8009c0c <USER_SPI_ioctl>
 800952a:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800952c:	4618      	mov	r0, r3
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800953c:	f7fb fd70 	bl	8005020 <HAL_GetTick>
 8009540:	4603      	mov	r3, r0
 8009542:	4a04      	ldr	r2, [pc, #16]	@ (8009554 <SPI_Timer_On+0x20>)
 8009544:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009546:	4a04      	ldr	r2, [pc, #16]	@ (8009558 <SPI_Timer_On+0x24>)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6013      	str	r3, [r2, #0]
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20004b60 	.word	0x20004b60
 8009558:	20004b64 	.word	0x20004b64

0800955c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009560:	f7fb fd5e 	bl	8005020 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	4b06      	ldr	r3, [pc, #24]	@ (8009580 <SPI_Timer_Status+0x24>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	1ad2      	subs	r2, r2, r3
 800956c:	4b05      	ldr	r3, [pc, #20]	@ (8009584 <SPI_Timer_Status+0x28>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	bf34      	ite	cc
 8009574:	2301      	movcc	r3, #1
 8009576:	2300      	movcs	r3, #0
 8009578:	b2db      	uxtb	r3, r3
}
 800957a:	4618      	mov	r0, r3
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20004b60 	.word	0x20004b60
 8009584:	20004b64 	.word	0x20004b64

08009588 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af02      	add	r7, sp, #8
 800958e:	4603      	mov	r3, r0
 8009590:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009592:	f107 020f 	add.w	r2, r7, #15
 8009596:	1df9      	adds	r1, r7, #7
 8009598:	2332      	movs	r3, #50	@ 0x32
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	2301      	movs	r3, #1
 800959e:	4804      	ldr	r0, [pc, #16]	@ (80095b0 <xchg_spi+0x28>)
 80095a0:	f7fe f87e 	bl	80076a0 <HAL_SPI_TransmitReceive>
    return rxDat;
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20004a14 	.word	0x20004a14

080095b4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80095b4:	b590      	push	{r4, r7, lr}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	e00a      	b.n	80095da <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	18d4      	adds	r4, r2, r3
 80095ca:	20ff      	movs	r0, #255	@ 0xff
 80095cc:	f7ff ffdc 	bl	8009588 <xchg_spi>
 80095d0:	4603      	mov	r3, r0
 80095d2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3301      	adds	r3, #1
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d3f0      	bcc.n	80095c4 <rcvr_spi_multi+0x10>
	}
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd90      	pop	{r4, r7, pc}

080095ec <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	4803      	ldr	r0, [pc, #12]	@ (8009610 <xmit_spi_multi+0x24>)
 8009602:	f7fd fdf0 	bl	80071e6 <HAL_SPI_Transmit>
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20004a14 	.word	0x20004a14

08009614 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800961c:	f7fb fd00 	bl	8005020 <HAL_GetTick>
 8009620:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009626:	20ff      	movs	r0, #255	@ 0xff
 8009628:	f7ff ffae 	bl	8009588 <xchg_spi>
 800962c:	4603      	mov	r3, r0
 800962e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	2bff      	cmp	r3, #255	@ 0xff
 8009634:	d007      	beq.n	8009646 <wait_ready+0x32>
 8009636:	f7fb fcf3 	bl	8005020 <HAL_GetTick>
 800963a:	4602      	mov	r2, r0
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	429a      	cmp	r2, r3
 8009644:	d8ef      	bhi.n	8009626 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	2bff      	cmp	r3, #255	@ 0xff
 800964a:	bf0c      	ite	eq
 800964c:	2301      	moveq	r3, #1
 800964e:	2300      	movne	r3, #0
 8009650:	b2db      	uxtb	r3, r3
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009660:	2201      	movs	r2, #1
 8009662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009666:	4804      	ldr	r0, [pc, #16]	@ (8009678 <despiselect+0x1c>)
 8009668:	f7fc fa5f 	bl	8005b2a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800966c:	20ff      	movs	r0, #255	@ 0xff
 800966e:	f7ff ff8b 	bl	8009588 <xchg_spi>

}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	40020000 	.word	0x40020000

0800967c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009680:	2200      	movs	r2, #0
 8009682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009686:	480a      	ldr	r0, [pc, #40]	@ (80096b0 <spiselect+0x34>)
 8009688:	f7fc fa4f 	bl	8005b2a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800968c:	20ff      	movs	r0, #255	@ 0xff
 800968e:	f7ff ff7b 	bl	8009588 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009692:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009696:	f7ff ffbd 	bl	8009614 <wait_ready>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <spiselect+0x28>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e002      	b.n	80096aa <spiselect+0x2e>

	despiselect();
 80096a4:	f7ff ffda 	bl	800965c <despiselect>
	return 0;	/* Timeout */
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40020000 	.word	0x40020000

080096b4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80096be:	20c8      	movs	r0, #200	@ 0xc8
 80096c0:	f7ff ff38 	bl	8009534 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80096c4:	20ff      	movs	r0, #255	@ 0xff
 80096c6:	f7ff ff5f 	bl	8009588 <xchg_spi>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	2bff      	cmp	r3, #255	@ 0xff
 80096d2:	d104      	bne.n	80096de <rcvr_datablock+0x2a>
 80096d4:	f7ff ff42 	bl	800955c <SPI_Timer_Status>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1f2      	bne.n	80096c4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80096e2:	d001      	beq.n	80096e8 <rcvr_datablock+0x34>
 80096e4:	2300      	movs	r3, #0
 80096e6:	e00a      	b.n	80096fe <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7ff ff62 	bl	80095b4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80096f0:	20ff      	movs	r0, #255	@ 0xff
 80096f2:	f7ff ff49 	bl	8009588 <xchg_spi>
 80096f6:	20ff      	movs	r0, #255	@ 0xff
 80096f8:	f7ff ff46 	bl	8009588 <xchg_spi>

	return 1;						/* Function succeeded */
 80096fc:	2301      	movs	r3, #1
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009712:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009716:	f7ff ff7d 	bl	8009614 <wait_ready>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <xmit_datablock+0x1e>
 8009720:	2300      	movs	r3, #0
 8009722:	e01e      	b.n	8009762 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff ff2e 	bl	8009588 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	2bfd      	cmp	r3, #253	@ 0xfd
 8009730:	d016      	beq.n	8009760 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009732:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff ff58 	bl	80095ec <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800973c:	20ff      	movs	r0, #255	@ 0xff
 800973e:	f7ff ff23 	bl	8009588 <xchg_spi>
 8009742:	20ff      	movs	r0, #255	@ 0xff
 8009744:	f7ff ff20 	bl	8009588 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009748:	20ff      	movs	r0, #255	@ 0xff
 800974a:	f7ff ff1d 	bl	8009588 <xchg_spi>
 800974e:	4603      	mov	r3, r0
 8009750:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	f003 031f 	and.w	r3, r3, #31
 8009758:	2b05      	cmp	r3, #5
 800975a:	d001      	beq.n	8009760 <xmit_datablock+0x5a>
 800975c:	2300      	movs	r3, #0
 800975e:	e000      	b.n	8009762 <xmit_datablock+0x5c>
	}
	return 1;
 8009760:	2301      	movs	r3, #1
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	4603      	mov	r3, r0
 8009772:	6039      	str	r1, [r7, #0]
 8009774:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800977a:	2b00      	cmp	r3, #0
 800977c:	da0e      	bge.n	800979c <send_cmd+0x32>
		cmd &= 0x7F;
 800977e:	79fb      	ldrb	r3, [r7, #7]
 8009780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009784:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009786:	2100      	movs	r1, #0
 8009788:	2037      	movs	r0, #55	@ 0x37
 800978a:	f7ff ffee 	bl	800976a <send_cmd>
 800978e:	4603      	mov	r3, r0
 8009790:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d901      	bls.n	800979c <send_cmd+0x32>
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	e051      	b.n	8009840 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b0c      	cmp	r3, #12
 80097a0:	d008      	beq.n	80097b4 <send_cmd+0x4a>
		despiselect();
 80097a2:	f7ff ff5b 	bl	800965c <despiselect>
		if (!spiselect()) return 0xFF;
 80097a6:	f7ff ff69 	bl	800967c <spiselect>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <send_cmd+0x4a>
 80097b0:	23ff      	movs	r3, #255	@ 0xff
 80097b2:	e045      	b.n	8009840 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff fee3 	bl	8009588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	0e1b      	lsrs	r3, r3, #24
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fedd 	bl	8009588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	0c1b      	lsrs	r3, r3, #16
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff fed7 	bl	8009588 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	0a1b      	lsrs	r3, r3, #8
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fed1 	bl	8009588 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff fecc 	bl	8009588 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80097f0:	2301      	movs	r3, #1
 80097f2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <send_cmd+0x94>
 80097fa:	2395      	movs	r3, #149	@ 0x95
 80097fc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	2b08      	cmp	r3, #8
 8009802:	d101      	bne.n	8009808 <send_cmd+0x9e>
 8009804:	2387      	movs	r3, #135	@ 0x87
 8009806:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff febc 	bl	8009588 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	2b0c      	cmp	r3, #12
 8009814:	d102      	bne.n	800981c <send_cmd+0xb2>
 8009816:	20ff      	movs	r0, #255	@ 0xff
 8009818:	f7ff feb6 	bl	8009588 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800981c:	230a      	movs	r3, #10
 800981e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009820:	20ff      	movs	r0, #255	@ 0xff
 8009822:	f7ff feb1 	bl	8009588 <xchg_spi>
 8009826:	4603      	mov	r3, r0
 8009828:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800982a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	da05      	bge.n	800983e <send_cmd+0xd4>
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	3b01      	subs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1f0      	bne.n	8009820 <send_cmd+0xb6>

	return res;							/* Return received response */
 800983e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <USER_SPI_initialize+0x14>
 8009858:	2301      	movs	r3, #1
 800985a:	e0d6      	b.n	8009a0a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800985c:	4b6d      	ldr	r3, [pc, #436]	@ (8009a14 <USER_SPI_initialize+0x1cc>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <USER_SPI_initialize+0x2a>
 800986a:	4b6a      	ldr	r3, [pc, #424]	@ (8009a14 <USER_SPI_initialize+0x1cc>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	e0cb      	b.n	8009a0a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8009872:	4b69      	ldr	r3, [pc, #420]	@ (8009a18 <USER_SPI_initialize+0x1d0>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800987c:	4b66      	ldr	r3, [pc, #408]	@ (8009a18 <USER_SPI_initialize+0x1d0>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8009884:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009886:	230a      	movs	r3, #10
 8009888:	73fb      	strb	r3, [r7, #15]
 800988a:	e005      	b.n	8009898 <USER_SPI_initialize+0x50>
 800988c:	20ff      	movs	r0, #255	@ 0xff
 800988e:	f7ff fe7b 	bl	8009588 <xchg_spi>
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	3b01      	subs	r3, #1
 8009896:	73fb      	strb	r3, [r7, #15]
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1f6      	bne.n	800988c <USER_SPI_initialize+0x44>

	ty = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80098a2:	2100      	movs	r1, #0
 80098a4:	2000      	movs	r0, #0
 80098a6:	f7ff ff60 	bl	800976a <send_cmd>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	f040 808b 	bne.w	80099c8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80098b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80098b6:	f7ff fe3d 	bl	8009534 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80098ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80098be:	2008      	movs	r0, #8
 80098c0:	f7ff ff53 	bl	800976a <send_cmd>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d151      	bne.n	800996e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
 80098ce:	e00d      	b.n	80098ec <USER_SPI_initialize+0xa4>
 80098d0:	7bfc      	ldrb	r4, [r7, #15]
 80098d2:	20ff      	movs	r0, #255	@ 0xff
 80098d4:	f7ff fe58 	bl	8009588 <xchg_spi>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	f104 0310 	add.w	r3, r4, #16
 80098e0:	443b      	add	r3, r7
 80098e2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	3301      	adds	r3, #1
 80098ea:	73fb      	strb	r3, [r7, #15]
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d9ee      	bls.n	80098d0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80098f2:	7abb      	ldrb	r3, [r7, #10]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d167      	bne.n	80099c8 <USER_SPI_initialize+0x180>
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	2baa      	cmp	r3, #170	@ 0xaa
 80098fc:	d164      	bne.n	80099c8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80098fe:	bf00      	nop
 8009900:	f7ff fe2c 	bl	800955c <SPI_Timer_Status>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <USER_SPI_initialize+0xd2>
 800990a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800990e:	20a9      	movs	r0, #169	@ 0xa9
 8009910:	f7ff ff2b 	bl	800976a <send_cmd>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1f2      	bne.n	8009900 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800991a:	f7ff fe1f 	bl	800955c <SPI_Timer_Status>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d051      	beq.n	80099c8 <USER_SPI_initialize+0x180>
 8009924:	2100      	movs	r1, #0
 8009926:	203a      	movs	r0, #58	@ 0x3a
 8009928:	f7ff ff1f 	bl	800976a <send_cmd>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d14a      	bne.n	80099c8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
 8009936:	e00d      	b.n	8009954 <USER_SPI_initialize+0x10c>
 8009938:	7bfc      	ldrb	r4, [r7, #15]
 800993a:	20ff      	movs	r0, #255	@ 0xff
 800993c:	f7ff fe24 	bl	8009588 <xchg_spi>
 8009940:	4603      	mov	r3, r0
 8009942:	461a      	mov	r2, r3
 8009944:	f104 0310 	add.w	r3, r4, #16
 8009948:	443b      	add	r3, r7
 800994a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	3301      	adds	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	2b03      	cmp	r3, #3
 8009958:	d9ee      	bls.n	8009938 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800995a:	7a3b      	ldrb	r3, [r7, #8]
 800995c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <USER_SPI_initialize+0x120>
 8009964:	230c      	movs	r3, #12
 8009966:	e000      	b.n	800996a <USER_SPI_initialize+0x122>
 8009968:	2304      	movs	r3, #4
 800996a:	737b      	strb	r3, [r7, #13]
 800996c:	e02c      	b.n	80099c8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800996e:	2100      	movs	r1, #0
 8009970:	20a9      	movs	r0, #169	@ 0xa9
 8009972:	f7ff fefa 	bl	800976a <send_cmd>
 8009976:	4603      	mov	r3, r0
 8009978:	2b01      	cmp	r3, #1
 800997a:	d804      	bhi.n	8009986 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800997c:	2302      	movs	r3, #2
 800997e:	737b      	strb	r3, [r7, #13]
 8009980:	23a9      	movs	r3, #169	@ 0xa9
 8009982:	73bb      	strb	r3, [r7, #14]
 8009984:	e003      	b.n	800998e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009986:	2301      	movs	r3, #1
 8009988:	737b      	strb	r3, [r7, #13]
 800998a:	2301      	movs	r3, #1
 800998c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800998e:	bf00      	nop
 8009990:	f7ff fde4 	bl	800955c <SPI_Timer_Status>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d007      	beq.n	80099aa <USER_SPI_initialize+0x162>
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	2100      	movs	r1, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff fee3 	bl	800976a <send_cmd>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1f2      	bne.n	8009990 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80099aa:	f7ff fdd7 	bl	800955c <SPI_Timer_Status>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <USER_SPI_initialize+0x17c>
 80099b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80099b8:	2010      	movs	r0, #16
 80099ba:	f7ff fed6 	bl	800976a <send_cmd>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <USER_SPI_initialize+0x180>
				ty = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80099c8:	4a14      	ldr	r2, [pc, #80]	@ (8009a1c <USER_SPI_initialize+0x1d4>)
 80099ca:	7b7b      	ldrb	r3, [r7, #13]
 80099cc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80099ce:	f7ff fe45 	bl	800965c <despiselect>

	if (ty) {			/* OK */
 80099d2:	7b7b      	ldrb	r3, [r7, #13]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d012      	beq.n	80099fe <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80099d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009a18 <USER_SPI_initialize+0x1d0>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80099e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a18 <USER_SPI_initialize+0x1d0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0210 	orr.w	r2, r2, #16
 80099ea:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80099ec:	4b09      	ldr	r3, [pc, #36]	@ (8009a14 <USER_SPI_initialize+0x1cc>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	f023 0301 	bic.w	r3, r3, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	4b06      	ldr	r3, [pc, #24]	@ (8009a14 <USER_SPI_initialize+0x1cc>)
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	e002      	b.n	8009a04 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80099fe:	4b05      	ldr	r3, [pc, #20]	@ (8009a14 <USER_SPI_initialize+0x1cc>)
 8009a00:	2201      	movs	r2, #1
 8009a02:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009a04:	4b03      	ldr	r3, [pc, #12]	@ (8009a14 <USER_SPI_initialize+0x1cc>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	b2db      	uxtb	r3, r3
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd90      	pop	{r4, r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20000024 	.word	0x20000024
 8009a18:	20004a14 	.word	0x20004a14
 8009a1c:	20004b5c 	.word	0x20004b5c

08009a20 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <USER_SPI_status+0x14>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e002      	b.n	8009a3a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009a34:	4b03      	ldr	r3, [pc, #12]	@ (8009a44 <USER_SPI_status+0x24>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	b2db      	uxtb	r3, r3
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	20000024 	.word	0x20000024

08009a48 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	607a      	str	r2, [r7, #4]
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d102      	bne.n	8009a64 <USER_SPI_read+0x1c>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <USER_SPI_read+0x20>
 8009a64:	2304      	movs	r3, #4
 8009a66:	e04d      	b.n	8009b04 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009a68:	4b28      	ldr	r3, [pc, #160]	@ (8009b0c <USER_SPI_read+0xc4>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <USER_SPI_read+0x32>
 8009a76:	2303      	movs	r3, #3
 8009a78:	e044      	b.n	8009b04 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009a7a:	4b25      	ldr	r3, [pc, #148]	@ (8009b10 <USER_SPI_read+0xc8>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <USER_SPI_read+0x44>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	025b      	lsls	r3, r3, #9
 8009a8a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d111      	bne.n	8009ab6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	2011      	movs	r0, #17
 8009a96:	f7ff fe68 	bl	800976a <send_cmd>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d129      	bne.n	8009af4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009aa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009aa4:	68b8      	ldr	r0, [r7, #8]
 8009aa6:	f7ff fe05 	bl	80096b4 <rcvr_datablock>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d021      	beq.n	8009af4 <USER_SPI_read+0xac>
			count = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	e01e      	b.n	8009af4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	2012      	movs	r0, #18
 8009aba:	f7ff fe56 	bl	800976a <send_cmd>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d117      	bne.n	8009af4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009ac4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009ac8:	68b8      	ldr	r0, [r7, #8]
 8009aca:	f7ff fdf3 	bl	80096b4 <rcvr_datablock>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00a      	beq.n	8009aea <USER_SPI_read+0xa2>
				buff += 512;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009ada:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	603b      	str	r3, [r7, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1ed      	bne.n	8009ac4 <USER_SPI_read+0x7c>
 8009ae8:	e000      	b.n	8009aec <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009aea:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009aec:	2100      	movs	r1, #0
 8009aee:	200c      	movs	r0, #12
 8009af0:	f7ff fe3b 	bl	800976a <send_cmd>
		}
	}
	despiselect();
 8009af4:	f7ff fdb2 	bl	800965c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	bf14      	ite	ne
 8009afe:	2301      	movne	r3, #1
 8009b00:	2300      	moveq	r3, #0
 8009b02:	b2db      	uxtb	r3, r3
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20000024 	.word	0x20000024
 8009b10:	20004b5c 	.word	0x20004b5c

08009b14 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d102      	bne.n	8009b30 <USER_SPI_write+0x1c>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <USER_SPI_write+0x20>
 8009b30:	2304      	movs	r3, #4
 8009b32:	e063      	b.n	8009bfc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009b34:	4b33      	ldr	r3, [pc, #204]	@ (8009c04 <USER_SPI_write+0xf0>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <USER_SPI_write+0x32>
 8009b42:	2303      	movs	r3, #3
 8009b44:	e05a      	b.n	8009bfc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009b46:	4b2f      	ldr	r3, [pc, #188]	@ (8009c04 <USER_SPI_write+0xf0>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <USER_SPI_write+0x44>
 8009b54:	2302      	movs	r3, #2
 8009b56:	e051      	b.n	8009bfc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009b58:	4b2b      	ldr	r3, [pc, #172]	@ (8009c08 <USER_SPI_write+0xf4>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	f003 0308 	and.w	r3, r3, #8
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d102      	bne.n	8009b6a <USER_SPI_write+0x56>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	025b      	lsls	r3, r3, #9
 8009b68:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d110      	bne.n	8009b92 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	2018      	movs	r0, #24
 8009b74:	f7ff fdf9 	bl	800976a <send_cmd>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d136      	bne.n	8009bec <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009b7e:	21fe      	movs	r1, #254	@ 0xfe
 8009b80:	68b8      	ldr	r0, [r7, #8]
 8009b82:	f7ff fdc0 	bl	8009706 <xmit_datablock>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d02f      	beq.n	8009bec <USER_SPI_write+0xd8>
			count = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	e02c      	b.n	8009bec <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009b92:	4b1d      	ldr	r3, [pc, #116]	@ (8009c08 <USER_SPI_write+0xf4>)
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	f003 0306 	and.w	r3, r3, #6
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <USER_SPI_write+0x92>
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	2097      	movs	r0, #151	@ 0x97
 8009ba2:	f7ff fde2 	bl	800976a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	2019      	movs	r0, #25
 8009baa:	f7ff fdde 	bl	800976a <send_cmd>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d11b      	bne.n	8009bec <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009bb4:	21fc      	movs	r1, #252	@ 0xfc
 8009bb6:	68b8      	ldr	r0, [r7, #8]
 8009bb8:	f7ff fda5 	bl	8009706 <xmit_datablock>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00a      	beq.n	8009bd8 <USER_SPI_write+0xc4>
				buff += 512;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009bc8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1ee      	bne.n	8009bb4 <USER_SPI_write+0xa0>
 8009bd6:	e000      	b.n	8009bda <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009bd8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009bda:	21fd      	movs	r1, #253	@ 0xfd
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f7ff fd92 	bl	8009706 <xmit_datablock>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <USER_SPI_write+0xd8>
 8009be8:	2301      	movs	r3, #1
 8009bea:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009bec:	f7ff fd36 	bl	800965c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	bf14      	ite	ne
 8009bf6:	2301      	movne	r3, #1
 8009bf8:	2300      	moveq	r3, #0
 8009bfa:	b2db      	uxtb	r3, r3
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000024 	.word	0x20000024
 8009c08:	20004b5c 	.word	0x20004b5c

08009c0c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08c      	sub	sp, #48	@ 0x30
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	603a      	str	r2, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <USER_SPI_ioctl+0x1a>
 8009c22:	2304      	movs	r3, #4
 8009c24:	e15a      	b.n	8009edc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009c26:	4baf      	ldr	r3, [pc, #700]	@ (8009ee4 <USER_SPI_ioctl+0x2d8>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <USER_SPI_ioctl+0x2c>
 8009c34:	2303      	movs	r3, #3
 8009c36:	e151      	b.n	8009edc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8009c3e:	79bb      	ldrb	r3, [r7, #6]
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	f200 8136 	bhi.w	8009eb2 <USER_SPI_ioctl+0x2a6>
 8009c46:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <USER_SPI_ioctl+0x40>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c61 	.word	0x08009c61
 8009c50:	08009c75 	.word	0x08009c75
 8009c54:	08009eb3 	.word	0x08009eb3
 8009c58:	08009d21 	.word	0x08009d21
 8009c5c:	08009e17 	.word	0x08009e17
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009c60:	f7ff fd0c 	bl	800967c <spiselect>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 8127 	beq.w	8009eba <USER_SPI_ioctl+0x2ae>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009c72:	e122      	b.n	8009eba <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009c74:	2100      	movs	r1, #0
 8009c76:	2009      	movs	r0, #9
 8009c78:	f7ff fd77 	bl	800976a <send_cmd>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f040 811d 	bne.w	8009ebe <USER_SPI_ioctl+0x2b2>
 8009c84:	f107 030c 	add.w	r3, r7, #12
 8009c88:	2110      	movs	r1, #16
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff fd12 	bl	80096b4 <rcvr_datablock>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 8113 	beq.w	8009ebe <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009c98:	7b3b      	ldrb	r3, [r7, #12]
 8009c9a:	099b      	lsrs	r3, r3, #6
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d111      	bne.n	8009cc6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009ca2:	7d7b      	ldrb	r3, [r7, #21]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	7d3b      	ldrb	r3, [r7, #20]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	4413      	add	r3, r2
 8009cac:	461a      	mov	r2, r3
 8009cae:	7cfb      	ldrb	r3, [r7, #19]
 8009cb0:	041b      	lsls	r3, r3, #16
 8009cb2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8009cb6:	4413      	add	r3, r2
 8009cb8:	3301      	adds	r3, #1
 8009cba:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	029a      	lsls	r2, r3, #10
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e028      	b.n	8009d18 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009cc6:	7c7b      	ldrb	r3, [r7, #17]
 8009cc8:	f003 030f 	and.w	r3, r3, #15
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	7dbb      	ldrb	r3, [r7, #22]
 8009cd0:	09db      	lsrs	r3, r3, #7
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	7d7b      	ldrb	r3, [r7, #21]
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f003 0306 	and.w	r3, r3, #6
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	4413      	add	r3, r2
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	3302      	adds	r3, #2
 8009cea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009cee:	7d3b      	ldrb	r3, [r7, #20]
 8009cf0:	099b      	lsrs	r3, r3, #6
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	7cfb      	ldrb	r3, [r7, #19]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	441a      	add	r2, r3
 8009cfc:	7cbb      	ldrb	r3, [r7, #18]
 8009cfe:	029b      	lsls	r3, r3, #10
 8009d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d04:	4413      	add	r3, r2
 8009d06:	3301      	adds	r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009d0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d0e:	3b09      	subs	r3, #9
 8009d10:	69fa      	ldr	r2, [r7, #28]
 8009d12:	409a      	lsls	r2, r3
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009d1e:	e0ce      	b.n	8009ebe <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009d20:	4b71      	ldr	r3, [pc, #452]	@ (8009ee8 <USER_SPI_ioctl+0x2dc>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d031      	beq.n	8009d90 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	208d      	movs	r0, #141	@ 0x8d
 8009d30:	f7ff fd1b 	bl	800976a <send_cmd>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f040 80c3 	bne.w	8009ec2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009d3c:	20ff      	movs	r0, #255	@ 0xff
 8009d3e:	f7ff fc23 	bl	8009588 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009d42:	f107 030c 	add.w	r3, r7, #12
 8009d46:	2110      	movs	r1, #16
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff fcb3 	bl	80096b4 <rcvr_datablock>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 80b6 	beq.w	8009ec2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009d56:	2330      	movs	r3, #48	@ 0x30
 8009d58:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009d5c:	e007      	b.n	8009d6e <USER_SPI_ioctl+0x162>
 8009d5e:	20ff      	movs	r0, #255	@ 0xff
 8009d60:	f7ff fc12 	bl	8009588 <xchg_spi>
 8009d64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009d6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1f3      	bne.n	8009d5e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009d76:	7dbb      	ldrb	r3, [r7, #22]
 8009d78:	091b      	lsrs	r3, r3, #4
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	2310      	movs	r3, #16
 8009d80:	fa03 f202 	lsl.w	r2, r3, r2
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009d8e:	e098      	b.n	8009ec2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009d90:	2100      	movs	r1, #0
 8009d92:	2009      	movs	r0, #9
 8009d94:	f7ff fce9 	bl	800976a <send_cmd>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f040 8091 	bne.w	8009ec2 <USER_SPI_ioctl+0x2b6>
 8009da0:	f107 030c 	add.w	r3, r7, #12
 8009da4:	2110      	movs	r1, #16
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fc84 	bl	80096b4 <rcvr_datablock>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 8087 	beq.w	8009ec2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009db4:	4b4c      	ldr	r3, [pc, #304]	@ (8009ee8 <USER_SPI_ioctl+0x2dc>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	f003 0302 	and.w	r3, r3, #2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d012      	beq.n	8009de6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009dc0:	7dbb      	ldrb	r3, [r7, #22]
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8009dc8:	7dfa      	ldrb	r2, [r7, #23]
 8009dca:	09d2      	lsrs	r2, r2, #7
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	4413      	add	r3, r2
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	7e7b      	ldrb	r3, [r7, #25]
 8009dd4:	099b      	lsrs	r3, r3, #6
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	fa02 f303 	lsl.w	r3, r2, r3
 8009dde:	461a      	mov	r2, r3
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e013      	b.n	8009e0e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009de6:	7dbb      	ldrb	r3, [r7, #22]
 8009de8:	109b      	asrs	r3, r3, #2
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f003 031f 	and.w	r3, r3, #31
 8009df0:	3301      	adds	r3, #1
 8009df2:	7dfa      	ldrb	r2, [r7, #23]
 8009df4:	00d2      	lsls	r2, r2, #3
 8009df6:	f002 0218 	and.w	r2, r2, #24
 8009dfa:	7df9      	ldrb	r1, [r7, #23]
 8009dfc:	0949      	lsrs	r1, r1, #5
 8009dfe:	b2c9      	uxtb	r1, r1
 8009e00:	440a      	add	r2, r1
 8009e02:	3201      	adds	r2, #1
 8009e04:	fb02 f303 	mul.w	r3, r2, r3
 8009e08:	461a      	mov	r2, r3
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009e14:	e055      	b.n	8009ec2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009e16:	4b34      	ldr	r3, [pc, #208]	@ (8009ee8 <USER_SPI_ioctl+0x2dc>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	f003 0306 	and.w	r3, r3, #6
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d051      	beq.n	8009ec6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009e22:	f107 020c 	add.w	r2, r7, #12
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	210b      	movs	r1, #11
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7ff feee 	bl	8009c0c <USER_SPI_ioctl>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d149      	bne.n	8009eca <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009e36:	7b3b      	ldrb	r3, [r7, #12]
 8009e38:	099b      	lsrs	r3, r3, #6
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d104      	bne.n	8009e4a <USER_SPI_ioctl+0x23e>
 8009e40:	7dbb      	ldrb	r3, [r7, #22]
 8009e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d041      	beq.n	8009ece <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	623b      	str	r3, [r7, #32]
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8009e5a:	4b23      	ldr	r3, [pc, #140]	@ (8009ee8 <USER_SPI_ioctl+0x2dc>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f003 0308 	and.w	r3, r3, #8
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d105      	bne.n	8009e72 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e68:	025b      	lsls	r3, r3, #9
 8009e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6e:	025b      	lsls	r3, r3, #9
 8009e70:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e74:	2020      	movs	r0, #32
 8009e76:	f7ff fc78 	bl	800976a <send_cmd>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d128      	bne.n	8009ed2 <USER_SPI_ioctl+0x2c6>
 8009e80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e82:	2021      	movs	r0, #33	@ 0x21
 8009e84:	f7ff fc71 	bl	800976a <send_cmd>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d121      	bne.n	8009ed2 <USER_SPI_ioctl+0x2c6>
 8009e8e:	2100      	movs	r1, #0
 8009e90:	2026      	movs	r0, #38	@ 0x26
 8009e92:	f7ff fc6a 	bl	800976a <send_cmd>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d11a      	bne.n	8009ed2 <USER_SPI_ioctl+0x2c6>
 8009e9c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009ea0:	f7ff fbb8 	bl	8009614 <wait_ready>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d013      	beq.n	8009ed2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009eb0:	e00f      	b.n	8009ed2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009eb2:	2304      	movs	r3, #4
 8009eb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009eb8:	e00c      	b.n	8009ed4 <USER_SPI_ioctl+0x2c8>
		break;
 8009eba:	bf00      	nop
 8009ebc:	e00a      	b.n	8009ed4 <USER_SPI_ioctl+0x2c8>
		break;
 8009ebe:	bf00      	nop
 8009ec0:	e008      	b.n	8009ed4 <USER_SPI_ioctl+0x2c8>
		break;
 8009ec2:	bf00      	nop
 8009ec4:	e006      	b.n	8009ed4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009ec6:	bf00      	nop
 8009ec8:	e004      	b.n	8009ed4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009eca:	bf00      	nop
 8009ecc:	e002      	b.n	8009ed4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009ece:	bf00      	nop
 8009ed0:	e000      	b.n	8009ed4 <USER_SPI_ioctl+0x2c8>
		break;
 8009ed2:	bf00      	nop
	}

	despiselect();
 8009ed4:	f7ff fbc2 	bl	800965c <despiselect>

	return res;
 8009ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3730      	adds	r7, #48	@ 0x30
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20000024 	.word	0x20000024
 8009ee8:	20004b5c 	.word	0x20004b5c

08009eec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	4a08      	ldr	r2, [pc, #32]	@ (8009f1c <disk_status+0x30>)
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	79fa      	ldrb	r2, [r7, #7]
 8009f04:	4905      	ldr	r1, [pc, #20]	@ (8009f1c <disk_status+0x30>)
 8009f06:	440a      	add	r2, r1
 8009f08:	7a12      	ldrb	r2, [r2, #8]
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4798      	blx	r3
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20004b90 	.word	0x20004b90

08009f20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009f2e:	79fb      	ldrb	r3, [r7, #7]
 8009f30:	4a0d      	ldr	r2, [pc, #52]	@ (8009f68 <disk_initialize+0x48>)
 8009f32:	5cd3      	ldrb	r3, [r2, r3]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d111      	bne.n	8009f5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8009f68 <disk_initialize+0x48>)
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	4a09      	ldr	r2, [pc, #36]	@ (8009f68 <disk_initialize+0x48>)
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	79fa      	ldrb	r2, [r7, #7]
 8009f4e:	4906      	ldr	r1, [pc, #24]	@ (8009f68 <disk_initialize+0x48>)
 8009f50:	440a      	add	r2, r1
 8009f52:	7a12      	ldrb	r2, [r2, #8]
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20004b90 	.word	0x20004b90

08009f6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009f6c:	b590      	push	{r4, r7, lr}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8009fa8 <disk_read+0x3c>)
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	689c      	ldr	r4, [r3, #8]
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	4a07      	ldr	r2, [pc, #28]	@ (8009fa8 <disk_read+0x3c>)
 8009f8c:	4413      	add	r3, r2
 8009f8e:	7a18      	ldrb	r0, [r3, #8]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	68b9      	ldr	r1, [r7, #8]
 8009f96:	47a0      	blx	r4
 8009f98:	4603      	mov	r3, r0
 8009f9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd90      	pop	{r4, r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20004b90 	.word	0x20004b90

08009fac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009fac:	b590      	push	{r4, r7, lr}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8009fe8 <disk_write+0x3c>)
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	68dc      	ldr	r4, [r3, #12]
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	4a07      	ldr	r2, [pc, #28]	@ (8009fe8 <disk_write+0x3c>)
 8009fcc:	4413      	add	r3, r2
 8009fce:	7a18      	ldrb	r0, [r3, #8]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	68b9      	ldr	r1, [r7, #8]
 8009fd6:	47a0      	blx	r4
 8009fd8:	4603      	mov	r3, r0
 8009fda:	75fb      	strb	r3, [r7, #23]
  return res;
 8009fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd90      	pop	{r4, r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20004b90 	.word	0x20004b90

08009fec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	603a      	str	r2, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	4a09      	ldr	r2, [pc, #36]	@ (800a024 <disk_ioctl+0x38>)
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	79fa      	ldrb	r2, [r7, #7]
 800a00a:	4906      	ldr	r1, [pc, #24]	@ (800a024 <disk_ioctl+0x38>)
 800a00c:	440a      	add	r2, r1
 800a00e:	7a10      	ldrb	r0, [r2, #8]
 800a010:	79b9      	ldrb	r1, [r7, #6]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	4798      	blx	r3
 800a016:	4603      	mov	r3, r0
 800a018:	73fb      	strb	r3, [r7, #15]
  return res;
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20004b90 	.word	0x20004b90

0800a028 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3301      	adds	r3, #1
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a038:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a03c:	021b      	lsls	r3, r3, #8
 800a03e:	b21a      	sxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	b21b      	sxth	r3, r3
 800a046:	4313      	orrs	r3, r2
 800a048:	b21b      	sxth	r3, r3
 800a04a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a04c:	89fb      	ldrh	r3, [r7, #14]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	bc80      	pop	{r7}
 800a056:	4770      	bx	lr

0800a058 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3303      	adds	r3, #3
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	021b      	lsls	r3, r3, #8
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	3202      	adds	r2, #2
 800a070:	7812      	ldrb	r2, [r2, #0]
 800a072:	4313      	orrs	r3, r2
 800a074:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	021b      	lsls	r3, r3, #8
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	3201      	adds	r2, #1
 800a07e:	7812      	ldrb	r2, [r2, #0]
 800a080:	4313      	orrs	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	021b      	lsls	r3, r3, #8
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	7812      	ldrb	r2, [r2, #0]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]
	return rv;
 800a090:	68fb      	ldr	r3, [r7, #12]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr

0800a09c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	887a      	ldrh	r2, [r7, #2]
 800a0b0:	b2d2      	uxtb	r2, r2
 800a0b2:	701a      	strb	r2, [r3, #0]
 800a0b4:	887b      	ldrh	r3, [r7, #2]
 800a0b6:	0a1b      	lsrs	r3, r3, #8
 800a0b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	887a      	ldrh	r2, [r7, #2]
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bc80      	pop	{r7}
 800a0ce:	4770      	bx	lr

0800a0d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	b2d2      	uxtb	r2, r2
 800a0e4:	701a      	strb	r2, [r3, #0]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	0a1b      	lsrs	r3, r3, #8
 800a0ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	b2d2      	uxtb	r2, r2
 800a0f6:	701a      	strb	r2, [r3, #0]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	0a1b      	lsrs	r3, r3, #8
 800a0fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	1c5a      	adds	r2, r3, #1
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	b2d2      	uxtb	r2, r2
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	0a1b      	lsrs	r3, r3, #8
 800a10e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	607a      	str	r2, [r7, #4]
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	b2d2      	uxtb	r2, r2
 800a11a:	701a      	strb	r2, [r3, #0]
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	bc80      	pop	{r7}
 800a124:	4770      	bx	lr

0800a126 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a126:	b480      	push	{r7}
 800a128:	b087      	sub	sp, #28
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00d      	beq.n	800a15c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	1c53      	adds	r3, r2, #1
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	1c59      	adds	r1, r3, #1
 800a14a:	6179      	str	r1, [r7, #20]
 800a14c:	7812      	ldrb	r2, [r2, #0]
 800a14e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3b01      	subs	r3, #1
 800a154:	607b      	str	r3, [r7, #4]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1f1      	bne.n	800a140 <mem_cpy+0x1a>
	}
}
 800a15c:	bf00      	nop
 800a15e:	371c      	adds	r7, #28
 800a160:	46bd      	mov	sp, r7
 800a162:	bc80      	pop	{r7}
 800a164:	4770      	bx	lr

0800a166 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a166:	b480      	push	{r7}
 800a168:	b087      	sub	sp, #28
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	60f8      	str	r0, [r7, #12]
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	617a      	str	r2, [r7, #20]
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	b2d2      	uxtb	r2, r2
 800a180:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3b01      	subs	r3, #1
 800a186:	607b      	str	r3, [r7, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1f3      	bne.n	800a176 <mem_set+0x10>
}
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
 800a192:	371c      	adds	r7, #28
 800a194:	46bd      	mov	sp, r7
 800a196:	bc80      	pop	{r7}
 800a198:	4770      	bx	lr

0800a19a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a19a:	b480      	push	{r7}
 800a19c:	b089      	sub	sp, #36	@ 0x24
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	61fb      	str	r3, [r7, #28]
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	1c5a      	adds	r2, r3, #1
 800a1b6:	61fa      	str	r2, [r7, #28]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	61ba      	str	r2, [r7, #24]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	1acb      	subs	r3, r1, r3
 800a1c6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	607b      	str	r3, [r7, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <mem_cmp+0x40>
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0eb      	beq.n	800a1b2 <mem_cmp+0x18>

	return r;
 800a1da:	697b      	ldr	r3, [r7, #20]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3724      	adds	r7, #36	@ 0x24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bc80      	pop	{r7}
 800a1e4:	4770      	bx	lr

0800a1e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a1f0:	e002      	b.n	800a1f8 <chk_chr+0x12>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	607b      	str	r3, [r7, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <chk_chr+0x26>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	4293      	cmp	r3, r2
 800a20a:	d1f2      	bne.n	800a1f2 <chk_chr+0xc>
	return *str;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	781b      	ldrb	r3, [r3, #0]
}
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	bc80      	pop	{r7}
 800a218:	4770      	bx	lr
	...

0800a21c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a226:	2300      	movs	r3, #0
 800a228:	60bb      	str	r3, [r7, #8]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	e029      	b.n	800a284 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a230:	4a26      	ldr	r2, [pc, #152]	@ (800a2cc <chk_lock+0xb0>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	4413      	add	r3, r2
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d01d      	beq.n	800a27a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a23e:	4a23      	ldr	r2, [pc, #140]	@ (800a2cc <chk_lock+0xb0>)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	011b      	lsls	r3, r3, #4
 800a244:	4413      	add	r3, r2
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d116      	bne.n	800a27e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a250:	4a1e      	ldr	r2, [pc, #120]	@ (800a2cc <chk_lock+0xb0>)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	4413      	add	r3, r2
 800a258:	3304      	adds	r3, #4
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a260:	429a      	cmp	r2, r3
 800a262:	d10c      	bne.n	800a27e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a264:	4a19      	ldr	r2, [pc, #100]	@ (800a2cc <chk_lock+0xb0>)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	011b      	lsls	r3, r3, #4
 800a26a:	4413      	add	r3, r2
 800a26c:	3308      	adds	r3, #8
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a274:	429a      	cmp	r2, r3
 800a276:	d102      	bne.n	800a27e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a278:	e007      	b.n	800a28a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a27a:	2301      	movs	r3, #1
 800a27c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3301      	adds	r3, #1
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d9d2      	bls.n	800a230 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d109      	bne.n	800a2a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d102      	bne.n	800a29c <chk_lock+0x80>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d101      	bne.n	800a2a0 <chk_lock+0x84>
 800a29c:	2300      	movs	r3, #0
 800a29e:	e010      	b.n	800a2c2 <chk_lock+0xa6>
 800a2a0:	2312      	movs	r3, #18
 800a2a2:	e00e      	b.n	800a2c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d108      	bne.n	800a2bc <chk_lock+0xa0>
 800a2aa:	4a08      	ldr	r2, [pc, #32]	@ (800a2cc <chk_lock+0xb0>)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	011b      	lsls	r3, r3, #4
 800a2b0:	4413      	add	r3, r2
 800a2b2:	330c      	adds	r3, #12
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2ba:	d101      	bne.n	800a2c0 <chk_lock+0xa4>
 800a2bc:	2310      	movs	r3, #16
 800a2be:	e000      	b.n	800a2c2 <chk_lock+0xa6>
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bc80      	pop	{r7}
 800a2ca:	4770      	bx	lr
 800a2cc:	20004b70 	.word	0x20004b70

0800a2d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	607b      	str	r3, [r7, #4]
 800a2da:	e002      	b.n	800a2e2 <enq_lock+0x12>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	607b      	str	r3, [r7, #4]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d806      	bhi.n	800a2f6 <enq_lock+0x26>
 800a2e8:	4a08      	ldr	r2, [pc, #32]	@ (800a30c <enq_lock+0x3c>)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	4413      	add	r3, r2
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f2      	bne.n	800a2dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	bf14      	ite	ne
 800a2fc:	2301      	movne	r3, #1
 800a2fe:	2300      	moveq	r3, #0
 800a300:	b2db      	uxtb	r3, r3
}
 800a302:	4618      	mov	r0, r3
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	bc80      	pop	{r7}
 800a30a:	4770      	bx	lr
 800a30c:	20004b70 	.word	0x20004b70

0800a310 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	e01f      	b.n	800a360 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a320:	4a41      	ldr	r2, [pc, #260]	@ (800a428 <inc_lock+0x118>)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	011b      	lsls	r3, r3, #4
 800a326:	4413      	add	r3, r2
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d113      	bne.n	800a35a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a332:	4a3d      	ldr	r2, [pc, #244]	@ (800a428 <inc_lock+0x118>)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	011b      	lsls	r3, r3, #4
 800a338:	4413      	add	r3, r2
 800a33a:	3304      	adds	r3, #4
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a342:	429a      	cmp	r2, r3
 800a344:	d109      	bne.n	800a35a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a346:	4a38      	ldr	r2, [pc, #224]	@ (800a428 <inc_lock+0x118>)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	011b      	lsls	r3, r3, #4
 800a34c:	4413      	add	r3, r2
 800a34e:	3308      	adds	r3, #8
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a356:	429a      	cmp	r2, r3
 800a358:	d006      	beq.n	800a368 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d9dc      	bls.n	800a320 <inc_lock+0x10>
 800a366:	e000      	b.n	800a36a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a368:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d132      	bne.n	800a3d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a370:	2300      	movs	r3, #0
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	e002      	b.n	800a37c <inc_lock+0x6c>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3301      	adds	r3, #1
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d806      	bhi.n	800a390 <inc_lock+0x80>
 800a382:	4a29      	ldr	r2, [pc, #164]	@ (800a428 <inc_lock+0x118>)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	011b      	lsls	r3, r3, #4
 800a388:	4413      	add	r3, r2
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1f2      	bne.n	800a376 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b02      	cmp	r3, #2
 800a394:	d101      	bne.n	800a39a <inc_lock+0x8a>
 800a396:	2300      	movs	r3, #0
 800a398:	e040      	b.n	800a41c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	4922      	ldr	r1, [pc, #136]	@ (800a428 <inc_lock+0x118>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	011b      	lsls	r3, r3, #4
 800a3a4:	440b      	add	r3, r1
 800a3a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	491e      	ldr	r1, [pc, #120]	@ (800a428 <inc_lock+0x118>)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	440b      	add	r3, r1
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	695a      	ldr	r2, [r3, #20]
 800a3bc:	491a      	ldr	r1, [pc, #104]	@ (800a428 <inc_lock+0x118>)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	440b      	add	r3, r1
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a3c8:	4a17      	ldr	r2, [pc, #92]	@ (800a428 <inc_lock+0x118>)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	4413      	add	r3, r2
 800a3d0:	330c      	adds	r3, #12
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d009      	beq.n	800a3f0 <inc_lock+0xe0>
 800a3dc:	4a12      	ldr	r2, [pc, #72]	@ (800a428 <inc_lock+0x118>)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	011b      	lsls	r3, r3, #4
 800a3e2:	4413      	add	r3, r2
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <inc_lock+0xe0>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e015      	b.n	800a41c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d108      	bne.n	800a408 <inc_lock+0xf8>
 800a3f6:	4a0c      	ldr	r2, [pc, #48]	@ (800a428 <inc_lock+0x118>)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	011b      	lsls	r3, r3, #4
 800a3fc:	4413      	add	r3, r2
 800a3fe:	330c      	adds	r3, #12
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	b29a      	uxth	r2, r3
 800a406:	e001      	b.n	800a40c <inc_lock+0xfc>
 800a408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a40c:	4906      	ldr	r1, [pc, #24]	@ (800a428 <inc_lock+0x118>)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	011b      	lsls	r3, r3, #4
 800a412:	440b      	add	r3, r1
 800a414:	330c      	adds	r3, #12
 800a416:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3301      	adds	r3, #1
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	bc80      	pop	{r7}
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20004b70 	.word	0x20004b70

0800a42c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3b01      	subs	r3, #1
 800a438:	607b      	str	r3, [r7, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d825      	bhi.n	800a48c <dec_lock+0x60>
		n = Files[i].ctr;
 800a440:	4a16      	ldr	r2, [pc, #88]	@ (800a49c <dec_lock+0x70>)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	011b      	lsls	r3, r3, #4
 800a446:	4413      	add	r3, r2
 800a448:	330c      	adds	r3, #12
 800a44a:	881b      	ldrh	r3, [r3, #0]
 800a44c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a44e:	89fb      	ldrh	r3, [r7, #14]
 800a450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a454:	d101      	bne.n	800a45a <dec_lock+0x2e>
 800a456:	2300      	movs	r3, #0
 800a458:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a45a:	89fb      	ldrh	r3, [r7, #14]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <dec_lock+0x3a>
 800a460:	89fb      	ldrh	r3, [r7, #14]
 800a462:	3b01      	subs	r3, #1
 800a464:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a466:	4a0d      	ldr	r2, [pc, #52]	@ (800a49c <dec_lock+0x70>)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	4413      	add	r3, r2
 800a46e:	330c      	adds	r3, #12
 800a470:	89fa      	ldrh	r2, [r7, #14]
 800a472:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a474:	89fb      	ldrh	r3, [r7, #14]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d105      	bne.n	800a486 <dec_lock+0x5a>
 800a47a:	4a08      	ldr	r2, [pc, #32]	@ (800a49c <dec_lock+0x70>)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	4413      	add	r3, r2
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	737b      	strb	r3, [r7, #13]
 800a48a:	e001      	b.n	800a490 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a48c:	2302      	movs	r3, #2
 800a48e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a490:	7b7b      	ldrb	r3, [r7, #13]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	bc80      	pop	{r7}
 800a49a:	4770      	bx	lr
 800a49c:	20004b70 	.word	0x20004b70

0800a4a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e010      	b.n	800a4d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a4ae:	4a0d      	ldr	r2, [pc, #52]	@ (800a4e4 <clear_lock+0x44>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	4413      	add	r3, r2
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d105      	bne.n	800a4ca <clear_lock+0x2a>
 800a4be:	4a09      	ldr	r2, [pc, #36]	@ (800a4e4 <clear_lock+0x44>)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	4413      	add	r3, r2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d9eb      	bls.n	800a4ae <clear_lock+0xe>
	}
}
 800a4d6:	bf00      	nop
 800a4d8:	bf00      	nop
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bc80      	pop	{r7}
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20004b70 	.word	0x20004b70

0800a4e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	78db      	ldrb	r3, [r3, #3]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d034      	beq.n	800a566 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a500:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7858      	ldrb	r0, [r3, #1]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a50c:	2301      	movs	r3, #1
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	f7ff fd4c 	bl	8009fac <disk_write>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	73fb      	strb	r3, [r7, #15]
 800a51e:	e022      	b.n	800a566 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	1ad2      	subs	r2, r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	429a      	cmp	r2, r3
 800a534:	d217      	bcs.n	800a566 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	789b      	ldrb	r3, [r3, #2]
 800a53a:	613b      	str	r3, [r7, #16]
 800a53c:	e010      	b.n	800a560 <sync_window+0x78>
					wsect += fs->fsize;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4413      	add	r3, r2
 800a546:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	7858      	ldrb	r0, [r3, #1]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a552:	2301      	movs	r3, #1
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	f7ff fd29 	bl	8009fac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	613b      	str	r3, [r7, #16]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d8eb      	bhi.n	800a53e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a566:	7bfb      	ldrb	r3, [r7, #15]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d01b      	beq.n	800a5c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff ffad 	bl	800a4e8 <sync_window>
 800a58e:	4603      	mov	r3, r0
 800a590:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d113      	bne.n	800a5c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	7858      	ldrb	r0, [r3, #1]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	f7ff fce1 	bl	8009f6c <disk_read>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d004      	beq.n	800a5ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff ff87 	bl	800a4e8 <sync_window>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d158      	bne.n	800a696 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d148      	bne.n	800a67e <sync_fs+0xb2>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	791b      	ldrb	r3, [r3, #4]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d144      	bne.n	800a67e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3330      	adds	r3, #48	@ 0x30
 800a5f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fdb1 	bl	800a166 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3330      	adds	r3, #48	@ 0x30
 800a608:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a60c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff fd43 	bl	800a09c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3330      	adds	r3, #48	@ 0x30
 800a61a:	4921      	ldr	r1, [pc, #132]	@ (800a6a0 <sync_fs+0xd4>)
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff fd57 	bl	800a0d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3330      	adds	r3, #48	@ 0x30
 800a626:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a62a:	491e      	ldr	r1, [pc, #120]	@ (800a6a4 <sync_fs+0xd8>)
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff fd4f 	bl	800a0d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	3330      	adds	r3, #48	@ 0x30
 800a636:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	4619      	mov	r1, r3
 800a640:	4610      	mov	r0, r2
 800a642:	f7ff fd45 	bl	800a0d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3330      	adds	r3, #48	@ 0x30
 800a64a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	4619      	mov	r1, r3
 800a654:	4610      	mov	r0, r2
 800a656:	f7ff fd3b 	bl	800a0d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	7858      	ldrb	r0, [r3, #1]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a672:	2301      	movs	r3, #1
 800a674:	f7ff fc9a 	bl	8009fac <disk_write>
			fs->fsi_flag = 0;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	2200      	movs	r2, #0
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fcb0 	bl	8009fec <disk_ioctl>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <sync_fs+0xca>
 800a692:	2301      	movs	r3, #1
 800a694:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a696:	7bfb      	ldrb	r3, [r7, #15]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	41615252 	.word	0x41615252
 800a6a4:	61417272 	.word	0x61417272

0800a6a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	3b02      	subs	r3, #2
 800a6b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	3b02      	subs	r3, #2
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d301      	bcc.n	800a6c8 <clust2sect+0x20>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	e008      	b.n	800a6da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	895b      	ldrh	r3, [r3, #10]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	fb03 f202 	mul.w	r2, r3, r2
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d8:	4413      	add	r3, r2
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bc80      	pop	{r7}
 800a6e2:	4770      	bx	lr

0800a6e4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d904      	bls.n	800a704 <get_fat+0x20>
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	429a      	cmp	r2, r3
 800a702:	d302      	bcc.n	800a70a <get_fat+0x26>
		val = 1;	/* Internal error */
 800a704:	2301      	movs	r3, #1
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e08e      	b.n	800a828 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a70a:	f04f 33ff 	mov.w	r3, #4294967295
 800a70e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2b03      	cmp	r3, #3
 800a716:	d061      	beq.n	800a7dc <get_fat+0xf8>
 800a718:	2b03      	cmp	r3, #3
 800a71a:	dc7b      	bgt.n	800a814 <get_fat+0x130>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d002      	beq.n	800a726 <get_fat+0x42>
 800a720:	2b02      	cmp	r3, #2
 800a722:	d041      	beq.n	800a7a8 <get_fat+0xc4>
 800a724:	e076      	b.n	800a814 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	085b      	lsrs	r3, r3, #1
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	4413      	add	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	6a1a      	ldr	r2, [r3, #32]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	0a5b      	lsrs	r3, r3, #9
 800a73c:	4413      	add	r3, r2
 800a73e:	4619      	mov	r1, r3
 800a740:	6938      	ldr	r0, [r7, #16]
 800a742:	f7ff ff15 	bl	800a570 <move_window>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d166      	bne.n	800a81a <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	60fa      	str	r2, [r7, #12]
 800a752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	4413      	add	r3, r2
 800a75a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a75e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6a1a      	ldr	r2, [r3, #32]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	0a5b      	lsrs	r3, r3, #9
 800a768:	4413      	add	r3, r2
 800a76a:	4619      	mov	r1, r3
 800a76c:	6938      	ldr	r0, [r7, #16]
 800a76e:	f7ff feff 	bl	800a570 <move_window>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d152      	bne.n	800a81e <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	4413      	add	r3, r2
 800a782:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <get_fat+0xba>
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	091b      	lsrs	r3, r3, #4
 800a79c:	e002      	b.n	800a7a4 <get_fat+0xc0>
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7a4:	617b      	str	r3, [r7, #20]
			break;
 800a7a6:	e03f      	b.n	800a828 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	6a1a      	ldr	r2, [r3, #32]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	0a1b      	lsrs	r3, r3, #8
 800a7b0:	4413      	add	r3, r2
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6938      	ldr	r0, [r7, #16]
 800a7b6:	f7ff fedb 	bl	800a570 <move_window>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d130      	bne.n	800a822 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	005b      	lsls	r3, r3, #1
 800a7ca:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a7ce:	4413      	add	r3, r2
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff fc29 	bl	800a028 <ld_word>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	617b      	str	r3, [r7, #20]
			break;
 800a7da:	e025      	b.n	800a828 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	6a1a      	ldr	r2, [r3, #32]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	09db      	lsrs	r3, r3, #7
 800a7e4:	4413      	add	r3, r2
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6938      	ldr	r0, [r7, #16]
 800a7ea:	f7ff fec1 	bl	800a570 <move_window>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d118      	bne.n	800a826 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a802:	4413      	add	r3, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff fc27 	bl	800a058 <ld_dword>
 800a80a:	4603      	mov	r3, r0
 800a80c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a810:	617b      	str	r3, [r7, #20]
			break;
 800a812:	e009      	b.n	800a828 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	e006      	b.n	800a828 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a81a:	bf00      	nop
 800a81c:	e004      	b.n	800a828 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a81e:	bf00      	nop
 800a820:	e002      	b.n	800a828 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a822:	bf00      	nop
 800a824:	e000      	b.n	800a828 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a826:	bf00      	nop
		}
	}

	return val;
 800a828:	697b      	ldr	r3, [r7, #20]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a832:	b590      	push	{r4, r7, lr}
 800a834:	b089      	sub	sp, #36	@ 0x24
 800a836:	af00      	add	r7, sp, #0
 800a838:	60f8      	str	r0, [r7, #12]
 800a83a:	60b9      	str	r1, [r7, #8]
 800a83c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a83e:	2302      	movs	r3, #2
 800a840:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b01      	cmp	r3, #1
 800a846:	f240 80d9 	bls.w	800a9fc <put_fat+0x1ca>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	429a      	cmp	r2, r3
 800a852:	f080 80d3 	bcs.w	800a9fc <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	f000 8096 	beq.w	800a98c <put_fat+0x15a>
 800a860:	2b03      	cmp	r3, #3
 800a862:	f300 80cb 	bgt.w	800a9fc <put_fat+0x1ca>
 800a866:	2b01      	cmp	r3, #1
 800a868:	d002      	beq.n	800a870 <put_fat+0x3e>
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d06e      	beq.n	800a94c <put_fat+0x11a>
 800a86e:	e0c5      	b.n	800a9fc <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	61bb      	str	r3, [r7, #24]
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	085b      	lsrs	r3, r3, #1
 800a878:	69ba      	ldr	r2, [r7, #24]
 800a87a:	4413      	add	r3, r2
 800a87c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6a1a      	ldr	r2, [r3, #32]
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	0a5b      	lsrs	r3, r3, #9
 800a886:	4413      	add	r3, r2
 800a888:	4619      	mov	r1, r3
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f7ff fe70 	bl	800a570 <move_window>
 800a890:	4603      	mov	r3, r0
 800a892:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a894:	7ffb      	ldrb	r3, [r7, #31]
 800a896:	2b00      	cmp	r3, #0
 800a898:	f040 80a9 	bne.w	800a9ee <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	1c59      	adds	r1, r3, #1
 800a8a6:	61b9      	str	r1, [r7, #24]
 800a8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ac:	4413      	add	r3, r2
 800a8ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00d      	beq.n	800a8d6 <put_fat+0xa4>
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	b25b      	sxtb	r3, r3
 800a8c0:	f003 030f 	and.w	r3, r3, #15
 800a8c4:	b25a      	sxtb	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	011b      	lsls	r3, r3, #4
 800a8cc:	b25b      	sxtb	r3, r3
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	b25b      	sxtb	r3, r3
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	e001      	b.n	800a8da <put_fat+0xa8>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6a1a      	ldr	r2, [r3, #32]
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	0a5b      	lsrs	r3, r3, #9
 800a8ec:	4413      	add	r3, r2
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f7ff fe3d 	bl	800a570 <move_window>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8fa:	7ffb      	ldrb	r3, [r7, #31]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d178      	bne.n	800a9f2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a90c:	4413      	add	r3, r2
 800a90e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <put_fat+0xf0>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	091b      	lsrs	r3, r3, #4
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	e00e      	b.n	800a940 <put_fat+0x10e>
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	b25b      	sxtb	r3, r3
 800a928:	f023 030f 	bic.w	r3, r3, #15
 800a92c:	b25a      	sxtb	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	0a1b      	lsrs	r3, r3, #8
 800a932:	b25b      	sxtb	r3, r3
 800a934:	f003 030f 	and.w	r3, r3, #15
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	4313      	orrs	r3, r2
 800a93c:	b25b      	sxtb	r3, r3
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2201      	movs	r2, #1
 800a948:	70da      	strb	r2, [r3, #3]
			break;
 800a94a:	e057      	b.n	800a9fc <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6a1a      	ldr	r2, [r3, #32]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	0a1b      	lsrs	r3, r3, #8
 800a954:	4413      	add	r3, r2
 800a956:	4619      	mov	r1, r3
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7ff fe09 	bl	800a570 <move_window>
 800a95e:	4603      	mov	r3, r0
 800a960:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a962:	7ffb      	ldrb	r3, [r7, #31]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d146      	bne.n	800a9f6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a976:	4413      	add	r3, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	b292      	uxth	r2, r2
 800a97c:	4611      	mov	r1, r2
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fb8c 	bl	800a09c <st_word>
			fs->wflag = 1;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2201      	movs	r2, #1
 800a988:	70da      	strb	r2, [r3, #3]
			break;
 800a98a:	e037      	b.n	800a9fc <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6a1a      	ldr	r2, [r3, #32]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	09db      	lsrs	r3, r3, #7
 800a994:	4413      	add	r3, r2
 800a996:	4619      	mov	r1, r3
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fde9 	bl	800a570 <move_window>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9a2:	7ffb      	ldrb	r3, [r7, #31]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d128      	bne.n	800a9fa <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a9bc:	4413      	add	r3, r2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7ff fb4a 	bl	800a058 <ld_dword>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a9ca:	4323      	orrs	r3, r4
 800a9cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a9dc:	4413      	add	r3, r2
 800a9de:	6879      	ldr	r1, [r7, #4]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7ff fb75 	bl	800a0d0 <st_dword>
			fs->wflag = 1;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	70da      	strb	r2, [r3, #3]
			break;
 800a9ec:	e006      	b.n	800a9fc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9ee:	bf00      	nop
 800a9f0:	e004      	b.n	800a9fc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9f2:	bf00      	nop
 800a9f4:	e002      	b.n	800a9fc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9f6:	bf00      	nop
 800a9f8:	e000      	b.n	800a9fc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9fa:	bf00      	nop
		}
	}
	return res;
 800a9fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3724      	adds	r7, #36	@ 0x24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd90      	pop	{r4, r7, pc}

0800aa06 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b088      	sub	sp, #32
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d904      	bls.n	800aa2c <remove_chain+0x26>
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d301      	bcc.n	800aa30 <remove_chain+0x2a>
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	e04b      	b.n	800aac8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00c      	beq.n	800aa50 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aa36:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	69b8      	ldr	r0, [r7, #24]
 800aa3e:	f7ff fef8 	bl	800a832 <put_fat>
 800aa42:	4603      	mov	r3, r0
 800aa44:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aa46:	7ffb      	ldrb	r3, [r7, #31]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <remove_chain+0x4a>
 800aa4c:	7ffb      	ldrb	r3, [r7, #31]
 800aa4e:	e03b      	b.n	800aac8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fe46 	bl	800a6e4 <get_fat>
 800aa58:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d031      	beq.n	800aac4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d101      	bne.n	800aa6a <remove_chain+0x64>
 800aa66:	2302      	movs	r3, #2
 800aa68:	e02e      	b.n	800aac8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa70:	d101      	bne.n	800aa76 <remove_chain+0x70>
 800aa72:	2301      	movs	r3, #1
 800aa74:	e028      	b.n	800aac8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aa76:	2200      	movs	r2, #0
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	69b8      	ldr	r0, [r7, #24]
 800aa7c:	f7ff fed9 	bl	800a832 <put_fat>
 800aa80:	4603      	mov	r3, r0
 800aa82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aa84:	7ffb      	ldrb	r3, [r7, #31]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <remove_chain+0x88>
 800aa8a:	7ffb      	ldrb	r3, [r7, #31]
 800aa8c:	e01c      	b.n	800aac8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	3b02      	subs	r3, #2
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d20b      	bcs.n	800aab4 <remove_chain+0xae>
			fs->free_clst++;
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	791b      	ldrb	r3, [r3, #4]
 800aaaa:	f043 0301 	orr.w	r3, r3, #1
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d3c6      	bcc.n	800aa50 <remove_chain+0x4a>
 800aac2:	e000      	b.n	800aac6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aac4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10d      	bne.n	800ab02 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d004      	beq.n	800aafc <create_chain+0x2c>
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d31b      	bcc.n	800ab34 <create_chain+0x64>
 800aafc:	2301      	movs	r3, #1
 800aafe:	61bb      	str	r3, [r7, #24]
 800ab00:	e018      	b.n	800ab34 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fded 	bl	800a6e4 <get_fat>
 800ab0a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d801      	bhi.n	800ab16 <create_chain+0x46>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e070      	b.n	800abf8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1c:	d101      	bne.n	800ab22 <create_chain+0x52>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	e06a      	b.n	800abf8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d201      	bcs.n	800ab30 <create_chain+0x60>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	e063      	b.n	800abf8 <create_chain+0x128>
		scl = clst;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	69fa      	ldr	r2, [r7, #28]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d307      	bcc.n	800ab58 <create_chain+0x88>
				ncl = 2;
 800ab48:	2302      	movs	r3, #2
 800ab4a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d901      	bls.n	800ab58 <create_chain+0x88>
 800ab54:	2300      	movs	r3, #0
 800ab56:	e04f      	b.n	800abf8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ab58:	69f9      	ldr	r1, [r7, #28]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff fdc2 	bl	800a6e4 <get_fat>
 800ab60:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00e      	beq.n	800ab86 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d003      	beq.n	800ab76 <create_chain+0xa6>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab74:	d101      	bne.n	800ab7a <create_chain+0xaa>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	e03e      	b.n	800abf8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ab7a:	69fa      	ldr	r2, [r7, #28]
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d1da      	bne.n	800ab38 <create_chain+0x68>
 800ab82:	2300      	movs	r3, #0
 800ab84:	e038      	b.n	800abf8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ab86:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab88:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	6938      	ldr	r0, [r7, #16]
 800ab90:	f7ff fe4f 	bl	800a832 <put_fat>
 800ab94:	4603      	mov	r3, r0
 800ab96:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d109      	bne.n	800abb2 <create_chain+0xe2>
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6938      	ldr	r0, [r7, #16]
 800abaa:	f7ff fe42 	bl	800a832 <put_fat>
 800abae:	4603      	mov	r3, r0
 800abb0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d116      	bne.n	800abe6 <create_chain+0x116>
		fs->last_clst = ncl;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	69fa      	ldr	r2, [r7, #28]
 800abbc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	691a      	ldr	r2, [r3, #16]
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	3b02      	subs	r3, #2
 800abc8:	429a      	cmp	r2, r3
 800abca:	d804      	bhi.n	800abd6 <create_chain+0x106>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	1e5a      	subs	r2, r3, #1
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	791b      	ldrb	r3, [r3, #4]
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	711a      	strb	r2, [r3, #4]
 800abe4:	e007      	b.n	800abf6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d102      	bne.n	800abf2 <create_chain+0x122>
 800abec:	f04f 33ff 	mov.w	r3, #4294967295
 800abf0:	e000      	b.n	800abf4 <create_chain+0x124>
 800abf2:	2301      	movs	r3, #1
 800abf4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800abf6:	69fb      	ldr	r3, [r7, #28]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3720      	adds	r7, #32
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac14:	3304      	adds	r3, #4
 800ac16:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	0a5b      	lsrs	r3, r3, #9
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	8952      	ldrh	r2, [r2, #10]
 800ac20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac24:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	1d1a      	adds	r2, r3, #4
 800ac2a:	613a      	str	r2, [r7, #16]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <clmt_clust+0x3a>
 800ac36:	2300      	movs	r3, #0
 800ac38:	e010      	b.n	800ac5c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d307      	bcc.n	800ac52 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	617b      	str	r3, [r7, #20]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac50:	e7e9      	b.n	800ac26 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ac52:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	4413      	add	r3, r2
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	371c      	adds	r7, #28
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bc80      	pop	{r7}
 800ac64:	4770      	bx	lr

0800ac66 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b086      	sub	sp, #24
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac7c:	d204      	bcs.n	800ac88 <dir_sdi+0x22>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	f003 031f 	and.w	r3, r3, #31
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <dir_sdi+0x26>
		return FR_INT_ERR;
 800ac88:	2302      	movs	r3, #2
 800ac8a:	e063      	b.n	800ad54 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <dir_sdi+0x46>
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d902      	bls.n	800acac <dir_sdi+0x46>
		clst = fs->dirbase;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acaa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10c      	bne.n	800accc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	095b      	lsrs	r3, r3, #5
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	8912      	ldrh	r2, [r2, #8]
 800acba:	4293      	cmp	r3, r2
 800acbc:	d301      	bcc.n	800acc2 <dir_sdi+0x5c>
 800acbe:	2302      	movs	r3, #2
 800acc0:	e048      	b.n	800ad54 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	61da      	str	r2, [r3, #28]
 800acca:	e029      	b.n	800ad20 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	895b      	ldrh	r3, [r3, #10]
 800acd0:	025b      	lsls	r3, r3, #9
 800acd2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800acd4:	e019      	b.n	800ad0a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6979      	ldr	r1, [r7, #20]
 800acda:	4618      	mov	r0, r3
 800acdc:	f7ff fd02 	bl	800a6e4 <get_fat>
 800ace0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d101      	bne.n	800acee <dir_sdi+0x88>
 800acea:	2301      	movs	r3, #1
 800acec:	e032      	b.n	800ad54 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d904      	bls.n	800acfe <dir_sdi+0x98>
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d301      	bcc.n	800ad02 <dir_sdi+0x9c>
 800acfe:	2302      	movs	r3, #2
 800ad00:	e028      	b.n	800ad54 <dir_sdi+0xee>
			ofs -= csz;
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d2e1      	bcs.n	800acd6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ad12:	6979      	ldr	r1, [r7, #20]
 800ad14:	6938      	ldr	r0, [r7, #16]
 800ad16:	f7ff fcc7 	bl	800a6a8 <clust2sect>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <dir_sdi+0xcc>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	e010      	b.n	800ad54 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69da      	ldr	r2, [r3, #28]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	0a5b      	lsrs	r3, r3, #9
 800ad3a:	441a      	add	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4c:	441a      	add	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	3320      	adds	r3, #32
 800ad72:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <dir_next+0x28>
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad82:	d301      	bcc.n	800ad88 <dir_next+0x2c>
 800ad84:	2304      	movs	r3, #4
 800ad86:	e0aa      	b.n	800aede <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f040 8098 	bne.w	800aec4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10b      	bne.n	800adbe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	095b      	lsrs	r3, r3, #5
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	8912      	ldrh	r2, [r2, #8]
 800adae:	4293      	cmp	r3, r2
 800adb0:	f0c0 8088 	bcc.w	800aec4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	61da      	str	r2, [r3, #28]
 800adba:	2304      	movs	r3, #4
 800adbc:	e08f      	b.n	800aede <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	0a5b      	lsrs	r3, r3, #9
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	8952      	ldrh	r2, [r2, #10]
 800adc6:	3a01      	subs	r2, #1
 800adc8:	4013      	ands	r3, r2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d17a      	bne.n	800aec4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	4619      	mov	r1, r3
 800add6:	4610      	mov	r0, r2
 800add8:	f7ff fc84 	bl	800a6e4 <get_fat>
 800addc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d801      	bhi.n	800ade8 <dir_next+0x8c>
 800ade4:	2302      	movs	r3, #2
 800ade6:	e07a      	b.n	800aede <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adee:	d101      	bne.n	800adf4 <dir_next+0x98>
 800adf0:	2301      	movs	r3, #1
 800adf2:	e074      	b.n	800aede <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d358      	bcc.n	800aeb0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	61da      	str	r2, [r3, #28]
 800ae0a:	2304      	movs	r3, #4
 800ae0c:	e067      	b.n	800aede <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f7ff fe5a 	bl	800aad0 <create_chain>
 800ae1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <dir_next+0xcc>
 800ae24:	2307      	movs	r3, #7
 800ae26:	e05a      	b.n	800aede <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d101      	bne.n	800ae32 <dir_next+0xd6>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e055      	b.n	800aede <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d101      	bne.n	800ae3e <dir_next+0xe2>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e04f      	b.n	800aede <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff fb52 	bl	800a4e8 <sync_window>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <dir_next+0xf2>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e047      	b.n	800aede <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	3330      	adds	r3, #48	@ 0x30
 800ae52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff f984 	bl	800a166 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae5e:	2300      	movs	r3, #0
 800ae60:	613b      	str	r3, [r7, #16]
 800ae62:	6979      	ldr	r1, [r7, #20]
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7ff fc1f 	bl	800a6a8 <clust2sect>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae70:	e012      	b.n	800ae98 <dir_next+0x13c>
						fs->wflag = 1;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2201      	movs	r2, #1
 800ae76:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f7ff fb35 	bl	800a4e8 <sync_window>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <dir_next+0x12c>
 800ae84:	2301      	movs	r3, #1
 800ae86:	e02a      	b.n	800aede <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	613b      	str	r3, [r7, #16]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	895b      	ldrh	r3, [r3, #10]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d3e6      	bcc.n	800ae72 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	1ad2      	subs	r2, r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aeb6:	6979      	ldr	r1, [r7, #20]
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7ff fbf5 	bl	800a6a8 <clust2sect>
 800aebe:	4602      	mov	r2, r0
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed6:	441a      	add	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b086      	sub	sp, #24
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aef6:	2100      	movs	r1, #0
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff feb4 	bl	800ac66 <dir_sdi>
 800aefe:	4603      	mov	r3, r0
 800af00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af02:	7dfb      	ldrb	r3, [r7, #23]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d12b      	bne.n	800af60 <dir_alloc+0x7a>
		n = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	4619      	mov	r1, r3
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff fb2c 	bl	800a570 <move_window>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d11d      	bne.n	800af5e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2be5      	cmp	r3, #229	@ 0xe5
 800af2a:	d004      	beq.n	800af36 <dir_alloc+0x50>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d107      	bne.n	800af46 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	3301      	adds	r3, #1
 800af3a:	613b      	str	r3, [r7, #16]
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	d102      	bne.n	800af4a <dir_alloc+0x64>
 800af44:	e00c      	b.n	800af60 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af46:	2300      	movs	r3, #0
 800af48:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af4a:	2101      	movs	r1, #1
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff ff05 	bl	800ad5c <dir_next>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d0d7      	beq.n	800af0c <dir_alloc+0x26>
 800af5c:	e000      	b.n	800af60 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800af5e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	2b04      	cmp	r3, #4
 800af64:	d101      	bne.n	800af6a <dir_alloc+0x84>
 800af66:	2307      	movs	r3, #7
 800af68:	75fb      	strb	r3, [r7, #23]
	return res;
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	331a      	adds	r3, #26
 800af82:	4618      	mov	r0, r3
 800af84:	f7ff f850 	bl	800a028 <ld_word>
 800af88:	4603      	mov	r3, r0
 800af8a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	2b03      	cmp	r3, #3
 800af92:	d109      	bne.n	800afa8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	3314      	adds	r3, #20
 800af98:	4618      	mov	r0, r3
 800af9a:	f7ff f845 	bl	800a028 <ld_word>
 800af9e:	4603      	mov	r3, r0
 800afa0:	041b      	lsls	r3, r3, #16
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800afa8:	68fb      	ldr	r3, [r7, #12]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	331a      	adds	r3, #26
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	b292      	uxth	r2, r2
 800afc6:	4611      	mov	r1, r2
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff f867 	bl	800a09c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d109      	bne.n	800afea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f103 0214 	add.w	r2, r3, #20
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	0c1b      	lsrs	r3, r3, #16
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	4619      	mov	r1, r3
 800afe4:	4610      	mov	r0, r2
 800afe6:	f7ff f859 	bl	800a09c <st_word>
	}
}
 800afea:	bf00      	nop
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b086      	sub	sp, #24
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b000:	2100      	movs	r1, #0
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff fe2f 	bl	800ac66 <dir_sdi>
 800b008:	4603      	mov	r3, r0
 800b00a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <dir_find+0x24>
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	e03e      	b.n	800b094 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6938      	ldr	r0, [r7, #16]
 800b01e:	f7ff faa7 	bl	800a570 <move_window>
 800b022:	4603      	mov	r3, r0
 800b024:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d12f      	bne.n	800b08c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <dir_find+0x4e>
 800b03a:	2304      	movs	r3, #4
 800b03c:	75fb      	strb	r3, [r7, #23]
 800b03e:	e028      	b.n	800b092 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	330b      	adds	r3, #11
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a1b      	ldr	r3, [r3, #32]
 800b056:	330b      	adds	r3, #11
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	f003 0308 	and.w	r3, r3, #8
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10a      	bne.n	800b078 <dir_find+0x86>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a18      	ldr	r0, [r3, #32]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3324      	adds	r3, #36	@ 0x24
 800b06a:	220b      	movs	r2, #11
 800b06c:	4619      	mov	r1, r3
 800b06e:	f7ff f894 	bl	800a19a <mem_cmp>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00b      	beq.n	800b090 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b078:	2100      	movs	r1, #0
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff fe6e 	bl	800ad5c <dir_next>
 800b080:	4603      	mov	r3, r0
 800b082:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b084:	7dfb      	ldrb	r3, [r7, #23]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0c5      	beq.n	800b016 <dir_find+0x24>
 800b08a:	e002      	b.n	800b092 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b08c:	bf00      	nop
 800b08e:	e000      	b.n	800b092 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b090:	bf00      	nop

	return res;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff ff1a 	bl	800aee6 <dir_alloc>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d11c      	bne.n	800b0f6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	68b8      	ldr	r0, [r7, #8]
 800b0c4:	f7ff fa54 	bl	800a570 <move_window>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d111      	bne.n	800b0f6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	2100      	movs	r1, #0
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7ff f843 	bl	800a166 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a18      	ldr	r0, [r3, #32]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3324      	adds	r3, #36	@ 0x24
 800b0e8:	220b      	movs	r2, #11
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	f7ff f81b 	bl	800a126 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3324      	adds	r3, #36	@ 0x24
 800b114:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b116:	220b      	movs	r2, #11
 800b118:	2120      	movs	r1, #32
 800b11a:	68b8      	ldr	r0, [r7, #8]
 800b11c:	f7ff f823 	bl	800a166 <mem_set>
	si = i = 0; ni = 8;
 800b120:	2300      	movs	r3, #0
 800b122:	613b      	str	r3, [r7, #16]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	61fb      	str	r3, [r7, #28]
 800b128:	2308      	movs	r3, #8
 800b12a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	61fa      	str	r2, [r7, #28]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	4413      	add	r3, r2
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b13a:	7efb      	ldrb	r3, [r7, #27]
 800b13c:	2b20      	cmp	r3, #32
 800b13e:	d94e      	bls.n	800b1de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b140:	7efb      	ldrb	r3, [r7, #27]
 800b142:	2b2f      	cmp	r3, #47	@ 0x2f
 800b144:	d006      	beq.n	800b154 <create_name+0x54>
 800b146:	7efb      	ldrb	r3, [r7, #27]
 800b148:	2b5c      	cmp	r3, #92	@ 0x5c
 800b14a:	d110      	bne.n	800b16e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b14c:	e002      	b.n	800b154 <create_name+0x54>
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	3301      	adds	r3, #1
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	4413      	add	r3, r2
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b15e:	d0f6      	beq.n	800b14e <create_name+0x4e>
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b5c      	cmp	r3, #92	@ 0x5c
 800b16a:	d0f0      	beq.n	800b14e <create_name+0x4e>
			break;
 800b16c:	e038      	b.n	800b1e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b16e:	7efb      	ldrb	r3, [r7, #27]
 800b170:	2b2e      	cmp	r3, #46	@ 0x2e
 800b172:	d003      	beq.n	800b17c <create_name+0x7c>
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d30c      	bcc.n	800b196 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	2b0b      	cmp	r3, #11
 800b180:	d002      	beq.n	800b188 <create_name+0x88>
 800b182:	7efb      	ldrb	r3, [r7, #27]
 800b184:	2b2e      	cmp	r3, #46	@ 0x2e
 800b186:	d001      	beq.n	800b18c <create_name+0x8c>
 800b188:	2306      	movs	r3, #6
 800b18a:	e044      	b.n	800b216 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b18c:	2308      	movs	r3, #8
 800b18e:	613b      	str	r3, [r7, #16]
 800b190:	230b      	movs	r3, #11
 800b192:	617b      	str	r3, [r7, #20]
			continue;
 800b194:	e022      	b.n	800b1dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b196:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da04      	bge.n	800b1a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b19e:	7efb      	ldrb	r3, [r7, #27]
 800b1a0:	3b80      	subs	r3, #128	@ 0x80
 800b1a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b220 <create_name+0x120>)
 800b1a4:	5cd3      	ldrb	r3, [r2, r3]
 800b1a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b1a8:	7efb      	ldrb	r3, [r7, #27]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	481d      	ldr	r0, [pc, #116]	@ (800b224 <create_name+0x124>)
 800b1ae:	f7ff f81a 	bl	800a1e6 <chk_chr>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <create_name+0xbc>
 800b1b8:	2306      	movs	r3, #6
 800b1ba:	e02c      	b.n	800b216 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b1bc:	7efb      	ldrb	r3, [r7, #27]
 800b1be:	2b60      	cmp	r3, #96	@ 0x60
 800b1c0:	d905      	bls.n	800b1ce <create_name+0xce>
 800b1c2:	7efb      	ldrb	r3, [r7, #27]
 800b1c4:	2b7a      	cmp	r3, #122	@ 0x7a
 800b1c6:	d802      	bhi.n	800b1ce <create_name+0xce>
 800b1c8:	7efb      	ldrb	r3, [r7, #27]
 800b1ca:	3b20      	subs	r3, #32
 800b1cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	613a      	str	r2, [r7, #16]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	7efa      	ldrb	r2, [r7, #27]
 800b1da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b1dc:	e7a6      	b.n	800b12c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b1de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	441a      	add	r2, r3
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d101      	bne.n	800b1f4 <create_name+0xf4>
 800b1f0:	2306      	movs	r3, #6
 800b1f2:	e010      	b.n	800b216 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2be5      	cmp	r3, #229	@ 0xe5
 800b1fa:	d102      	bne.n	800b202 <create_name+0x102>
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2205      	movs	r2, #5
 800b200:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b202:	7efb      	ldrb	r3, [r7, #27]
 800b204:	2b20      	cmp	r3, #32
 800b206:	d801      	bhi.n	800b20c <create_name+0x10c>
 800b208:	2204      	movs	r2, #4
 800b20a:	e000      	b.n	800b20e <create_name+0x10e>
 800b20c:	2200      	movs	r2, #0
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	330b      	adds	r3, #11
 800b212:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b214:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b216:	4618      	mov	r0, r3
 800b218:	3720      	adds	r7, #32
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	0800f614 	.word	0x0800f614
 800b224:	0800f5a4 	.word	0x0800f5a4

0800b228 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b23c:	e002      	b.n	800b244 <follow_path+0x1c>
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	603b      	str	r3, [r7, #0]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b2f      	cmp	r3, #47	@ 0x2f
 800b24a:	d0f8      	beq.n	800b23e <follow_path+0x16>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	2b5c      	cmp	r3, #92	@ 0x5c
 800b252:	d0f4      	beq.n	800b23e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	2200      	movs	r2, #0
 800b258:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b1f      	cmp	r3, #31
 800b260:	d80a      	bhi.n	800b278 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2280      	movs	r2, #128	@ 0x80
 800b266:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b26a:	2100      	movs	r1, #0
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff fcfa 	bl	800ac66 <dir_sdi>
 800b272:	4603      	mov	r3, r0
 800b274:	75fb      	strb	r3, [r7, #23]
 800b276:	e043      	b.n	800b300 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b278:	463b      	mov	r3, r7
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7ff ff3f 	bl	800b100 <create_name>
 800b282:	4603      	mov	r3, r0
 800b284:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d134      	bne.n	800b2f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff feb0 	bl	800aff2 <dir_find>
 800b292:	4603      	mov	r3, r0
 800b294:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b29c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00a      	beq.n	800b2ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d127      	bne.n	800b2fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b2aa:	7afb      	ldrb	r3, [r7, #11]
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d122      	bne.n	800b2fa <follow_path+0xd2>
 800b2b4:	2305      	movs	r3, #5
 800b2b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b2b8:	e01f      	b.n	800b2fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2ba:	7afb      	ldrb	r3, [r7, #11]
 800b2bc:	f003 0304 	and.w	r3, r3, #4
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d11c      	bne.n	800b2fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	799b      	ldrb	r3, [r3, #6]
 800b2c8:	f003 0310 	and.w	r3, r3, #16
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b2d0:	2305      	movs	r3, #5
 800b2d2:	75fb      	strb	r3, [r7, #23]
 800b2d4:	e014      	b.n	800b300 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e4:	4413      	add	r3, r2
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff fe43 	bl	800af74 <ld_clust>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b2f4:	e7c0      	b.n	800b278 <follow_path+0x50>
			if (res != FR_OK) break;
 800b2f6:	bf00      	nop
 800b2f8:	e002      	b.n	800b300 <follow_path+0xd8>
				break;
 800b2fa:	bf00      	nop
 800b2fc:	e000      	b.n	800b300 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2fe:	bf00      	nop
			}
		}
	}

	return res;
 800b300:	7dfb      	ldrb	r3, [r7, #23]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b087      	sub	sp, #28
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b312:	f04f 33ff 	mov.w	r3, #4294967295
 800b316:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d031      	beq.n	800b384 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	e002      	b.n	800b32e <get_ldnumber+0x24>
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	3301      	adds	r3, #1
 800b32c:	617b      	str	r3, [r7, #20]
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b20      	cmp	r3, #32
 800b334:	d903      	bls.n	800b33e <get_ldnumber+0x34>
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b3a      	cmp	r3, #58	@ 0x3a
 800b33c:	d1f4      	bne.n	800b328 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	2b3a      	cmp	r3, #58	@ 0x3a
 800b344:	d11c      	bne.n	800b380 <get_ldnumber+0x76>
			tp = *path;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	1c5a      	adds	r2, r3, #1
 800b350:	60fa      	str	r2, [r7, #12]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	3b30      	subs	r3, #48	@ 0x30
 800b356:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	2b09      	cmp	r3, #9
 800b35c:	d80e      	bhi.n	800b37c <get_ldnumber+0x72>
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	429a      	cmp	r2, r3
 800b364:	d10a      	bne.n	800b37c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d107      	bne.n	800b37c <get_ldnumber+0x72>
					vol = (int)i;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	3301      	adds	r3, #1
 800b374:	617b      	str	r3, [r7, #20]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	e002      	b.n	800b386 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b380:	2300      	movs	r3, #0
 800b382:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b384:	693b      	ldr	r3, [r7, #16]
}
 800b386:	4618      	mov	r0, r3
 800b388:	371c      	adds	r7, #28
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bc80      	pop	{r7}
 800b38e:	4770      	bx	lr

0800b390 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	70da      	strb	r2, [r3, #3]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7ff f8e0 	bl	800a570 <move_window>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <check_fs+0x2a>
 800b3b6:	2304      	movs	r3, #4
 800b3b8:	e038      	b.n	800b42c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3330      	adds	r3, #48	@ 0x30
 800b3be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe fe30 	bl	800a028 <ld_word>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d001      	beq.n	800b3d8 <check_fs+0x48>
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e029      	b.n	800b42c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3de:	2be9      	cmp	r3, #233	@ 0xe9
 800b3e0:	d009      	beq.n	800b3f6 <check_fs+0x66>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3e8:	2beb      	cmp	r3, #235	@ 0xeb
 800b3ea:	d11e      	bne.n	800b42a <check_fs+0x9a>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b3f2:	2b90      	cmp	r3, #144	@ 0x90
 800b3f4:	d119      	bne.n	800b42a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3330      	adds	r3, #48	@ 0x30
 800b3fa:	3336      	adds	r3, #54	@ 0x36
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fe fe2b 	bl	800a058 <ld_dword>
 800b402:	4603      	mov	r3, r0
 800b404:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b408:	4a0a      	ldr	r2, [pc, #40]	@ (800b434 <check_fs+0xa4>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d101      	bne.n	800b412 <check_fs+0x82>
 800b40e:	2300      	movs	r3, #0
 800b410:	e00c      	b.n	800b42c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3330      	adds	r3, #48	@ 0x30
 800b416:	3352      	adds	r3, #82	@ 0x52
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe fe1d 	bl	800a058 <ld_dword>
 800b41e:	4603      	mov	r3, r0
 800b420:	4a05      	ldr	r2, [pc, #20]	@ (800b438 <check_fs+0xa8>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d101      	bne.n	800b42a <check_fs+0x9a>
 800b426:	2300      	movs	r3, #0
 800b428:	e000      	b.n	800b42c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b42a:	2302      	movs	r3, #2
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	00544146 	.word	0x00544146
 800b438:	33544146 	.word	0x33544146

0800b43c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b096      	sub	sp, #88	@ 0x58
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	4613      	mov	r3, r2
 800b448:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2200      	movs	r2, #0
 800b44e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff ff5a 	bl	800b30a <get_ldnumber>
 800b456:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da01      	bge.n	800b462 <find_volume+0x26>
 800b45e:	230b      	movs	r3, #11
 800b460:	e22d      	b.n	800b8be <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b462:	4aa1      	ldr	r2, [pc, #644]	@ (800b6e8 <find_volume+0x2ac>)
 800b464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b46a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <find_volume+0x3a>
 800b472:	230c      	movs	r3, #12
 800b474:	e223      	b.n	800b8be <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b47a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b47c:	79fb      	ldrb	r3, [r7, #7]
 800b47e:	f023 0301 	bic.w	r3, r3, #1
 800b482:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d01a      	beq.n	800b4c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48e:	785b      	ldrb	r3, [r3, #1]
 800b490:	4618      	mov	r0, r3
 800b492:	f7fe fd2b 	bl	8009eec <disk_status>
 800b496:	4603      	mov	r3, r0
 800b498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b49c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10c      	bne.n	800b4c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b4a8:	79fb      	ldrb	r3, [r7, #7]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d007      	beq.n	800b4be <find_volume+0x82>
 800b4ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4b2:	f003 0304 	and.w	r3, r3, #4
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b4ba:	230a      	movs	r3, #10
 800b4bc:	e1ff      	b.n	800b8be <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e1fd      	b.n	800b8be <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d2:	785b      	ldrb	r3, [r3, #1]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fd23 	bl	8009f20 <disk_initialize>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b4e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e1e6      	b.n	800b8be <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d007      	beq.n	800b506 <find_volume+0xca>
 800b4f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4fa:	f003 0304 	and.w	r3, r3, #4
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b502:	230a      	movs	r3, #10
 800b504:	e1db      	b.n	800b8be <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b50a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b50c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b50e:	f7ff ff3f 	bl	800b390 <check_fs>
 800b512:	4603      	mov	r3, r0
 800b514:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b518:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d149      	bne.n	800b5b4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b520:	2300      	movs	r3, #0
 800b522:	643b      	str	r3, [r7, #64]	@ 0x40
 800b524:	e01e      	b.n	800b564 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b528:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b52c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b52e:	011b      	lsls	r3, r3, #4
 800b530:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b534:	4413      	add	r3, r2
 800b536:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53a:	3304      	adds	r3, #4
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d006      	beq.n	800b550 <find_volume+0x114>
 800b542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b544:	3308      	adds	r3, #8
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe fd86 	bl	800a058 <ld_dword>
 800b54c:	4602      	mov	r2, r0
 800b54e:	e000      	b.n	800b552 <find_volume+0x116>
 800b550:	2200      	movs	r2, #0
 800b552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	3358      	adds	r3, #88	@ 0x58
 800b558:	443b      	add	r3, r7
 800b55a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b55e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b560:	3301      	adds	r3, #1
 800b562:	643b      	str	r3, [r7, #64]	@ 0x40
 800b564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b566:	2b03      	cmp	r3, #3
 800b568:	d9dd      	bls.n	800b526 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b56a:	2300      	movs	r3, #0
 800b56c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b56e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <find_volume+0x13e>
 800b574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b576:	3b01      	subs	r3, #1
 800b578:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b57a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	3358      	adds	r3, #88	@ 0x58
 800b580:	443b      	add	r3, r7
 800b582:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b586:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d005      	beq.n	800b59a <find_volume+0x15e>
 800b58e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b590:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b592:	f7ff fefd 	bl	800b390 <check_fs>
 800b596:	4603      	mov	r3, r0
 800b598:	e000      	b.n	800b59c <find_volume+0x160>
 800b59a:	2303      	movs	r3, #3
 800b59c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b5a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d905      	bls.n	800b5b4 <find_volume+0x178>
 800b5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d9e2      	bls.n	800b57a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b5b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d101      	bne.n	800b5c0 <find_volume+0x184>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e17e      	b.n	800b8be <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b5c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d901      	bls.n	800b5cc <find_volume+0x190>
 800b5c8:	230d      	movs	r3, #13
 800b5ca:	e178      	b.n	800b8be <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ce:	3330      	adds	r3, #48	@ 0x30
 800b5d0:	330b      	adds	r3, #11
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fe fd28 	bl	800a028 <ld_word>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5de:	d001      	beq.n	800b5e4 <find_volume+0x1a8>
 800b5e0:	230d      	movs	r3, #13
 800b5e2:	e16c      	b.n	800b8be <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e6:	3330      	adds	r3, #48	@ 0x30
 800b5e8:	3316      	adds	r3, #22
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fd1c 	bl	800a028 <ld_word>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b5f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d106      	bne.n	800b608 <find_volume+0x1cc>
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fc:	3330      	adds	r3, #48	@ 0x30
 800b5fe:	3324      	adds	r3, #36	@ 0x24
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe fd29 	bl	800a058 <ld_dword>
 800b606:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b60c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b610:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b616:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61a:	789b      	ldrb	r3, [r3, #2]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d005      	beq.n	800b62c <find_volume+0x1f0>
 800b620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b622:	789b      	ldrb	r3, [r3, #2]
 800b624:	2b02      	cmp	r3, #2
 800b626:	d001      	beq.n	800b62c <find_volume+0x1f0>
 800b628:	230d      	movs	r3, #13
 800b62a:	e148      	b.n	800b8be <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62e:	789b      	ldrb	r3, [r3, #2]
 800b630:	461a      	mov	r2, r3
 800b632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b634:	fb02 f303 	mul.w	r3, r2, r3
 800b638:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b640:	461a      	mov	r2, r3
 800b642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b644:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b648:	895b      	ldrh	r3, [r3, #10]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d008      	beq.n	800b660 <find_volume+0x224>
 800b64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b650:	895b      	ldrh	r3, [r3, #10]
 800b652:	461a      	mov	r2, r3
 800b654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b656:	895b      	ldrh	r3, [r3, #10]
 800b658:	3b01      	subs	r3, #1
 800b65a:	4013      	ands	r3, r2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <find_volume+0x228>
 800b660:	230d      	movs	r3, #13
 800b662:	e12c      	b.n	800b8be <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b666:	3330      	adds	r3, #48	@ 0x30
 800b668:	3311      	adds	r3, #17
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe fcdc 	bl	800a028 <ld_word>
 800b670:	4603      	mov	r3, r0
 800b672:	461a      	mov	r2, r3
 800b674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b676:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67a:	891b      	ldrh	r3, [r3, #8]
 800b67c:	f003 030f 	and.w	r3, r3, #15
 800b680:	b29b      	uxth	r3, r3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <find_volume+0x24e>
 800b686:	230d      	movs	r3, #13
 800b688:	e119      	b.n	800b8be <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68c:	3330      	adds	r3, #48	@ 0x30
 800b68e:	3313      	adds	r3, #19
 800b690:	4618      	mov	r0, r3
 800b692:	f7fe fcc9 	bl	800a028 <ld_word>
 800b696:	4603      	mov	r3, r0
 800b698:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b69a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <find_volume+0x272>
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a2:	3330      	adds	r3, #48	@ 0x30
 800b6a4:	3320      	adds	r3, #32
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fcd6 	bl	800a058 <ld_dword>
 800b6ac:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b0:	3330      	adds	r3, #48	@ 0x30
 800b6b2:	330e      	adds	r3, #14
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe fcb7 	bl	800a028 <ld_word>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b6be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <find_volume+0x28c>
 800b6c4:	230d      	movs	r3, #13
 800b6c6:	e0fa      	b.n	800b8be <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b6c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b6ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6cc:	4413      	add	r3, r2
 800b6ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6d0:	8912      	ldrh	r2, [r2, #8]
 800b6d2:	0912      	lsrs	r2, r2, #4
 800b6d4:	b292      	uxth	r2, r2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b6da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d204      	bcs.n	800b6ec <find_volume+0x2b0>
 800b6e2:	230d      	movs	r3, #13
 800b6e4:	e0eb      	b.n	800b8be <find_volume+0x482>
 800b6e6:	bf00      	nop
 800b6e8:	20004b68 	.word	0x20004b68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b6ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6f4:	8952      	ldrh	r2, [r2, #10]
 800b6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6fa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <find_volume+0x2ca>
 800b702:	230d      	movs	r3, #13
 800b704:	e0db      	b.n	800b8be <find_volume+0x482>
		fmt = FS_FAT32;
 800b706:	2303      	movs	r3, #3
 800b708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b712:	4293      	cmp	r3, r2
 800b714:	d802      	bhi.n	800b71c <find_volume+0x2e0>
 800b716:	2302      	movs	r3, #2
 800b718:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b722:	4293      	cmp	r3, r2
 800b724:	d802      	bhi.n	800b72c <find_volume+0x2f0>
 800b726:	2301      	movs	r3, #1
 800b728:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72e:	1c9a      	adds	r2, r3, #2
 800b730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b732:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b736:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b738:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b73a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b73c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b73e:	441a      	add	r2, r3
 800b740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b742:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b744:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b748:	441a      	add	r2, r3
 800b74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b74e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b752:	2b03      	cmp	r3, #3
 800b754:	d11e      	bne.n	800b794 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b758:	3330      	adds	r3, #48	@ 0x30
 800b75a:	332a      	adds	r3, #42	@ 0x2a
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe fc63 	bl	800a028 <ld_word>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <find_volume+0x330>
 800b768:	230d      	movs	r3, #13
 800b76a:	e0a8      	b.n	800b8be <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76e:	891b      	ldrh	r3, [r3, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d001      	beq.n	800b778 <find_volume+0x33c>
 800b774:	230d      	movs	r3, #13
 800b776:	e0a2      	b.n	800b8be <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77a:	3330      	adds	r3, #48	@ 0x30
 800b77c:	332c      	adds	r3, #44	@ 0x2c
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe fc6a 	bl	800a058 <ld_dword>
 800b784:	4602      	mov	r2, r0
 800b786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b788:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	647b      	str	r3, [r7, #68]	@ 0x44
 800b792:	e01f      	b.n	800b7d4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	891b      	ldrh	r3, [r3, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <find_volume+0x364>
 800b79c:	230d      	movs	r3, #13
 800b79e:	e08e      	b.n	800b8be <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a2:	6a1a      	ldr	r2, [r3, #32]
 800b7a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7a6:	441a      	add	r2, r3
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7aa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b7ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d103      	bne.n	800b7bc <find_volume+0x380>
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	e00a      	b.n	800b7d2 <find_volume+0x396>
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7be:	695a      	ldr	r2, [r3, #20]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	4413      	add	r3, r2
 800b7c6:	085a      	lsrs	r2, r3, #1
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b7d2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d6:	699a      	ldr	r2, [r3, #24]
 800b7d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7da:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b7de:	0a5b      	lsrs	r3, r3, #9
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d201      	bcs.n	800b7e8 <find_volume+0x3ac>
 800b7e4:	230d      	movs	r3, #13
 800b7e6:	e06a      	b.n	800b8be <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ee:	611a      	str	r2, [r3, #16]
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f2:	691a      	ldr	r2, [r3, #16]
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fa:	2280      	movs	r2, #128	@ 0x80
 800b7fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b7fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b802:	2b03      	cmp	r3, #3
 800b804:	d149      	bne.n	800b89a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b808:	3330      	adds	r3, #48	@ 0x30
 800b80a:	3330      	adds	r3, #48	@ 0x30
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fe fc0b 	bl	800a028 <ld_word>
 800b812:	4603      	mov	r3, r0
 800b814:	2b01      	cmp	r3, #1
 800b816:	d140      	bne.n	800b89a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b81a:	3301      	adds	r3, #1
 800b81c:	4619      	mov	r1, r3
 800b81e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b820:	f7fe fea6 	bl	800a570 <move_window>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d137      	bne.n	800b89a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82c:	2200      	movs	r2, #0
 800b82e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b832:	3330      	adds	r3, #48	@ 0x30
 800b834:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe fbf5 	bl	800a028 <ld_word>
 800b83e:	4603      	mov	r3, r0
 800b840:	461a      	mov	r2, r3
 800b842:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b846:	429a      	cmp	r2, r3
 800b848:	d127      	bne.n	800b89a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84c:	3330      	adds	r3, #48	@ 0x30
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fc02 	bl	800a058 <ld_dword>
 800b854:	4603      	mov	r3, r0
 800b856:	4a1c      	ldr	r2, [pc, #112]	@ (800b8c8 <find_volume+0x48c>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d11e      	bne.n	800b89a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85e:	3330      	adds	r3, #48	@ 0x30
 800b860:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b864:	4618      	mov	r0, r3
 800b866:	f7fe fbf7 	bl	800a058 <ld_dword>
 800b86a:	4603      	mov	r3, r0
 800b86c:	4a17      	ldr	r2, [pc, #92]	@ (800b8cc <find_volume+0x490>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d113      	bne.n	800b89a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b874:	3330      	adds	r3, #48	@ 0x30
 800b876:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fbec 	bl	800a058 <ld_dword>
 800b880:	4602      	mov	r2, r0
 800b882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b884:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b888:	3330      	adds	r3, #48	@ 0x30
 800b88a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe fbe2 	bl	800a058 <ld_dword>
 800b894:	4602      	mov	r2, r0
 800b896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b898:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b8a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b8a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d0 <find_volume+0x494>)
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	4b09      	ldr	r3, [pc, #36]	@ (800b8d0 <find_volume+0x494>)
 800b8ac:	801a      	strh	r2, [r3, #0]
 800b8ae:	4b08      	ldr	r3, [pc, #32]	@ (800b8d0 <find_volume+0x494>)
 800b8b0:	881a      	ldrh	r2, [r3, #0]
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b8b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b8b8:	f7fe fdf2 	bl	800a4a0 <clear_lock>
#endif
	return FR_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3758      	adds	r7, #88	@ 0x58
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	41615252 	.word	0x41615252
 800b8cc:	61417272 	.word	0x61417272
 800b8d0:	20004b6c 	.word	0x20004b6c

0800b8d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b8de:	2309      	movs	r3, #9
 800b8e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01c      	beq.n	800b922 <validate+0x4e>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d018      	beq.n	800b922 <validate+0x4e>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d013      	beq.n	800b922 <validate+0x4e>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	889a      	ldrh	r2, [r3, #4]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	88db      	ldrh	r3, [r3, #6]
 800b904:	429a      	cmp	r2, r3
 800b906:	d10c      	bne.n	800b922 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	785b      	ldrb	r3, [r3, #1]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe faec 	bl	8009eec <disk_status>
 800b914:	4603      	mov	r3, r0
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <validate+0x4e>
			res = FR_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b922:	7bfb      	ldrb	r3, [r7, #15]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <validate+0x5a>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	e000      	b.n	800b930 <validate+0x5c>
 800b92e:	2300      	movs	r3, #0
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	6013      	str	r3, [r2, #0]
	return res;
 800b934:	7bfb      	ldrb	r3, [r7, #15]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
	...

0800b940 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b952:	f107 0310 	add.w	r3, r7, #16
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff fcd7 	bl	800b30a <get_ldnumber>
 800b95c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	2b00      	cmp	r3, #0
 800b962:	da01      	bge.n	800b968 <f_mount+0x28>
 800b964:	230b      	movs	r3, #11
 800b966:	e02b      	b.n	800b9c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b968:	4a17      	ldr	r2, [pc, #92]	@ (800b9c8 <f_mount+0x88>)
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b970:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d005      	beq.n	800b984 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b978:	69b8      	ldr	r0, [r7, #24]
 800b97a:	f7fe fd91 	bl	800a4a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	2200      	movs	r2, #0
 800b982:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d002      	beq.n	800b990 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	490d      	ldr	r1, [pc, #52]	@ (800b9c8 <f_mount+0x88>)
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <f_mount+0x66>
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d001      	beq.n	800b9aa <f_mount+0x6a>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e00a      	b.n	800b9c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b9aa:	f107 010c 	add.w	r1, r7, #12
 800b9ae:	f107 0308 	add.w	r3, r7, #8
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff fd41 	bl	800b43c <find_volume>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3720      	adds	r7, #32
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20004b68 	.word	0x20004b68

0800b9cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b098      	sub	sp, #96	@ 0x60
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d101      	bne.n	800b9e4 <f_open+0x18>
 800b9e0:	2309      	movs	r3, #9
 800b9e2:	e1a9      	b.n	800bd38 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b9ec:	79fa      	ldrb	r2, [r7, #7]
 800b9ee:	f107 0110 	add.w	r1, r7, #16
 800b9f2:	f107 0308 	add.w	r3, r7, #8
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff fd20 	bl	800b43c <find_volume>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ba02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f040 818d 	bne.w	800bd26 <f_open+0x35a>
		dj.obj.fs = fs;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	f107 0314 	add.w	r3, r7, #20
 800ba16:	4611      	mov	r1, r2
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7ff fc05 	bl	800b228 <follow_path>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ba24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d118      	bne.n	800ba5e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ba2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba30:	b25b      	sxtb	r3, r3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	da03      	bge.n	800ba3e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ba36:	2306      	movs	r3, #6
 800ba38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ba3c:	e00f      	b.n	800ba5e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	bf8c      	ite	hi
 800ba44:	2301      	movhi	r3, #1
 800ba46:	2300      	movls	r3, #0
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f107 0314 	add.w	r3, r7, #20
 800ba50:	4611      	mov	r1, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fbe2 	bl	800a21c <chk_lock>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	f003 031c 	and.w	r3, r3, #28
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d07f      	beq.n	800bb68 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ba68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d017      	beq.n	800baa0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ba70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba74:	2b04      	cmp	r3, #4
 800ba76:	d10e      	bne.n	800ba96 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ba78:	f7fe fc2a 	bl	800a2d0 <enq_lock>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d006      	beq.n	800ba90 <f_open+0xc4>
 800ba82:	f107 0314 	add.w	r3, r7, #20
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fb08 	bl	800b09c <dir_register>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	e000      	b.n	800ba92 <f_open+0xc6>
 800ba90:	2312      	movs	r3, #18
 800ba92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	f043 0308 	orr.w	r3, r3, #8
 800ba9c:	71fb      	strb	r3, [r7, #7]
 800ba9e:	e010      	b.n	800bac2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800baa0:	7ebb      	ldrb	r3, [r7, #26]
 800baa2:	f003 0311 	and.w	r3, r3, #17
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <f_open+0xe6>
					res = FR_DENIED;
 800baaa:	2307      	movs	r3, #7
 800baac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bab0:	e007      	b.n	800bac2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	f003 0304 	and.w	r3, r3, #4
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <f_open+0xf6>
 800babc:	2308      	movs	r3, #8
 800babe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bac2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d168      	bne.n	800bb9c <f_open+0x1d0>
 800baca:	79fb      	ldrb	r3, [r7, #7]
 800bacc:	f003 0308 	and.w	r3, r3, #8
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d063      	beq.n	800bb9c <f_open+0x1d0>
				dw = GET_FATTIME();
 800bad4:	f7fd fcd2 	bl	800947c <get_fattime>
 800bad8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800badc:	330e      	adds	r3, #14
 800bade:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fe faf5 	bl	800a0d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae8:	3316      	adds	r3, #22
 800baea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800baec:	4618      	mov	r0, r3
 800baee:	f7fe faef 	bl	800a0d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800baf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf4:	330b      	adds	r3, #11
 800baf6:	2220      	movs	r2, #32
 800baf8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bafe:	4611      	mov	r1, r2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff fa37 	bl	800af74 <ld_clust>
 800bb06:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fa4f 	bl	800afb2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bb14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb16:	331c      	adds	r3, #28
 800bb18:	2100      	movs	r1, #0
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fe fad8 	bl	800a0d0 <st_dword>
					fs->wflag = 1;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	2201      	movs	r2, #1
 800bb24:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bb26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d037      	beq.n	800bb9c <f_open+0x1d0>
						dw = fs->winsect;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb30:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bb32:	f107 0314 	add.w	r3, r7, #20
 800bb36:	2200      	movs	r2, #0
 800bb38:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fe ff63 	bl	800aa06 <remove_chain>
 800bb40:	4603      	mov	r3, r0
 800bb42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800bb46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d126      	bne.n	800bb9c <f_open+0x1d0>
							res = move_window(fs, dw);
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fe fd0c 	bl	800a570 <move_window>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb62:	3a01      	subs	r2, #1
 800bb64:	60da      	str	r2, [r3, #12]
 800bb66:	e019      	b.n	800bb9c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bb68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d115      	bne.n	800bb9c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bb70:	7ebb      	ldrb	r3, [r7, #26]
 800bb72:	f003 0310 	and.w	r3, r3, #16
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <f_open+0x1b6>
					res = FR_NO_FILE;
 800bb7a:	2304      	movs	r3, #4
 800bb7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bb80:	e00c      	b.n	800bb9c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bb82:	79fb      	ldrb	r3, [r7, #7]
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d007      	beq.n	800bb9c <f_open+0x1d0>
 800bb8c:	7ebb      	ldrb	r3, [r7, #26]
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <f_open+0x1d0>
						res = FR_DENIED;
 800bb96:	2307      	movs	r3, #7
 800bb98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bb9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d126      	bne.n	800bbf2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bba4:	79fb      	ldrb	r3, [r7, #7]
 800bba6:	f003 0308 	and.w	r3, r3, #8
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d003      	beq.n	800bbb6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bbae:	79fb      	ldrb	r3, [r7, #7]
 800bbb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbb4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bbbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	bf8c      	ite	hi
 800bbca:	2301      	movhi	r3, #1
 800bbcc:	2300      	movls	r3, #0
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f107 0314 	add.w	r3, r7, #20
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe fb99 	bl	800a310 <inc_lock>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <f_open+0x226>
 800bbec:	2302      	movs	r3, #2
 800bbee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bbf2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f040 8095 	bne.w	800bd26 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc00:	4611      	mov	r1, r2
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7ff f9b6 	bl	800af74 <ld_clust>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bc0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc10:	331c      	adds	r3, #28
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fe fa20 	bl	800a058 <ld_dword>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	88da      	ldrh	r2, [r3, #6]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	79fa      	ldrb	r2, [r7, #7]
 800bc36:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3330      	adds	r3, #48	@ 0x30
 800bc4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc52:	2100      	movs	r1, #0
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7fe fa86 	bl	800a166 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	f003 0320 	and.w	r3, r3, #32
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d060      	beq.n	800bd26 <f_open+0x35a>
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d05c      	beq.n	800bd26 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	68da      	ldr	r2, [r3, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	895b      	ldrh	r3, [r3, #10]
 800bc78:	025b      	lsls	r3, r3, #9
 800bc7a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc88:	e016      	b.n	800bcb8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fd28 	bl	800a6e4 <get_fat>
 800bc94:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bc96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d802      	bhi.n	800bca2 <f_open+0x2d6>
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca8:	d102      	bne.n	800bcb0 <f_open+0x2e4>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bcb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bcb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d103      	bne.n	800bcc8 <f_open+0x2fc>
 800bcc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bcc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d8e0      	bhi.n	800bc8a <f_open+0x2be>
				}
				fp->clust = clst;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bccc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bcce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d127      	bne.n	800bd26 <f_open+0x35a>
 800bcd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d022      	beq.n	800bd26 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fe fcdf 	bl	800a6a8 <clust2sect>
 800bcea:	6478      	str	r0, [r7, #68]	@ 0x44
 800bcec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d103      	bne.n	800bcfa <f_open+0x32e>
						res = FR_INT_ERR;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bcf8:	e015      	b.n	800bd26 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bcfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcfc:	0a5a      	lsrs	r2, r3, #9
 800bcfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd00:	441a      	add	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	7858      	ldrb	r0, [r3, #1]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a1a      	ldr	r2, [r3, #32]
 800bd14:	2301      	movs	r3, #1
 800bd16:	f7fe f929 	bl	8009f6c <disk_read>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <f_open+0x35a>
 800bd20:	2301      	movs	r3, #1
 800bd22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bd26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d002      	beq.n	800bd34 <f_open+0x368>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bd34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3760      	adds	r7, #96	@ 0x60
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08c      	sub	sp, #48	@ 0x30
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f107 0210 	add.w	r2, r7, #16
 800bd5e:	4611      	mov	r1, r2
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff fdb7 	bl	800b8d4 <validate>
 800bd66:	4603      	mov	r3, r0
 800bd68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bd6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d107      	bne.n	800bd84 <f_write+0x44>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	7d5b      	ldrb	r3, [r3, #21]
 800bd78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bd7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <f_write+0x4a>
 800bd84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd88:	e14b      	b.n	800c022 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	7d1b      	ldrb	r3, [r3, #20]
 800bd8e:	f003 0302 	and.w	r3, r3, #2
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <f_write+0x5a>
 800bd96:	2307      	movs	r3, #7
 800bd98:	e143      	b.n	800c022 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	699a      	ldr	r2, [r3, #24]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	441a      	add	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	f080 812d 	bcs.w	800c006 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	43db      	mvns	r3, r3
 800bdb2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bdb4:	e127      	b.n	800c006 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f040 80e3 	bne.w	800bf8a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	0a5b      	lsrs	r3, r3, #9
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	8952      	ldrh	r2, [r2, #10]
 800bdce:	3a01      	subs	r2, #1
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d143      	bne.n	800be62 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10c      	bne.n	800bdfc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d11a      	bne.n	800be24 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe fe6c 	bl	800aad0 <create_chain>
 800bdf8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bdfa:	e013      	b.n	800be24 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be00:	2b00      	cmp	r3, #0
 800be02:	d007      	beq.n	800be14 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	4619      	mov	r1, r3
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f7fe fef8 	bl	800ac00 <clmt_clust>
 800be10:	62b8      	str	r0, [r7, #40]	@ 0x28
 800be12:	e007      	b.n	800be24 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	69db      	ldr	r3, [r3, #28]
 800be1a:	4619      	mov	r1, r3
 800be1c:	4610      	mov	r0, r2
 800be1e:	f7fe fe57 	bl	800aad0 <create_chain>
 800be22:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800be24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 80f2 	beq.w	800c010 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800be2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d104      	bne.n	800be3c <f_write+0xfc>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2202      	movs	r2, #2
 800be36:	755a      	strb	r2, [r3, #21]
 800be38:	2302      	movs	r3, #2
 800be3a:	e0f2      	b.n	800c022 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be42:	d104      	bne.n	800be4e <f_write+0x10e>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	755a      	strb	r2, [r3, #21]
 800be4a:	2301      	movs	r3, #1
 800be4c:	e0e9      	b.n	800c022 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be52:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d102      	bne.n	800be62 <f_write+0x122>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be60:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	7d1b      	ldrb	r3, [r3, #20]
 800be66:	b25b      	sxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	da18      	bge.n	800be9e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	7858      	ldrb	r0, [r3, #1]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6a1a      	ldr	r2, [r3, #32]
 800be7a:	2301      	movs	r3, #1
 800be7c:	f7fe f896 	bl	8009fac <disk_write>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <f_write+0x150>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2201      	movs	r2, #1
 800be8a:	755a      	strb	r2, [r3, #21]
 800be8c:	2301      	movs	r3, #1
 800be8e:	e0c8      	b.n	800c022 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	7d1b      	ldrb	r3, [r3, #20]
 800be94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	4619      	mov	r1, r3
 800bea6:	4610      	mov	r0, r2
 800bea8:	f7fe fbfe 	bl	800a6a8 <clust2sect>
 800beac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d104      	bne.n	800bebe <f_write+0x17e>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2202      	movs	r2, #2
 800beb8:	755a      	strb	r2, [r3, #21]
 800beba:	2302      	movs	r3, #2
 800bebc:	e0b1      	b.n	800c022 <f_write+0x2e2>
			sect += csect;
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	4413      	add	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	0a5b      	lsrs	r3, r3, #9
 800beca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800becc:	6a3b      	ldr	r3, [r7, #32]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d03c      	beq.n	800bf4c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	4413      	add	r3, r2
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	8952      	ldrh	r2, [r2, #10]
 800bedc:	4293      	cmp	r3, r2
 800bede:	d905      	bls.n	800beec <f_write+0x1ac>
					cc = fs->csize - csect;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	895b      	ldrh	r3, [r3, #10]
 800bee4:	461a      	mov	r2, r3
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	7858      	ldrb	r0, [r3, #1]
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	69f9      	ldr	r1, [r7, #28]
 800bef6:	f7fe f859 	bl	8009fac <disk_write>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d004      	beq.n	800bf0a <f_write+0x1ca>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2201      	movs	r2, #1
 800bf04:	755a      	strb	r2, [r3, #21]
 800bf06:	2301      	movs	r3, #1
 800bf08:	e08b      	b.n	800c022 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6a1a      	ldr	r2, [r3, #32]
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	6a3a      	ldr	r2, [r7, #32]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d915      	bls.n	800bf44 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6a1a      	ldr	r2, [r3, #32]
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	025b      	lsls	r3, r3, #9
 800bf28:	69fa      	ldr	r2, [r7, #28]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf30:	4619      	mov	r1, r3
 800bf32:	f7fe f8f8 	bl	800a126 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	7d1b      	ldrb	r3, [r3, #20]
 800bf3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	025b      	lsls	r3, r3, #9
 800bf48:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bf4a:	e03f      	b.n	800bfcc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d016      	beq.n	800bf84 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	699a      	ldr	r2, [r3, #24]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d210      	bcs.n	800bf84 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	7858      	ldrb	r0, [r3, #1]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	f7fd fffc 	bl	8009f6c <disk_read>
 800bf74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d004      	beq.n	800bf84 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	755a      	strb	r2, [r3, #21]
 800bf80:	2301      	movs	r3, #1
 800bf82:	e04e      	b.n	800c022 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	699b      	ldr	r3, [r3, #24]
 800bf8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf92:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bf96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bf98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d901      	bls.n	800bfa4 <f_write+0x264>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb2:	4413      	add	r3, r2
 800bfb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfb6:	69f9      	ldr	r1, [r7, #28]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe f8b4 	bl	800a126 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	7d1b      	ldrb	r3, [r3, #20]
 800bfc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bfcc:	69fa      	ldr	r2, [r7, #28]
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	4413      	add	r3, r2
 800bfd2:	61fb      	str	r3, [r7, #28]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	699a      	ldr	r2, [r3, #24]
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfda:	441a      	add	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	619a      	str	r2, [r3, #24]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	bf38      	it	cc
 800bfec:	461a      	movcc	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	60da      	str	r2, [r3, #12]
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	441a      	add	r2, r3
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f47f aed4 	bne.w	800bdb6 <f_write+0x76>
 800c00e:	e000      	b.n	800c012 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c010:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	7d1b      	ldrb	r3, [r3, #20]
 800c016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3730      	adds	r7, #48	@ 0x30
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b086      	sub	sp, #24
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f107 0208 	add.w	r2, r7, #8
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff fc4a 	bl	800b8d4 <validate>
 800c040:	4603      	mov	r3, r0
 800c042:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c044:	7dfb      	ldrb	r3, [r7, #23]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d168      	bne.n	800c11c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	7d1b      	ldrb	r3, [r3, #20]
 800c04e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c052:	2b00      	cmp	r3, #0
 800c054:	d062      	beq.n	800c11c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	7d1b      	ldrb	r3, [r3, #20]
 800c05a:	b25b      	sxtb	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	da15      	bge.n	800c08c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	7858      	ldrb	r0, [r3, #1]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a1a      	ldr	r2, [r3, #32]
 800c06e:	2301      	movs	r3, #1
 800c070:	f7fd ff9c 	bl	8009fac <disk_write>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <f_sync+0x54>
 800c07a:	2301      	movs	r3, #1
 800c07c:	e04f      	b.n	800c11e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7d1b      	ldrb	r3, [r3, #20]
 800c082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c086:	b2da      	uxtb	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c08c:	f7fd f9f6 	bl	800947c <get_fattime>
 800c090:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c098:	4619      	mov	r1, r3
 800c09a:	4610      	mov	r0, r2
 800c09c:	f7fe fa68 	bl	800a570 <move_window>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c0a4:	7dfb      	ldrb	r3, [r7, #23]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d138      	bne.n	800c11c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	330b      	adds	r3, #11
 800c0b4:	781a      	ldrb	r2, [r3, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	330b      	adds	r3, #11
 800c0ba:	f042 0220 	orr.w	r2, r2, #32
 800c0be:	b2d2      	uxtb	r2, r2
 800c0c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6818      	ldr	r0, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	68f9      	ldr	r1, [r7, #12]
 800c0ce:	f7fe ff70 	bl	800afb2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f103 021c 	add.w	r2, r3, #28
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f7fd fff6 	bl	800a0d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	3316      	adds	r3, #22
 800c0e8:	6939      	ldr	r1, [r7, #16]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fd fff0 	bl	800a0d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	3312      	adds	r3, #18
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fd ffd0 	bl	800a09c <st_word>
					fs->wflag = 1;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2201      	movs	r2, #1
 800c100:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	4618      	mov	r0, r3
 800c106:	f7fe fa61 	bl	800a5cc <sync_fs>
 800c10a:	4603      	mov	r3, r0
 800c10c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	7d1b      	ldrb	r3, [r3, #20]
 800c112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c116:	b2da      	uxtb	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3718      	adds	r7, #24
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff ff7b 	bl	800c02a <f_sync>
 800c134:	4603      	mov	r3, r0
 800c136:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c138:	7bfb      	ldrb	r3, [r7, #15]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d118      	bne.n	800c170 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f107 0208 	add.w	r2, r7, #8
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff fbc4 	bl	800b8d4 <validate>
 800c14c:	4603      	mov	r3, r0
 800c14e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10c      	bne.n	800c170 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe f966 	bl	800a42c <dec_lock>
 800c160:	4603      	mov	r3, r0
 800c162:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c164:	7bfb      	ldrb	r3, [r7, #15]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c170:	7bfb      	ldrb	r3, [r7, #15]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b096      	sub	sp, #88	@ 0x58
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c182:	f107 0108 	add.w	r1, r7, #8
 800c186:	1d3b      	adds	r3, r7, #4
 800c188:	2202      	movs	r2, #2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7ff f956 	bl	800b43c <find_volume>
 800c190:	4603      	mov	r3, r0
 800c192:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800c19a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f040 80ec 	bne.w	800c37c <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	f107 030c 	add.w	r3, r7, #12
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff f83b 	bl	800b228 <follow_path>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800c1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d102      	bne.n	800c1c6 <f_mkdir+0x4c>
 800c1c0:	2308      	movs	r3, #8
 800c1c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800c1c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	f040 80d6 	bne.w	800c37c <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800c1d0:	f107 030c 	add.w	r3, r7, #12
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe fc7a 	bl	800aad0 <create_chain>
 800c1dc:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	895b      	ldrh	r3, [r3, #10]
 800c1e2:	025b      	lsls	r3, r3, #9
 800c1e4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800c1ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d102      	bne.n	800c1f8 <f_mkdir+0x7e>
 800c1f2:	2307      	movs	r3, #7
 800c1f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800c1f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d102      	bne.n	800c204 <f_mkdir+0x8a>
 800c1fe:	2302      	movs	r3, #2
 800c200:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20a:	d102      	bne.n	800c212 <f_mkdir+0x98>
 800c20c:	2301      	movs	r3, #1
 800c20e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800c212:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c216:	2b00      	cmp	r3, #0
 800c218:	d106      	bne.n	800c228 <f_mkdir+0xae>
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fe f963 	bl	800a4e8 <sync_window>
 800c222:	4603      	mov	r3, r0
 800c224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800c228:	f7fd f928 	bl	800947c <get_fattime>
 800c22c:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800c22e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c232:	2b00      	cmp	r3, #0
 800c234:	d16a      	bne.n	800c30c <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe fa34 	bl	800a6a8 <clust2sect>
 800c240:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	3330      	adds	r3, #48	@ 0x30
 800c246:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800c248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c24c:	2100      	movs	r1, #0
 800c24e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c250:	f7fd ff89 	bl	800a166 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800c254:	220b      	movs	r2, #11
 800c256:	2120      	movs	r1, #32
 800c258:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c25a:	f7fd ff84 	bl	800a166 <mem_set>
					dir[DIR_Name] = '.';
 800c25e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c260:	222e      	movs	r2, #46	@ 0x2e
 800c262:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800c264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c266:	330b      	adds	r3, #11
 800c268:	2210      	movs	r2, #16
 800c26a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800c26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c26e:	3316      	adds	r3, #22
 800c270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c272:	4618      	mov	r0, r3
 800c274:	f7fd ff2c 	bl	800a0d0 <st_dword>
					st_clust(fs, dir, dcl);
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c27c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fe fe97 	bl	800afb2 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800c284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c286:	3320      	adds	r3, #32
 800c288:	2220      	movs	r2, #32
 800c28a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fd ff4a 	bl	800a126 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800c292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c294:	3321      	adds	r3, #33	@ 0x21
 800c296:	222e      	movs	r2, #46	@ 0x2e
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d106      	bne.n	800c2b4 <f_mkdir+0x13a>
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d101      	bne.n	800c2b4 <f_mkdir+0x13a>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800c2b4:	68b8      	ldr	r0, [r7, #8]
 800c2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b8:	3320      	adds	r3, #32
 800c2ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2bc:	4619      	mov	r1, r3
 800c2be:	f7fe fe78 	bl	800afb2 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	895b      	ldrh	r3, [r3, #10]
 800c2c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2c8:	e01b      	b.n	800c302 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800c2ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fe f903 	bl	800a4e8 <sync_window>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800c2e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10c      	bne.n	800c30a <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800c2f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c2f8:	f7fd ff35 	bl	800a166 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c2fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2fe:	3b01      	subs	r3, #1
 800c300:	653b      	str	r3, [r7, #80]	@ 0x50
 800c302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e0      	bne.n	800c2ca <f_mkdir+0x150>
 800c308:	e000      	b.n	800c30c <f_mkdir+0x192>
					if (res != FR_OK) break;
 800c30a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800c30c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c310:	2b00      	cmp	r3, #0
 800c312:	d107      	bne.n	800c324 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800c314:	f107 030c 	add.w	r3, r7, #12
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe febf 	bl	800b09c <dir_register>
 800c31e:	4603      	mov	r3, r0
 800c320:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800c324:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d120      	bne.n	800c36e <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800c330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c332:	3316      	adds	r3, #22
 800c334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c336:	4618      	mov	r0, r3
 800c338:	f7fd feca 	bl	800a0d0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c340:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe fe35 	bl	800afb2 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800c348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c34a:	330b      	adds	r3, #11
 800c34c:	2210      	movs	r2, #16
 800c34e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	2201      	movs	r2, #1
 800c354:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800c356:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10e      	bne.n	800c37c <f_mkdir+0x202>
					res = sync_fs(fs);
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	4618      	mov	r0, r3
 800c362:	f7fe f933 	bl	800a5cc <sync_fs>
 800c366:	4603      	mov	r3, r0
 800c368:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800c36c:	e006      	b.n	800c37c <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800c36e:	f107 030c 	add.w	r3, r7, #12
 800c372:	2200      	movs	r2, #0
 800c374:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c376:	4618      	mov	r0, r3
 800c378:	f7fe fb45 	bl	800aa06 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c37c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800c380:	4618      	mov	r0, r3
 800c382:	3758      	adds	r7, #88	@ 0x58
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c388:	b480      	push	{r7}
 800c38a:	b087      	sub	sp, #28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c396:	2301      	movs	r3, #1
 800c398:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c39e:	4b1e      	ldr	r3, [pc, #120]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3a0:	7a5b      	ldrb	r3, [r3, #9]
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d131      	bne.n	800c40c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c3a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3aa:	7a5b      	ldrb	r3, [r3, #9]
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	4b19      	ldr	r3, [pc, #100]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c3b6:	4b18      	ldr	r3, [pc, #96]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3b8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	4a16      	ldr	r2, [pc, #88]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c3c6:	4b14      	ldr	r3, [pc, #80]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3c8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	4b12      	ldr	r3, [pc, #72]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3d0:	4413      	add	r3, r2
 800c3d2:	79fa      	ldrb	r2, [r7, #7]
 800c3d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c3d6:	4b10      	ldr	r3, [pc, #64]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3d8:	7a5b      	ldrb	r3, [r3, #9]
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	b2d1      	uxtb	r1, r2
 800c3e0:	4a0d      	ldr	r2, [pc, #52]	@ (800c418 <FATFS_LinkDriverEx+0x90>)
 800c3e2:	7251      	strb	r1, [r2, #9]
 800c3e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3e6:	7dbb      	ldrb	r3, [r7, #22]
 800c3e8:	3330      	adds	r3, #48	@ 0x30
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	223a      	movs	r2, #58	@ 0x3a
 800c3f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	3302      	adds	r3, #2
 800c3fc:	222f      	movs	r2, #47	@ 0x2f
 800c3fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	3303      	adds	r3, #3
 800c404:	2200      	movs	r2, #0
 800c406:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	371c      	adds	r7, #28
 800c412:	46bd      	mov	sp, r7
 800c414:	bc80      	pop	{r7}
 800c416:	4770      	bx	lr
 800c418:	20004b90 	.word	0x20004b90

0800c41c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c426:	2200      	movs	r2, #0
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7ff ffac 	bl	800c388 <FATFS_LinkDriverEx>
 800c430:	4603      	mov	r3, r0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <__cvt>:
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c440:	461d      	mov	r5, r3
 800c442:	bfbb      	ittet	lt
 800c444:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800c448:	461d      	movlt	r5, r3
 800c44a:	2300      	movge	r3, #0
 800c44c:	232d      	movlt	r3, #45	@ 0x2d
 800c44e:	b088      	sub	sp, #32
 800c450:	4614      	mov	r4, r2
 800c452:	bfb8      	it	lt
 800c454:	4614      	movlt	r4, r2
 800c456:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c458:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c45a:	7013      	strb	r3, [r2, #0]
 800c45c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c45e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800c462:	f023 0820 	bic.w	r8, r3, #32
 800c466:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c46a:	d005      	beq.n	800c478 <__cvt+0x3e>
 800c46c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c470:	d100      	bne.n	800c474 <__cvt+0x3a>
 800c472:	3601      	adds	r6, #1
 800c474:	2302      	movs	r3, #2
 800c476:	e000      	b.n	800c47a <__cvt+0x40>
 800c478:	2303      	movs	r3, #3
 800c47a:	aa07      	add	r2, sp, #28
 800c47c:	9204      	str	r2, [sp, #16]
 800c47e:	aa06      	add	r2, sp, #24
 800c480:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c484:	e9cd 3600 	strd	r3, r6, [sp]
 800c488:	4622      	mov	r2, r4
 800c48a:	462b      	mov	r3, r5
 800c48c:	f000 fef0 	bl	800d270 <_dtoa_r>
 800c490:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c494:	4607      	mov	r7, r0
 800c496:	d119      	bne.n	800c4cc <__cvt+0x92>
 800c498:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c49a:	07db      	lsls	r3, r3, #31
 800c49c:	d50e      	bpl.n	800c4bc <__cvt+0x82>
 800c49e:	eb00 0906 	add.w	r9, r0, r6
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	f7f4 fa95 	bl	80009d8 <__aeabi_dcmpeq>
 800c4ae:	b108      	cbz	r0, 800c4b4 <__cvt+0x7a>
 800c4b0:	f8cd 901c 	str.w	r9, [sp, #28]
 800c4b4:	2230      	movs	r2, #48	@ 0x30
 800c4b6:	9b07      	ldr	r3, [sp, #28]
 800c4b8:	454b      	cmp	r3, r9
 800c4ba:	d31e      	bcc.n	800c4fa <__cvt+0xc0>
 800c4bc:	4638      	mov	r0, r7
 800c4be:	9b07      	ldr	r3, [sp, #28]
 800c4c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c4c2:	1bdb      	subs	r3, r3, r7
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	b008      	add	sp, #32
 800c4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c4d0:	eb00 0906 	add.w	r9, r0, r6
 800c4d4:	d1e5      	bne.n	800c4a2 <__cvt+0x68>
 800c4d6:	7803      	ldrb	r3, [r0, #0]
 800c4d8:	2b30      	cmp	r3, #48	@ 0x30
 800c4da:	d10a      	bne.n	800c4f2 <__cvt+0xb8>
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2300      	movs	r3, #0
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	4629      	mov	r1, r5
 800c4e4:	f7f4 fa78 	bl	80009d8 <__aeabi_dcmpeq>
 800c4e8:	b918      	cbnz	r0, 800c4f2 <__cvt+0xb8>
 800c4ea:	f1c6 0601 	rsb	r6, r6, #1
 800c4ee:	f8ca 6000 	str.w	r6, [sl]
 800c4f2:	f8da 3000 	ldr.w	r3, [sl]
 800c4f6:	4499      	add	r9, r3
 800c4f8:	e7d3      	b.n	800c4a2 <__cvt+0x68>
 800c4fa:	1c59      	adds	r1, r3, #1
 800c4fc:	9107      	str	r1, [sp, #28]
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e7d9      	b.n	800c4b6 <__cvt+0x7c>

0800c502 <__exponent>:
 800c502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c504:	2900      	cmp	r1, #0
 800c506:	bfb6      	itet	lt
 800c508:	232d      	movlt	r3, #45	@ 0x2d
 800c50a:	232b      	movge	r3, #43	@ 0x2b
 800c50c:	4249      	neglt	r1, r1
 800c50e:	2909      	cmp	r1, #9
 800c510:	7002      	strb	r2, [r0, #0]
 800c512:	7043      	strb	r3, [r0, #1]
 800c514:	dd29      	ble.n	800c56a <__exponent+0x68>
 800c516:	f10d 0307 	add.w	r3, sp, #7
 800c51a:	461d      	mov	r5, r3
 800c51c:	270a      	movs	r7, #10
 800c51e:	fbb1 f6f7 	udiv	r6, r1, r7
 800c522:	461a      	mov	r2, r3
 800c524:	fb07 1416 	mls	r4, r7, r6, r1
 800c528:	3430      	adds	r4, #48	@ 0x30
 800c52a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c52e:	460c      	mov	r4, r1
 800c530:	2c63      	cmp	r4, #99	@ 0x63
 800c532:	4631      	mov	r1, r6
 800c534:	f103 33ff 	add.w	r3, r3, #4294967295
 800c538:	dcf1      	bgt.n	800c51e <__exponent+0x1c>
 800c53a:	3130      	adds	r1, #48	@ 0x30
 800c53c:	1e94      	subs	r4, r2, #2
 800c53e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c542:	4623      	mov	r3, r4
 800c544:	1c41      	adds	r1, r0, #1
 800c546:	42ab      	cmp	r3, r5
 800c548:	d30a      	bcc.n	800c560 <__exponent+0x5e>
 800c54a:	f10d 0309 	add.w	r3, sp, #9
 800c54e:	1a9b      	subs	r3, r3, r2
 800c550:	42ac      	cmp	r4, r5
 800c552:	bf88      	it	hi
 800c554:	2300      	movhi	r3, #0
 800c556:	3302      	adds	r3, #2
 800c558:	4403      	add	r3, r0
 800c55a:	1a18      	subs	r0, r3, r0
 800c55c:	b003      	add	sp, #12
 800c55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c560:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c564:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c568:	e7ed      	b.n	800c546 <__exponent+0x44>
 800c56a:	2330      	movs	r3, #48	@ 0x30
 800c56c:	3130      	adds	r1, #48	@ 0x30
 800c56e:	7083      	strb	r3, [r0, #2]
 800c570:	70c1      	strb	r1, [r0, #3]
 800c572:	1d03      	adds	r3, r0, #4
 800c574:	e7f1      	b.n	800c55a <__exponent+0x58>
	...

0800c578 <_printf_float>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	b091      	sub	sp, #68	@ 0x44
 800c57e:	460c      	mov	r4, r1
 800c580:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800c584:	4616      	mov	r6, r2
 800c586:	461f      	mov	r7, r3
 800c588:	4605      	mov	r5, r0
 800c58a:	f000 fd53 	bl	800d034 <_localeconv_r>
 800c58e:	6803      	ldr	r3, [r0, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	9308      	str	r3, [sp, #32]
 800c594:	f7f3 fdf4 	bl	8000180 <strlen>
 800c598:	2300      	movs	r3, #0
 800c59a:	930e      	str	r3, [sp, #56]	@ 0x38
 800c59c:	f8d8 3000 	ldr.w	r3, [r8]
 800c5a0:	9009      	str	r0, [sp, #36]	@ 0x24
 800c5a2:	3307      	adds	r3, #7
 800c5a4:	f023 0307 	bic.w	r3, r3, #7
 800c5a8:	f103 0208 	add.w	r2, r3, #8
 800c5ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c5b0:	f8d4 b000 	ldr.w	fp, [r4]
 800c5b4:	f8c8 2000 	str.w	r2, [r8]
 800c5b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c5c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5c2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c5ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c5d2:	4b9c      	ldr	r3, [pc, #624]	@ (800c844 <_printf_float+0x2cc>)
 800c5d4:	f7f4 fa32 	bl	8000a3c <__aeabi_dcmpun>
 800c5d8:	bb70      	cbnz	r0, 800c638 <_printf_float+0xc0>
 800c5da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c5de:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e2:	4b98      	ldr	r3, [pc, #608]	@ (800c844 <_printf_float+0x2cc>)
 800c5e4:	f7f4 fa0c 	bl	8000a00 <__aeabi_dcmple>
 800c5e8:	bb30      	cbnz	r0, 800c638 <_printf_float+0xc0>
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	4649      	mov	r1, r9
 800c5f2:	f7f4 f9fb 	bl	80009ec <__aeabi_dcmplt>
 800c5f6:	b110      	cbz	r0, 800c5fe <_printf_float+0x86>
 800c5f8:	232d      	movs	r3, #45	@ 0x2d
 800c5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5fe:	4a92      	ldr	r2, [pc, #584]	@ (800c848 <_printf_float+0x2d0>)
 800c600:	4b92      	ldr	r3, [pc, #584]	@ (800c84c <_printf_float+0x2d4>)
 800c602:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c606:	bf8c      	ite	hi
 800c608:	4690      	movhi	r8, r2
 800c60a:	4698      	movls	r8, r3
 800c60c:	2303      	movs	r3, #3
 800c60e:	f04f 0900 	mov.w	r9, #0
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	f02b 0304 	bic.w	r3, fp, #4
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	4633      	mov	r3, r6
 800c61c:	4621      	mov	r1, r4
 800c61e:	4628      	mov	r0, r5
 800c620:	9700      	str	r7, [sp, #0]
 800c622:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c624:	f000 f9d4 	bl	800c9d0 <_printf_common>
 800c628:	3001      	adds	r0, #1
 800c62a:	f040 8090 	bne.w	800c74e <_printf_float+0x1d6>
 800c62e:	f04f 30ff 	mov.w	r0, #4294967295
 800c632:	b011      	add	sp, #68	@ 0x44
 800c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c638:	4642      	mov	r2, r8
 800c63a:	464b      	mov	r3, r9
 800c63c:	4640      	mov	r0, r8
 800c63e:	4649      	mov	r1, r9
 800c640:	f7f4 f9fc 	bl	8000a3c <__aeabi_dcmpun>
 800c644:	b148      	cbz	r0, 800c65a <_printf_float+0xe2>
 800c646:	464b      	mov	r3, r9
 800c648:	2b00      	cmp	r3, #0
 800c64a:	bfb8      	it	lt
 800c64c:	232d      	movlt	r3, #45	@ 0x2d
 800c64e:	4a80      	ldr	r2, [pc, #512]	@ (800c850 <_printf_float+0x2d8>)
 800c650:	bfb8      	it	lt
 800c652:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c656:	4b7f      	ldr	r3, [pc, #508]	@ (800c854 <_printf_float+0x2dc>)
 800c658:	e7d3      	b.n	800c602 <_printf_float+0x8a>
 800c65a:	6863      	ldr	r3, [r4, #4]
 800c65c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	d13f      	bne.n	800c6e4 <_printf_float+0x16c>
 800c664:	2306      	movs	r3, #6
 800c666:	6063      	str	r3, [r4, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800c66e:	6023      	str	r3, [r4, #0]
 800c670:	9206      	str	r2, [sp, #24]
 800c672:	aa0e      	add	r2, sp, #56	@ 0x38
 800c674:	e9cd a204 	strd	sl, r2, [sp, #16]
 800c678:	aa0d      	add	r2, sp, #52	@ 0x34
 800c67a:	9203      	str	r2, [sp, #12]
 800c67c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800c680:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c684:	6863      	ldr	r3, [r4, #4]
 800c686:	4642      	mov	r2, r8
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	4628      	mov	r0, r5
 800c68c:	464b      	mov	r3, r9
 800c68e:	910a      	str	r1, [sp, #40]	@ 0x28
 800c690:	f7ff fed3 	bl	800c43a <__cvt>
 800c694:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c696:	4680      	mov	r8, r0
 800c698:	2947      	cmp	r1, #71	@ 0x47
 800c69a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c69c:	d128      	bne.n	800c6f0 <_printf_float+0x178>
 800c69e:	1cc8      	adds	r0, r1, #3
 800c6a0:	db02      	blt.n	800c6a8 <_printf_float+0x130>
 800c6a2:	6863      	ldr	r3, [r4, #4]
 800c6a4:	4299      	cmp	r1, r3
 800c6a6:	dd40      	ble.n	800c72a <_printf_float+0x1b2>
 800c6a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c6ac:	fa5f fa8a 	uxtb.w	sl, sl
 800c6b0:	4652      	mov	r2, sl
 800c6b2:	3901      	subs	r1, #1
 800c6b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c6b8:	910d      	str	r1, [sp, #52]	@ 0x34
 800c6ba:	f7ff ff22 	bl	800c502 <__exponent>
 800c6be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6c0:	4681      	mov	r9, r0
 800c6c2:	1813      	adds	r3, r2, r0
 800c6c4:	2a01      	cmp	r2, #1
 800c6c6:	6123      	str	r3, [r4, #16]
 800c6c8:	dc02      	bgt.n	800c6d0 <_printf_float+0x158>
 800c6ca:	6822      	ldr	r2, [r4, #0]
 800c6cc:	07d2      	lsls	r2, r2, #31
 800c6ce:	d501      	bpl.n	800c6d4 <_printf_float+0x15c>
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	6123      	str	r3, [r4, #16]
 800c6d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d09e      	beq.n	800c61a <_printf_float+0xa2>
 800c6dc:	232d      	movs	r3, #45	@ 0x2d
 800c6de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6e2:	e79a      	b.n	800c61a <_printf_float+0xa2>
 800c6e4:	2947      	cmp	r1, #71	@ 0x47
 800c6e6:	d1bf      	bne.n	800c668 <_printf_float+0xf0>
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1bd      	bne.n	800c668 <_printf_float+0xf0>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e7ba      	b.n	800c666 <_printf_float+0xee>
 800c6f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c6f4:	d9dc      	bls.n	800c6b0 <_printf_float+0x138>
 800c6f6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c6fa:	d118      	bne.n	800c72e <_printf_float+0x1b6>
 800c6fc:	2900      	cmp	r1, #0
 800c6fe:	6863      	ldr	r3, [r4, #4]
 800c700:	dd0b      	ble.n	800c71a <_printf_float+0x1a2>
 800c702:	6121      	str	r1, [r4, #16]
 800c704:	b913      	cbnz	r3, 800c70c <_printf_float+0x194>
 800c706:	6822      	ldr	r2, [r4, #0]
 800c708:	07d0      	lsls	r0, r2, #31
 800c70a:	d502      	bpl.n	800c712 <_printf_float+0x19a>
 800c70c:	3301      	adds	r3, #1
 800c70e:	440b      	add	r3, r1
 800c710:	6123      	str	r3, [r4, #16]
 800c712:	f04f 0900 	mov.w	r9, #0
 800c716:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c718:	e7dc      	b.n	800c6d4 <_printf_float+0x15c>
 800c71a:	b913      	cbnz	r3, 800c722 <_printf_float+0x1aa>
 800c71c:	6822      	ldr	r2, [r4, #0]
 800c71e:	07d2      	lsls	r2, r2, #31
 800c720:	d501      	bpl.n	800c726 <_printf_float+0x1ae>
 800c722:	3302      	adds	r3, #2
 800c724:	e7f4      	b.n	800c710 <_printf_float+0x198>
 800c726:	2301      	movs	r3, #1
 800c728:	e7f2      	b.n	800c710 <_printf_float+0x198>
 800c72a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c730:	4299      	cmp	r1, r3
 800c732:	db05      	blt.n	800c740 <_printf_float+0x1c8>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	6121      	str	r1, [r4, #16]
 800c738:	07d8      	lsls	r0, r3, #31
 800c73a:	d5ea      	bpl.n	800c712 <_printf_float+0x19a>
 800c73c:	1c4b      	adds	r3, r1, #1
 800c73e:	e7e7      	b.n	800c710 <_printf_float+0x198>
 800c740:	2900      	cmp	r1, #0
 800c742:	bfcc      	ite	gt
 800c744:	2201      	movgt	r2, #1
 800c746:	f1c1 0202 	rsble	r2, r1, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	e7e0      	b.n	800c710 <_printf_float+0x198>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	055a      	lsls	r2, r3, #21
 800c752:	d407      	bmi.n	800c764 <_printf_float+0x1ec>
 800c754:	6923      	ldr	r3, [r4, #16]
 800c756:	4642      	mov	r2, r8
 800c758:	4631      	mov	r1, r6
 800c75a:	4628      	mov	r0, r5
 800c75c:	47b8      	blx	r7
 800c75e:	3001      	adds	r0, #1
 800c760:	d12b      	bne.n	800c7ba <_printf_float+0x242>
 800c762:	e764      	b.n	800c62e <_printf_float+0xb6>
 800c764:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c768:	f240 80dc 	bls.w	800c924 <_printf_float+0x3ac>
 800c76c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c770:	2200      	movs	r2, #0
 800c772:	2300      	movs	r3, #0
 800c774:	f7f4 f930 	bl	80009d8 <__aeabi_dcmpeq>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d033      	beq.n	800c7e4 <_printf_float+0x26c>
 800c77c:	2301      	movs	r3, #1
 800c77e:	4631      	mov	r1, r6
 800c780:	4628      	mov	r0, r5
 800c782:	4a35      	ldr	r2, [pc, #212]	@ (800c858 <_printf_float+0x2e0>)
 800c784:	47b8      	blx	r7
 800c786:	3001      	adds	r0, #1
 800c788:	f43f af51 	beq.w	800c62e <_printf_float+0xb6>
 800c78c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800c790:	4543      	cmp	r3, r8
 800c792:	db02      	blt.n	800c79a <_printf_float+0x222>
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	07d8      	lsls	r0, r3, #31
 800c798:	d50f      	bpl.n	800c7ba <_printf_float+0x242>
 800c79a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c79e:	4631      	mov	r1, r6
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	47b8      	blx	r7
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	f43f af42 	beq.w	800c62e <_printf_float+0xb6>
 800c7aa:	f04f 0900 	mov.w	r9, #0
 800c7ae:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7b2:	f104 0a1a 	add.w	sl, r4, #26
 800c7b6:	45c8      	cmp	r8, r9
 800c7b8:	dc09      	bgt.n	800c7ce <_printf_float+0x256>
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	079b      	lsls	r3, r3, #30
 800c7be:	f100 8102 	bmi.w	800c9c6 <_printf_float+0x44e>
 800c7c2:	68e0      	ldr	r0, [r4, #12]
 800c7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7c6:	4298      	cmp	r0, r3
 800c7c8:	bfb8      	it	lt
 800c7ca:	4618      	movlt	r0, r3
 800c7cc:	e731      	b.n	800c632 <_printf_float+0xba>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4652      	mov	r2, sl
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	47b8      	blx	r7
 800c7d8:	3001      	adds	r0, #1
 800c7da:	f43f af28 	beq.w	800c62e <_printf_float+0xb6>
 800c7de:	f109 0901 	add.w	r9, r9, #1
 800c7e2:	e7e8      	b.n	800c7b6 <_printf_float+0x23e>
 800c7e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	dc38      	bgt.n	800c85c <_printf_float+0x2e4>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	4631      	mov	r1, r6
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	4a19      	ldr	r2, [pc, #100]	@ (800c858 <_printf_float+0x2e0>)
 800c7f2:	47b8      	blx	r7
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	f43f af1a 	beq.w	800c62e <_printf_float+0xb6>
 800c7fa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800c7fe:	ea59 0303 	orrs.w	r3, r9, r3
 800c802:	d102      	bne.n	800c80a <_printf_float+0x292>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	07d9      	lsls	r1, r3, #31
 800c808:	d5d7      	bpl.n	800c7ba <_printf_float+0x242>
 800c80a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c80e:	4631      	mov	r1, r6
 800c810:	4628      	mov	r0, r5
 800c812:	47b8      	blx	r7
 800c814:	3001      	adds	r0, #1
 800c816:	f43f af0a 	beq.w	800c62e <_printf_float+0xb6>
 800c81a:	f04f 0a00 	mov.w	sl, #0
 800c81e:	f104 0b1a 	add.w	fp, r4, #26
 800c822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c824:	425b      	negs	r3, r3
 800c826:	4553      	cmp	r3, sl
 800c828:	dc01      	bgt.n	800c82e <_printf_float+0x2b6>
 800c82a:	464b      	mov	r3, r9
 800c82c:	e793      	b.n	800c756 <_printf_float+0x1de>
 800c82e:	2301      	movs	r3, #1
 800c830:	465a      	mov	r2, fp
 800c832:	4631      	mov	r1, r6
 800c834:	4628      	mov	r0, r5
 800c836:	47b8      	blx	r7
 800c838:	3001      	adds	r0, #1
 800c83a:	f43f aef8 	beq.w	800c62e <_printf_float+0xb6>
 800c83e:	f10a 0a01 	add.w	sl, sl, #1
 800c842:	e7ee      	b.n	800c822 <_printf_float+0x2aa>
 800c844:	7fefffff 	.word	0x7fefffff
 800c848:	0800f698 	.word	0x0800f698
 800c84c:	0800f694 	.word	0x0800f694
 800c850:	0800f6a0 	.word	0x0800f6a0
 800c854:	0800f69c 	.word	0x0800f69c
 800c858:	0800f6a4 	.word	0x0800f6a4
 800c85c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c85e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c862:	4553      	cmp	r3, sl
 800c864:	bfa8      	it	ge
 800c866:	4653      	movge	r3, sl
 800c868:	2b00      	cmp	r3, #0
 800c86a:	4699      	mov	r9, r3
 800c86c:	dc36      	bgt.n	800c8dc <_printf_float+0x364>
 800c86e:	f04f 0b00 	mov.w	fp, #0
 800c872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c876:	f104 021a 	add.w	r2, r4, #26
 800c87a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c87c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c87e:	eba3 0309 	sub.w	r3, r3, r9
 800c882:	455b      	cmp	r3, fp
 800c884:	dc31      	bgt.n	800c8ea <_printf_float+0x372>
 800c886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c888:	459a      	cmp	sl, r3
 800c88a:	dc3a      	bgt.n	800c902 <_printf_float+0x38a>
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	07da      	lsls	r2, r3, #31
 800c890:	d437      	bmi.n	800c902 <_printf_float+0x38a>
 800c892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c894:	ebaa 0903 	sub.w	r9, sl, r3
 800c898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c89a:	ebaa 0303 	sub.w	r3, sl, r3
 800c89e:	4599      	cmp	r9, r3
 800c8a0:	bfa8      	it	ge
 800c8a2:	4699      	movge	r9, r3
 800c8a4:	f1b9 0f00 	cmp.w	r9, #0
 800c8a8:	dc33      	bgt.n	800c912 <_printf_float+0x39a>
 800c8aa:	f04f 0800 	mov.w	r8, #0
 800c8ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8b2:	f104 0b1a 	add.w	fp, r4, #26
 800c8b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8b8:	ebaa 0303 	sub.w	r3, sl, r3
 800c8bc:	eba3 0309 	sub.w	r3, r3, r9
 800c8c0:	4543      	cmp	r3, r8
 800c8c2:	f77f af7a 	ble.w	800c7ba <_printf_float+0x242>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	465a      	mov	r2, fp
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	47b8      	blx	r7
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	f43f aeac 	beq.w	800c62e <_printf_float+0xb6>
 800c8d6:	f108 0801 	add.w	r8, r8, #1
 800c8da:	e7ec      	b.n	800c8b6 <_printf_float+0x33e>
 800c8dc:	4642      	mov	r2, r8
 800c8de:	4631      	mov	r1, r6
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	47b8      	blx	r7
 800c8e4:	3001      	adds	r0, #1
 800c8e6:	d1c2      	bne.n	800c86e <_printf_float+0x2f6>
 800c8e8:	e6a1      	b.n	800c62e <_printf_float+0xb6>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	4631      	mov	r1, r6
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	920a      	str	r2, [sp, #40]	@ 0x28
 800c8f2:	47b8      	blx	r7
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	f43f ae9a 	beq.w	800c62e <_printf_float+0xb6>
 800c8fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8fc:	f10b 0b01 	add.w	fp, fp, #1
 800c900:	e7bb      	b.n	800c87a <_printf_float+0x302>
 800c902:	4631      	mov	r1, r6
 800c904:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	d1c0      	bne.n	800c892 <_printf_float+0x31a>
 800c910:	e68d      	b.n	800c62e <_printf_float+0xb6>
 800c912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c914:	464b      	mov	r3, r9
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	4442      	add	r2, r8
 800c91c:	47b8      	blx	r7
 800c91e:	3001      	adds	r0, #1
 800c920:	d1c3      	bne.n	800c8aa <_printf_float+0x332>
 800c922:	e684      	b.n	800c62e <_printf_float+0xb6>
 800c924:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c928:	f1ba 0f01 	cmp.w	sl, #1
 800c92c:	dc01      	bgt.n	800c932 <_printf_float+0x3ba>
 800c92e:	07db      	lsls	r3, r3, #31
 800c930:	d536      	bpl.n	800c9a0 <_printf_float+0x428>
 800c932:	2301      	movs	r3, #1
 800c934:	4642      	mov	r2, r8
 800c936:	4631      	mov	r1, r6
 800c938:	4628      	mov	r0, r5
 800c93a:	47b8      	blx	r7
 800c93c:	3001      	adds	r0, #1
 800c93e:	f43f ae76 	beq.w	800c62e <_printf_float+0xb6>
 800c942:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	47b8      	blx	r7
 800c94c:	3001      	adds	r0, #1
 800c94e:	f43f ae6e 	beq.w	800c62e <_printf_float+0xb6>
 800c952:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c956:	2200      	movs	r2, #0
 800c958:	2300      	movs	r3, #0
 800c95a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c95e:	f7f4 f83b 	bl	80009d8 <__aeabi_dcmpeq>
 800c962:	b9c0      	cbnz	r0, 800c996 <_printf_float+0x41e>
 800c964:	4653      	mov	r3, sl
 800c966:	f108 0201 	add.w	r2, r8, #1
 800c96a:	4631      	mov	r1, r6
 800c96c:	4628      	mov	r0, r5
 800c96e:	47b8      	blx	r7
 800c970:	3001      	adds	r0, #1
 800c972:	d10c      	bne.n	800c98e <_printf_float+0x416>
 800c974:	e65b      	b.n	800c62e <_printf_float+0xb6>
 800c976:	2301      	movs	r3, #1
 800c978:	465a      	mov	r2, fp
 800c97a:	4631      	mov	r1, r6
 800c97c:	4628      	mov	r0, r5
 800c97e:	47b8      	blx	r7
 800c980:	3001      	adds	r0, #1
 800c982:	f43f ae54 	beq.w	800c62e <_printf_float+0xb6>
 800c986:	f108 0801 	add.w	r8, r8, #1
 800c98a:	45d0      	cmp	r8, sl
 800c98c:	dbf3      	blt.n	800c976 <_printf_float+0x3fe>
 800c98e:	464b      	mov	r3, r9
 800c990:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c994:	e6e0      	b.n	800c758 <_printf_float+0x1e0>
 800c996:	f04f 0800 	mov.w	r8, #0
 800c99a:	f104 0b1a 	add.w	fp, r4, #26
 800c99e:	e7f4      	b.n	800c98a <_printf_float+0x412>
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	4642      	mov	r2, r8
 800c9a4:	e7e1      	b.n	800c96a <_printf_float+0x3f2>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	464a      	mov	r2, r9
 800c9aa:	4631      	mov	r1, r6
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	47b8      	blx	r7
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	f43f ae3c 	beq.w	800c62e <_printf_float+0xb6>
 800c9b6:	f108 0801 	add.w	r8, r8, #1
 800c9ba:	68e3      	ldr	r3, [r4, #12]
 800c9bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c9be:	1a5b      	subs	r3, r3, r1
 800c9c0:	4543      	cmp	r3, r8
 800c9c2:	dcf0      	bgt.n	800c9a6 <_printf_float+0x42e>
 800c9c4:	e6fd      	b.n	800c7c2 <_printf_float+0x24a>
 800c9c6:	f04f 0800 	mov.w	r8, #0
 800c9ca:	f104 0919 	add.w	r9, r4, #25
 800c9ce:	e7f4      	b.n	800c9ba <_printf_float+0x442>

0800c9d0 <_printf_common>:
 800c9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d4:	4616      	mov	r6, r2
 800c9d6:	4698      	mov	r8, r3
 800c9d8:	688a      	ldr	r2, [r1, #8]
 800c9da:	690b      	ldr	r3, [r1, #16]
 800c9dc:	4607      	mov	r7, r0
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	bfb8      	it	lt
 800c9e2:	4613      	movlt	r3, r2
 800c9e4:	6033      	str	r3, [r6, #0]
 800c9e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c9f0:	b10a      	cbz	r2, 800c9f6 <_printf_common+0x26>
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	6033      	str	r3, [r6, #0]
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	0699      	lsls	r1, r3, #26
 800c9fa:	bf42      	ittt	mi
 800c9fc:	6833      	ldrmi	r3, [r6, #0]
 800c9fe:	3302      	addmi	r3, #2
 800ca00:	6033      	strmi	r3, [r6, #0]
 800ca02:	6825      	ldr	r5, [r4, #0]
 800ca04:	f015 0506 	ands.w	r5, r5, #6
 800ca08:	d106      	bne.n	800ca18 <_printf_common+0x48>
 800ca0a:	f104 0a19 	add.w	sl, r4, #25
 800ca0e:	68e3      	ldr	r3, [r4, #12]
 800ca10:	6832      	ldr	r2, [r6, #0]
 800ca12:	1a9b      	subs	r3, r3, r2
 800ca14:	42ab      	cmp	r3, r5
 800ca16:	dc2b      	bgt.n	800ca70 <_printf_common+0xa0>
 800ca18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca1c:	6822      	ldr	r2, [r4, #0]
 800ca1e:	3b00      	subs	r3, #0
 800ca20:	bf18      	it	ne
 800ca22:	2301      	movne	r3, #1
 800ca24:	0692      	lsls	r2, r2, #26
 800ca26:	d430      	bmi.n	800ca8a <_printf_common+0xba>
 800ca28:	4641      	mov	r1, r8
 800ca2a:	4638      	mov	r0, r7
 800ca2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca30:	47c8      	blx	r9
 800ca32:	3001      	adds	r0, #1
 800ca34:	d023      	beq.n	800ca7e <_printf_common+0xae>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	6922      	ldr	r2, [r4, #16]
 800ca3a:	f003 0306 	and.w	r3, r3, #6
 800ca3e:	2b04      	cmp	r3, #4
 800ca40:	bf14      	ite	ne
 800ca42:	2500      	movne	r5, #0
 800ca44:	6833      	ldreq	r3, [r6, #0]
 800ca46:	f04f 0600 	mov.w	r6, #0
 800ca4a:	bf08      	it	eq
 800ca4c:	68e5      	ldreq	r5, [r4, #12]
 800ca4e:	f104 041a 	add.w	r4, r4, #26
 800ca52:	bf08      	it	eq
 800ca54:	1aed      	subeq	r5, r5, r3
 800ca56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca5a:	bf08      	it	eq
 800ca5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca60:	4293      	cmp	r3, r2
 800ca62:	bfc4      	itt	gt
 800ca64:	1a9b      	subgt	r3, r3, r2
 800ca66:	18ed      	addgt	r5, r5, r3
 800ca68:	42b5      	cmp	r5, r6
 800ca6a:	d11a      	bne.n	800caa2 <_printf_common+0xd2>
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e008      	b.n	800ca82 <_printf_common+0xb2>
 800ca70:	2301      	movs	r3, #1
 800ca72:	4652      	mov	r2, sl
 800ca74:	4641      	mov	r1, r8
 800ca76:	4638      	mov	r0, r7
 800ca78:	47c8      	blx	r9
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	d103      	bne.n	800ca86 <_printf_common+0xb6>
 800ca7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca86:	3501      	adds	r5, #1
 800ca88:	e7c1      	b.n	800ca0e <_printf_common+0x3e>
 800ca8a:	2030      	movs	r0, #48	@ 0x30
 800ca8c:	18e1      	adds	r1, r4, r3
 800ca8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca98:	4422      	add	r2, r4
 800ca9a:	3302      	adds	r3, #2
 800ca9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800caa0:	e7c2      	b.n	800ca28 <_printf_common+0x58>
 800caa2:	2301      	movs	r3, #1
 800caa4:	4622      	mov	r2, r4
 800caa6:	4641      	mov	r1, r8
 800caa8:	4638      	mov	r0, r7
 800caaa:	47c8      	blx	r9
 800caac:	3001      	adds	r0, #1
 800caae:	d0e6      	beq.n	800ca7e <_printf_common+0xae>
 800cab0:	3601      	adds	r6, #1
 800cab2:	e7d9      	b.n	800ca68 <_printf_common+0x98>

0800cab4 <_printf_i>:
 800cab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cab8:	7e0f      	ldrb	r7, [r1, #24]
 800caba:	4691      	mov	r9, r2
 800cabc:	2f78      	cmp	r7, #120	@ 0x78
 800cabe:	4680      	mov	r8, r0
 800cac0:	460c      	mov	r4, r1
 800cac2:	469a      	mov	sl, r3
 800cac4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cac6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800caca:	d807      	bhi.n	800cadc <_printf_i+0x28>
 800cacc:	2f62      	cmp	r7, #98	@ 0x62
 800cace:	d80a      	bhi.n	800cae6 <_printf_i+0x32>
 800cad0:	2f00      	cmp	r7, #0
 800cad2:	f000 80d1 	beq.w	800cc78 <_printf_i+0x1c4>
 800cad6:	2f58      	cmp	r7, #88	@ 0x58
 800cad8:	f000 80b8 	beq.w	800cc4c <_printf_i+0x198>
 800cadc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cae0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cae4:	e03a      	b.n	800cb5c <_printf_i+0xa8>
 800cae6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800caea:	2b15      	cmp	r3, #21
 800caec:	d8f6      	bhi.n	800cadc <_printf_i+0x28>
 800caee:	a101      	add	r1, pc, #4	@ (adr r1, 800caf4 <_printf_i+0x40>)
 800caf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caf4:	0800cb4d 	.word	0x0800cb4d
 800caf8:	0800cb61 	.word	0x0800cb61
 800cafc:	0800cadd 	.word	0x0800cadd
 800cb00:	0800cadd 	.word	0x0800cadd
 800cb04:	0800cadd 	.word	0x0800cadd
 800cb08:	0800cadd 	.word	0x0800cadd
 800cb0c:	0800cb61 	.word	0x0800cb61
 800cb10:	0800cadd 	.word	0x0800cadd
 800cb14:	0800cadd 	.word	0x0800cadd
 800cb18:	0800cadd 	.word	0x0800cadd
 800cb1c:	0800cadd 	.word	0x0800cadd
 800cb20:	0800cc5f 	.word	0x0800cc5f
 800cb24:	0800cb8b 	.word	0x0800cb8b
 800cb28:	0800cc19 	.word	0x0800cc19
 800cb2c:	0800cadd 	.word	0x0800cadd
 800cb30:	0800cadd 	.word	0x0800cadd
 800cb34:	0800cc81 	.word	0x0800cc81
 800cb38:	0800cadd 	.word	0x0800cadd
 800cb3c:	0800cb8b 	.word	0x0800cb8b
 800cb40:	0800cadd 	.word	0x0800cadd
 800cb44:	0800cadd 	.word	0x0800cadd
 800cb48:	0800cc21 	.word	0x0800cc21
 800cb4c:	6833      	ldr	r3, [r6, #0]
 800cb4e:	1d1a      	adds	r2, r3, #4
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6032      	str	r2, [r6, #0]
 800cb54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e09c      	b.n	800cc9a <_printf_i+0x1e6>
 800cb60:	6833      	ldr	r3, [r6, #0]
 800cb62:	6820      	ldr	r0, [r4, #0]
 800cb64:	1d19      	adds	r1, r3, #4
 800cb66:	6031      	str	r1, [r6, #0]
 800cb68:	0606      	lsls	r6, r0, #24
 800cb6a:	d501      	bpl.n	800cb70 <_printf_i+0xbc>
 800cb6c:	681d      	ldr	r5, [r3, #0]
 800cb6e:	e003      	b.n	800cb78 <_printf_i+0xc4>
 800cb70:	0645      	lsls	r5, r0, #25
 800cb72:	d5fb      	bpl.n	800cb6c <_printf_i+0xb8>
 800cb74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb78:	2d00      	cmp	r5, #0
 800cb7a:	da03      	bge.n	800cb84 <_printf_i+0xd0>
 800cb7c:	232d      	movs	r3, #45	@ 0x2d
 800cb7e:	426d      	negs	r5, r5
 800cb80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb84:	230a      	movs	r3, #10
 800cb86:	4858      	ldr	r0, [pc, #352]	@ (800cce8 <_printf_i+0x234>)
 800cb88:	e011      	b.n	800cbae <_printf_i+0xfa>
 800cb8a:	6821      	ldr	r1, [r4, #0]
 800cb8c:	6833      	ldr	r3, [r6, #0]
 800cb8e:	0608      	lsls	r0, r1, #24
 800cb90:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb94:	d402      	bmi.n	800cb9c <_printf_i+0xe8>
 800cb96:	0649      	lsls	r1, r1, #25
 800cb98:	bf48      	it	mi
 800cb9a:	b2ad      	uxthmi	r5, r5
 800cb9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb9e:	6033      	str	r3, [r6, #0]
 800cba0:	bf14      	ite	ne
 800cba2:	230a      	movne	r3, #10
 800cba4:	2308      	moveq	r3, #8
 800cba6:	4850      	ldr	r0, [pc, #320]	@ (800cce8 <_printf_i+0x234>)
 800cba8:	2100      	movs	r1, #0
 800cbaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbae:	6866      	ldr	r6, [r4, #4]
 800cbb0:	2e00      	cmp	r6, #0
 800cbb2:	60a6      	str	r6, [r4, #8]
 800cbb4:	db05      	blt.n	800cbc2 <_printf_i+0x10e>
 800cbb6:	6821      	ldr	r1, [r4, #0]
 800cbb8:	432e      	orrs	r6, r5
 800cbba:	f021 0104 	bic.w	r1, r1, #4
 800cbbe:	6021      	str	r1, [r4, #0]
 800cbc0:	d04b      	beq.n	800cc5a <_printf_i+0x1a6>
 800cbc2:	4616      	mov	r6, r2
 800cbc4:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbc8:	fb03 5711 	mls	r7, r3, r1, r5
 800cbcc:	5dc7      	ldrb	r7, [r0, r7]
 800cbce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbd2:	462f      	mov	r7, r5
 800cbd4:	42bb      	cmp	r3, r7
 800cbd6:	460d      	mov	r5, r1
 800cbd8:	d9f4      	bls.n	800cbc4 <_printf_i+0x110>
 800cbda:	2b08      	cmp	r3, #8
 800cbdc:	d10b      	bne.n	800cbf6 <_printf_i+0x142>
 800cbde:	6823      	ldr	r3, [r4, #0]
 800cbe0:	07df      	lsls	r7, r3, #31
 800cbe2:	d508      	bpl.n	800cbf6 <_printf_i+0x142>
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	6861      	ldr	r1, [r4, #4]
 800cbe8:	4299      	cmp	r1, r3
 800cbea:	bfde      	ittt	le
 800cbec:	2330      	movle	r3, #48	@ 0x30
 800cbee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbf2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cbf6:	1b92      	subs	r2, r2, r6
 800cbf8:	6122      	str	r2, [r4, #16]
 800cbfa:	464b      	mov	r3, r9
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4640      	mov	r0, r8
 800cc00:	f8cd a000 	str.w	sl, [sp]
 800cc04:	aa03      	add	r2, sp, #12
 800cc06:	f7ff fee3 	bl	800c9d0 <_printf_common>
 800cc0a:	3001      	adds	r0, #1
 800cc0c:	d14a      	bne.n	800cca4 <_printf_i+0x1f0>
 800cc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc12:	b004      	add	sp, #16
 800cc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	f043 0320 	orr.w	r3, r3, #32
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	2778      	movs	r7, #120	@ 0x78
 800cc22:	4832      	ldr	r0, [pc, #200]	@ (800ccec <_printf_i+0x238>)
 800cc24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	6831      	ldr	r1, [r6, #0]
 800cc2c:	061f      	lsls	r7, r3, #24
 800cc2e:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc32:	d402      	bmi.n	800cc3a <_printf_i+0x186>
 800cc34:	065f      	lsls	r7, r3, #25
 800cc36:	bf48      	it	mi
 800cc38:	b2ad      	uxthmi	r5, r5
 800cc3a:	6031      	str	r1, [r6, #0]
 800cc3c:	07d9      	lsls	r1, r3, #31
 800cc3e:	bf44      	itt	mi
 800cc40:	f043 0320 	orrmi.w	r3, r3, #32
 800cc44:	6023      	strmi	r3, [r4, #0]
 800cc46:	b11d      	cbz	r5, 800cc50 <_printf_i+0x19c>
 800cc48:	2310      	movs	r3, #16
 800cc4a:	e7ad      	b.n	800cba8 <_printf_i+0xf4>
 800cc4c:	4826      	ldr	r0, [pc, #152]	@ (800cce8 <_printf_i+0x234>)
 800cc4e:	e7e9      	b.n	800cc24 <_printf_i+0x170>
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	f023 0320 	bic.w	r3, r3, #32
 800cc56:	6023      	str	r3, [r4, #0]
 800cc58:	e7f6      	b.n	800cc48 <_printf_i+0x194>
 800cc5a:	4616      	mov	r6, r2
 800cc5c:	e7bd      	b.n	800cbda <_printf_i+0x126>
 800cc5e:	6833      	ldr	r3, [r6, #0]
 800cc60:	6825      	ldr	r5, [r4, #0]
 800cc62:	1d18      	adds	r0, r3, #4
 800cc64:	6961      	ldr	r1, [r4, #20]
 800cc66:	6030      	str	r0, [r6, #0]
 800cc68:	062e      	lsls	r6, r5, #24
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	d501      	bpl.n	800cc72 <_printf_i+0x1be>
 800cc6e:	6019      	str	r1, [r3, #0]
 800cc70:	e002      	b.n	800cc78 <_printf_i+0x1c4>
 800cc72:	0668      	lsls	r0, r5, #25
 800cc74:	d5fb      	bpl.n	800cc6e <_printf_i+0x1ba>
 800cc76:	8019      	strh	r1, [r3, #0]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	4616      	mov	r6, r2
 800cc7c:	6123      	str	r3, [r4, #16]
 800cc7e:	e7bc      	b.n	800cbfa <_printf_i+0x146>
 800cc80:	6833      	ldr	r3, [r6, #0]
 800cc82:	2100      	movs	r1, #0
 800cc84:	1d1a      	adds	r2, r3, #4
 800cc86:	6032      	str	r2, [r6, #0]
 800cc88:	681e      	ldr	r6, [r3, #0]
 800cc8a:	6862      	ldr	r2, [r4, #4]
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f000 fa48 	bl	800d122 <memchr>
 800cc92:	b108      	cbz	r0, 800cc98 <_printf_i+0x1e4>
 800cc94:	1b80      	subs	r0, r0, r6
 800cc96:	6060      	str	r0, [r4, #4]
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	6123      	str	r3, [r4, #16]
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cca2:	e7aa      	b.n	800cbfa <_printf_i+0x146>
 800cca4:	4632      	mov	r2, r6
 800cca6:	4649      	mov	r1, r9
 800cca8:	4640      	mov	r0, r8
 800ccaa:	6923      	ldr	r3, [r4, #16]
 800ccac:	47d0      	blx	sl
 800ccae:	3001      	adds	r0, #1
 800ccb0:	d0ad      	beq.n	800cc0e <_printf_i+0x15a>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	079b      	lsls	r3, r3, #30
 800ccb6:	d413      	bmi.n	800cce0 <_printf_i+0x22c>
 800ccb8:	68e0      	ldr	r0, [r4, #12]
 800ccba:	9b03      	ldr	r3, [sp, #12]
 800ccbc:	4298      	cmp	r0, r3
 800ccbe:	bfb8      	it	lt
 800ccc0:	4618      	movlt	r0, r3
 800ccc2:	e7a6      	b.n	800cc12 <_printf_i+0x15e>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	4632      	mov	r2, r6
 800ccc8:	4649      	mov	r1, r9
 800ccca:	4640      	mov	r0, r8
 800cccc:	47d0      	blx	sl
 800ccce:	3001      	adds	r0, #1
 800ccd0:	d09d      	beq.n	800cc0e <_printf_i+0x15a>
 800ccd2:	3501      	adds	r5, #1
 800ccd4:	68e3      	ldr	r3, [r4, #12]
 800ccd6:	9903      	ldr	r1, [sp, #12]
 800ccd8:	1a5b      	subs	r3, r3, r1
 800ccda:	42ab      	cmp	r3, r5
 800ccdc:	dcf2      	bgt.n	800ccc4 <_printf_i+0x210>
 800ccde:	e7eb      	b.n	800ccb8 <_printf_i+0x204>
 800cce0:	2500      	movs	r5, #0
 800cce2:	f104 0619 	add.w	r6, r4, #25
 800cce6:	e7f5      	b.n	800ccd4 <_printf_i+0x220>
 800cce8:	0800f6a6 	.word	0x0800f6a6
 800ccec:	0800f6b7 	.word	0x0800f6b7

0800ccf0 <std>:
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	b510      	push	{r4, lr}
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	e9c0 3300 	strd	r3, r3, [r0]
 800ccfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccfe:	6083      	str	r3, [r0, #8]
 800cd00:	8181      	strh	r1, [r0, #12]
 800cd02:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd04:	81c2      	strh	r2, [r0, #14]
 800cd06:	6183      	str	r3, [r0, #24]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	2208      	movs	r2, #8
 800cd0c:	305c      	adds	r0, #92	@ 0x5c
 800cd0e:	f000 f989 	bl	800d024 <memset>
 800cd12:	4b0d      	ldr	r3, [pc, #52]	@ (800cd48 <std+0x58>)
 800cd14:	6224      	str	r4, [r4, #32]
 800cd16:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd18:	4b0c      	ldr	r3, [pc, #48]	@ (800cd4c <std+0x5c>)
 800cd1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd1c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd50 <std+0x60>)
 800cd1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd20:	4b0c      	ldr	r3, [pc, #48]	@ (800cd54 <std+0x64>)
 800cd22:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd24:	4b0c      	ldr	r3, [pc, #48]	@ (800cd58 <std+0x68>)
 800cd26:	429c      	cmp	r4, r3
 800cd28:	d006      	beq.n	800cd38 <std+0x48>
 800cd2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd2e:	4294      	cmp	r4, r2
 800cd30:	d002      	beq.n	800cd38 <std+0x48>
 800cd32:	33d0      	adds	r3, #208	@ 0xd0
 800cd34:	429c      	cmp	r4, r3
 800cd36:	d105      	bne.n	800cd44 <std+0x54>
 800cd38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd40:	f000 b9ec 	b.w	800d11c <__retarget_lock_init_recursive>
 800cd44:	bd10      	pop	{r4, pc}
 800cd46:	bf00      	nop
 800cd48:	0800cf25 	.word	0x0800cf25
 800cd4c:	0800cf47 	.word	0x0800cf47
 800cd50:	0800cf7f 	.word	0x0800cf7f
 800cd54:	0800cfa3 	.word	0x0800cfa3
 800cd58:	20004b9c 	.word	0x20004b9c

0800cd5c <stdio_exit_handler>:
 800cd5c:	4a02      	ldr	r2, [pc, #8]	@ (800cd68 <stdio_exit_handler+0xc>)
 800cd5e:	4903      	ldr	r1, [pc, #12]	@ (800cd6c <stdio_exit_handler+0x10>)
 800cd60:	4803      	ldr	r0, [pc, #12]	@ (800cd70 <stdio_exit_handler+0x14>)
 800cd62:	f000 b869 	b.w	800ce38 <_fwalk_sglue>
 800cd66:	bf00      	nop
 800cd68:	20000028 	.word	0x20000028
 800cd6c:	0800eab9 	.word	0x0800eab9
 800cd70:	20000038 	.word	0x20000038

0800cd74 <cleanup_stdio>:
 800cd74:	6841      	ldr	r1, [r0, #4]
 800cd76:	4b0c      	ldr	r3, [pc, #48]	@ (800cda8 <cleanup_stdio+0x34>)
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	d001      	beq.n	800cd84 <cleanup_stdio+0x10>
 800cd80:	f001 fe9a 	bl	800eab8 <_fflush_r>
 800cd84:	68a1      	ldr	r1, [r4, #8]
 800cd86:	4b09      	ldr	r3, [pc, #36]	@ (800cdac <cleanup_stdio+0x38>)
 800cd88:	4299      	cmp	r1, r3
 800cd8a:	d002      	beq.n	800cd92 <cleanup_stdio+0x1e>
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f001 fe93 	bl	800eab8 <_fflush_r>
 800cd92:	68e1      	ldr	r1, [r4, #12]
 800cd94:	4b06      	ldr	r3, [pc, #24]	@ (800cdb0 <cleanup_stdio+0x3c>)
 800cd96:	4299      	cmp	r1, r3
 800cd98:	d004      	beq.n	800cda4 <cleanup_stdio+0x30>
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cda0:	f001 be8a 	b.w	800eab8 <_fflush_r>
 800cda4:	bd10      	pop	{r4, pc}
 800cda6:	bf00      	nop
 800cda8:	20004b9c 	.word	0x20004b9c
 800cdac:	20004c04 	.word	0x20004c04
 800cdb0:	20004c6c 	.word	0x20004c6c

0800cdb4 <global_stdio_init.part.0>:
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	4b0b      	ldr	r3, [pc, #44]	@ (800cde4 <global_stdio_init.part.0+0x30>)
 800cdb8:	4c0b      	ldr	r4, [pc, #44]	@ (800cde8 <global_stdio_init.part.0+0x34>)
 800cdba:	4a0c      	ldr	r2, [pc, #48]	@ (800cdec <global_stdio_init.part.0+0x38>)
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	2104      	movs	r1, #4
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f7ff ff94 	bl	800ccf0 <std>
 800cdc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cdcc:	2201      	movs	r2, #1
 800cdce:	2109      	movs	r1, #9
 800cdd0:	f7ff ff8e 	bl	800ccf0 <std>
 800cdd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cdd8:	2202      	movs	r2, #2
 800cdda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdde:	2112      	movs	r1, #18
 800cde0:	f7ff bf86 	b.w	800ccf0 <std>
 800cde4:	20004cd4 	.word	0x20004cd4
 800cde8:	20004b9c 	.word	0x20004b9c
 800cdec:	0800cd5d 	.word	0x0800cd5d

0800cdf0 <__sfp_lock_acquire>:
 800cdf0:	4801      	ldr	r0, [pc, #4]	@ (800cdf8 <__sfp_lock_acquire+0x8>)
 800cdf2:	f000 b994 	b.w	800d11e <__retarget_lock_acquire_recursive>
 800cdf6:	bf00      	nop
 800cdf8:	20004cdd 	.word	0x20004cdd

0800cdfc <__sfp_lock_release>:
 800cdfc:	4801      	ldr	r0, [pc, #4]	@ (800ce04 <__sfp_lock_release+0x8>)
 800cdfe:	f000 b98f 	b.w	800d120 <__retarget_lock_release_recursive>
 800ce02:	bf00      	nop
 800ce04:	20004cdd 	.word	0x20004cdd

0800ce08 <__sinit>:
 800ce08:	b510      	push	{r4, lr}
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	f7ff fff0 	bl	800cdf0 <__sfp_lock_acquire>
 800ce10:	6a23      	ldr	r3, [r4, #32]
 800ce12:	b11b      	cbz	r3, 800ce1c <__sinit+0x14>
 800ce14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce18:	f7ff bff0 	b.w	800cdfc <__sfp_lock_release>
 800ce1c:	4b04      	ldr	r3, [pc, #16]	@ (800ce30 <__sinit+0x28>)
 800ce1e:	6223      	str	r3, [r4, #32]
 800ce20:	4b04      	ldr	r3, [pc, #16]	@ (800ce34 <__sinit+0x2c>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1f5      	bne.n	800ce14 <__sinit+0xc>
 800ce28:	f7ff ffc4 	bl	800cdb4 <global_stdio_init.part.0>
 800ce2c:	e7f2      	b.n	800ce14 <__sinit+0xc>
 800ce2e:	bf00      	nop
 800ce30:	0800cd75 	.word	0x0800cd75
 800ce34:	20004cd4 	.word	0x20004cd4

0800ce38 <_fwalk_sglue>:
 800ce38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce3c:	4607      	mov	r7, r0
 800ce3e:	4688      	mov	r8, r1
 800ce40:	4614      	mov	r4, r2
 800ce42:	2600      	movs	r6, #0
 800ce44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce48:	f1b9 0901 	subs.w	r9, r9, #1
 800ce4c:	d505      	bpl.n	800ce5a <_fwalk_sglue+0x22>
 800ce4e:	6824      	ldr	r4, [r4, #0]
 800ce50:	2c00      	cmp	r4, #0
 800ce52:	d1f7      	bne.n	800ce44 <_fwalk_sglue+0xc>
 800ce54:	4630      	mov	r0, r6
 800ce56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce5a:	89ab      	ldrh	r3, [r5, #12]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d907      	bls.n	800ce70 <_fwalk_sglue+0x38>
 800ce60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce64:	3301      	adds	r3, #1
 800ce66:	d003      	beq.n	800ce70 <_fwalk_sglue+0x38>
 800ce68:	4629      	mov	r1, r5
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	47c0      	blx	r8
 800ce6e:	4306      	orrs	r6, r0
 800ce70:	3568      	adds	r5, #104	@ 0x68
 800ce72:	e7e9      	b.n	800ce48 <_fwalk_sglue+0x10>

0800ce74 <sniprintf>:
 800ce74:	b40c      	push	{r2, r3}
 800ce76:	b530      	push	{r4, r5, lr}
 800ce78:	4b18      	ldr	r3, [pc, #96]	@ (800cedc <sniprintf+0x68>)
 800ce7a:	1e0c      	subs	r4, r1, #0
 800ce7c:	681d      	ldr	r5, [r3, #0]
 800ce7e:	b09d      	sub	sp, #116	@ 0x74
 800ce80:	da08      	bge.n	800ce94 <sniprintf+0x20>
 800ce82:	238b      	movs	r3, #139	@ 0x8b
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295
 800ce88:	602b      	str	r3, [r5, #0]
 800ce8a:	b01d      	add	sp, #116	@ 0x74
 800ce8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce90:	b002      	add	sp, #8
 800ce92:	4770      	bx	lr
 800ce94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ce98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ce9c:	f04f 0300 	mov.w	r3, #0
 800cea0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cea2:	bf0c      	ite	eq
 800cea4:	4623      	moveq	r3, r4
 800cea6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ceaa:	9304      	str	r3, [sp, #16]
 800ceac:	9307      	str	r3, [sp, #28]
 800ceae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ceb2:	9002      	str	r0, [sp, #8]
 800ceb4:	9006      	str	r0, [sp, #24]
 800ceb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ceba:	4628      	mov	r0, r5
 800cebc:	ab21      	add	r3, sp, #132	@ 0x84
 800cebe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cec0:	a902      	add	r1, sp, #8
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	f001 fc7c 	bl	800e7c0 <_svfiprintf_r>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	bfbc      	itt	lt
 800cecc:	238b      	movlt	r3, #139	@ 0x8b
 800cece:	602b      	strlt	r3, [r5, #0]
 800ced0:	2c00      	cmp	r4, #0
 800ced2:	d0da      	beq.n	800ce8a <sniprintf+0x16>
 800ced4:	2200      	movs	r2, #0
 800ced6:	9b02      	ldr	r3, [sp, #8]
 800ced8:	701a      	strb	r2, [r3, #0]
 800ceda:	e7d6      	b.n	800ce8a <sniprintf+0x16>
 800cedc:	20000034 	.word	0x20000034

0800cee0 <siprintf>:
 800cee0:	b40e      	push	{r1, r2, r3}
 800cee2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cee6:	b510      	push	{r4, lr}
 800cee8:	2400      	movs	r4, #0
 800ceea:	b09d      	sub	sp, #116	@ 0x74
 800ceec:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ceee:	9002      	str	r0, [sp, #8]
 800cef0:	9006      	str	r0, [sp, #24]
 800cef2:	9107      	str	r1, [sp, #28]
 800cef4:	9104      	str	r1, [sp, #16]
 800cef6:	4809      	ldr	r0, [pc, #36]	@ (800cf1c <siprintf+0x3c>)
 800cef8:	4909      	ldr	r1, [pc, #36]	@ (800cf20 <siprintf+0x40>)
 800cefa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cefe:	9105      	str	r1, [sp, #20]
 800cf00:	6800      	ldr	r0, [r0, #0]
 800cf02:	a902      	add	r1, sp, #8
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cf08:	f001 fc5a 	bl	800e7c0 <_svfiprintf_r>
 800cf0c:	9b02      	ldr	r3, [sp, #8]
 800cf0e:	701c      	strb	r4, [r3, #0]
 800cf10:	b01d      	add	sp, #116	@ 0x74
 800cf12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf16:	b003      	add	sp, #12
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	20000034 	.word	0x20000034
 800cf20:	ffff0208 	.word	0xffff0208

0800cf24 <__sread>:
 800cf24:	b510      	push	{r4, lr}
 800cf26:	460c      	mov	r4, r1
 800cf28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf2c:	f000 f8a8 	bl	800d080 <_read_r>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	bfab      	itete	ge
 800cf34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf36:	89a3      	ldrhlt	r3, [r4, #12]
 800cf38:	181b      	addge	r3, r3, r0
 800cf3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf3e:	bfac      	ite	ge
 800cf40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf42:	81a3      	strhlt	r3, [r4, #12]
 800cf44:	bd10      	pop	{r4, pc}

0800cf46 <__swrite>:
 800cf46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4a:	461f      	mov	r7, r3
 800cf4c:	898b      	ldrh	r3, [r1, #12]
 800cf4e:	4605      	mov	r5, r0
 800cf50:	05db      	lsls	r3, r3, #23
 800cf52:	460c      	mov	r4, r1
 800cf54:	4616      	mov	r6, r2
 800cf56:	d505      	bpl.n	800cf64 <__swrite+0x1e>
 800cf58:	2302      	movs	r3, #2
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf60:	f000 f87c 	bl	800d05c <_lseek_r>
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	4632      	mov	r2, r6
 800cf68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	4628      	mov	r0, r5
 800cf70:	463b      	mov	r3, r7
 800cf72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7a:	f000 b893 	b.w	800d0a4 <_write_r>

0800cf7e <__sseek>:
 800cf7e:	b510      	push	{r4, lr}
 800cf80:	460c      	mov	r4, r1
 800cf82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf86:	f000 f869 	bl	800d05c <_lseek_r>
 800cf8a:	1c43      	adds	r3, r0, #1
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	bf15      	itete	ne
 800cf90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf9a:	81a3      	strheq	r3, [r4, #12]
 800cf9c:	bf18      	it	ne
 800cf9e:	81a3      	strhne	r3, [r4, #12]
 800cfa0:	bd10      	pop	{r4, pc}

0800cfa2 <__sclose>:
 800cfa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa6:	f000 b849 	b.w	800d03c <_close_r>

0800cfaa <_vsniprintf_r>:
 800cfaa:	b530      	push	{r4, r5, lr}
 800cfac:	4614      	mov	r4, r2
 800cfae:	2c00      	cmp	r4, #0
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	b09b      	sub	sp, #108	@ 0x6c
 800cfb6:	da05      	bge.n	800cfc4 <_vsniprintf_r+0x1a>
 800cfb8:	238b      	movs	r3, #139	@ 0x8b
 800cfba:	6003      	str	r3, [r0, #0]
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	b01b      	add	sp, #108	@ 0x6c
 800cfc2:	bd30      	pop	{r4, r5, pc}
 800cfc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cfc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cfcc:	f04f 0300 	mov.w	r3, #0
 800cfd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800cfd2:	bf0c      	ite	eq
 800cfd4:	4623      	moveq	r3, r4
 800cfd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cfda:	9302      	str	r3, [sp, #8]
 800cfdc:	9305      	str	r3, [sp, #20]
 800cfde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cfe2:	9100      	str	r1, [sp, #0]
 800cfe4:	9104      	str	r1, [sp, #16]
 800cfe6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cfea:	4669      	mov	r1, sp
 800cfec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cfee:	f001 fbe7 	bl	800e7c0 <_svfiprintf_r>
 800cff2:	1c43      	adds	r3, r0, #1
 800cff4:	bfbc      	itt	lt
 800cff6:	238b      	movlt	r3, #139	@ 0x8b
 800cff8:	602b      	strlt	r3, [r5, #0]
 800cffa:	2c00      	cmp	r4, #0
 800cffc:	d0e0      	beq.n	800cfc0 <_vsniprintf_r+0x16>
 800cffe:	2200      	movs	r2, #0
 800d000:	9b00      	ldr	r3, [sp, #0]
 800d002:	701a      	strb	r2, [r3, #0]
 800d004:	e7dc      	b.n	800cfc0 <_vsniprintf_r+0x16>
	...

0800d008 <vsniprintf>:
 800d008:	b507      	push	{r0, r1, r2, lr}
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	4613      	mov	r3, r2
 800d00e:	460a      	mov	r2, r1
 800d010:	4601      	mov	r1, r0
 800d012:	4803      	ldr	r0, [pc, #12]	@ (800d020 <vsniprintf+0x18>)
 800d014:	6800      	ldr	r0, [r0, #0]
 800d016:	f7ff ffc8 	bl	800cfaa <_vsniprintf_r>
 800d01a:	b003      	add	sp, #12
 800d01c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d020:	20000034 	.word	0x20000034

0800d024 <memset>:
 800d024:	4603      	mov	r3, r0
 800d026:	4402      	add	r2, r0
 800d028:	4293      	cmp	r3, r2
 800d02a:	d100      	bne.n	800d02e <memset+0xa>
 800d02c:	4770      	bx	lr
 800d02e:	f803 1b01 	strb.w	r1, [r3], #1
 800d032:	e7f9      	b.n	800d028 <memset+0x4>

0800d034 <_localeconv_r>:
 800d034:	4800      	ldr	r0, [pc, #0]	@ (800d038 <_localeconv_r+0x4>)
 800d036:	4770      	bx	lr
 800d038:	20000174 	.word	0x20000174

0800d03c <_close_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	2300      	movs	r3, #0
 800d040:	4d05      	ldr	r5, [pc, #20]	@ (800d058 <_close_r+0x1c>)
 800d042:	4604      	mov	r4, r0
 800d044:	4608      	mov	r0, r1
 800d046:	602b      	str	r3, [r5, #0]
 800d048:	f7f7 fdc3 	bl	8004bd2 <_close>
 800d04c:	1c43      	adds	r3, r0, #1
 800d04e:	d102      	bne.n	800d056 <_close_r+0x1a>
 800d050:	682b      	ldr	r3, [r5, #0]
 800d052:	b103      	cbz	r3, 800d056 <_close_r+0x1a>
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	20004cd8 	.word	0x20004cd8

0800d05c <_lseek_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4604      	mov	r4, r0
 800d060:	4608      	mov	r0, r1
 800d062:	4611      	mov	r1, r2
 800d064:	2200      	movs	r2, #0
 800d066:	4d05      	ldr	r5, [pc, #20]	@ (800d07c <_lseek_r+0x20>)
 800d068:	602a      	str	r2, [r5, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	f7f7 fdd5 	bl	8004c1a <_lseek>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	d102      	bne.n	800d07a <_lseek_r+0x1e>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	b103      	cbz	r3, 800d07a <_lseek_r+0x1e>
 800d078:	6023      	str	r3, [r4, #0]
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	20004cd8 	.word	0x20004cd8

0800d080 <_read_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	4604      	mov	r4, r0
 800d084:	4608      	mov	r0, r1
 800d086:	4611      	mov	r1, r2
 800d088:	2200      	movs	r2, #0
 800d08a:	4d05      	ldr	r5, [pc, #20]	@ (800d0a0 <_read_r+0x20>)
 800d08c:	602a      	str	r2, [r5, #0]
 800d08e:	461a      	mov	r2, r3
 800d090:	f7f7 fd66 	bl	8004b60 <_read>
 800d094:	1c43      	adds	r3, r0, #1
 800d096:	d102      	bne.n	800d09e <_read_r+0x1e>
 800d098:	682b      	ldr	r3, [r5, #0]
 800d09a:	b103      	cbz	r3, 800d09e <_read_r+0x1e>
 800d09c:	6023      	str	r3, [r4, #0]
 800d09e:	bd38      	pop	{r3, r4, r5, pc}
 800d0a0:	20004cd8 	.word	0x20004cd8

0800d0a4 <_write_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4608      	mov	r0, r1
 800d0aa:	4611      	mov	r1, r2
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4d05      	ldr	r5, [pc, #20]	@ (800d0c4 <_write_r+0x20>)
 800d0b0:	602a      	str	r2, [r5, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	f7f7 fd71 	bl	8004b9a <_write>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_write_r+0x1e>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_write_r+0x1e>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	20004cd8 	.word	0x20004cd8

0800d0c8 <__errno>:
 800d0c8:	4b01      	ldr	r3, [pc, #4]	@ (800d0d0 <__errno+0x8>)
 800d0ca:	6818      	ldr	r0, [r3, #0]
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	20000034 	.word	0x20000034

0800d0d4 <__libc_init_array>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	2600      	movs	r6, #0
 800d0d8:	4d0c      	ldr	r5, [pc, #48]	@ (800d10c <__libc_init_array+0x38>)
 800d0da:	4c0d      	ldr	r4, [pc, #52]	@ (800d110 <__libc_init_array+0x3c>)
 800d0dc:	1b64      	subs	r4, r4, r5
 800d0de:	10a4      	asrs	r4, r4, #2
 800d0e0:	42a6      	cmp	r6, r4
 800d0e2:	d109      	bne.n	800d0f8 <__libc_init_array+0x24>
 800d0e4:	f002 f89a 	bl	800f21c <_init>
 800d0e8:	2600      	movs	r6, #0
 800d0ea:	4d0a      	ldr	r5, [pc, #40]	@ (800d114 <__libc_init_array+0x40>)
 800d0ec:	4c0a      	ldr	r4, [pc, #40]	@ (800d118 <__libc_init_array+0x44>)
 800d0ee:	1b64      	subs	r4, r4, r5
 800d0f0:	10a4      	asrs	r4, r4, #2
 800d0f2:	42a6      	cmp	r6, r4
 800d0f4:	d105      	bne.n	800d102 <__libc_init_array+0x2e>
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}
 800d0f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0fc:	4798      	blx	r3
 800d0fe:	3601      	adds	r6, #1
 800d100:	e7ee      	b.n	800d0e0 <__libc_init_array+0xc>
 800d102:	f855 3b04 	ldr.w	r3, [r5], #4
 800d106:	4798      	blx	r3
 800d108:	3601      	adds	r6, #1
 800d10a:	e7f2      	b.n	800d0f2 <__libc_init_array+0x1e>
 800d10c:	0800fa14 	.word	0x0800fa14
 800d110:	0800fa14 	.word	0x0800fa14
 800d114:	0800fa14 	.word	0x0800fa14
 800d118:	0800fa18 	.word	0x0800fa18

0800d11c <__retarget_lock_init_recursive>:
 800d11c:	4770      	bx	lr

0800d11e <__retarget_lock_acquire_recursive>:
 800d11e:	4770      	bx	lr

0800d120 <__retarget_lock_release_recursive>:
 800d120:	4770      	bx	lr

0800d122 <memchr>:
 800d122:	4603      	mov	r3, r0
 800d124:	b510      	push	{r4, lr}
 800d126:	b2c9      	uxtb	r1, r1
 800d128:	4402      	add	r2, r0
 800d12a:	4293      	cmp	r3, r2
 800d12c:	4618      	mov	r0, r3
 800d12e:	d101      	bne.n	800d134 <memchr+0x12>
 800d130:	2000      	movs	r0, #0
 800d132:	e003      	b.n	800d13c <memchr+0x1a>
 800d134:	7804      	ldrb	r4, [r0, #0]
 800d136:	3301      	adds	r3, #1
 800d138:	428c      	cmp	r4, r1
 800d13a:	d1f6      	bne.n	800d12a <memchr+0x8>
 800d13c:	bd10      	pop	{r4, pc}

0800d13e <memcpy>:
 800d13e:	440a      	add	r2, r1
 800d140:	4291      	cmp	r1, r2
 800d142:	f100 33ff 	add.w	r3, r0, #4294967295
 800d146:	d100      	bne.n	800d14a <memcpy+0xc>
 800d148:	4770      	bx	lr
 800d14a:	b510      	push	{r4, lr}
 800d14c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d150:	4291      	cmp	r1, r2
 800d152:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d156:	d1f9      	bne.n	800d14c <memcpy+0xe>
 800d158:	bd10      	pop	{r4, pc}

0800d15a <quorem>:
 800d15a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15e:	6903      	ldr	r3, [r0, #16]
 800d160:	690c      	ldr	r4, [r1, #16]
 800d162:	4607      	mov	r7, r0
 800d164:	42a3      	cmp	r3, r4
 800d166:	db7e      	blt.n	800d266 <quorem+0x10c>
 800d168:	3c01      	subs	r4, #1
 800d16a:	00a3      	lsls	r3, r4, #2
 800d16c:	f100 0514 	add.w	r5, r0, #20
 800d170:	f101 0814 	add.w	r8, r1, #20
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d17a:	9301      	str	r3, [sp, #4]
 800d17c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d180:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d184:	3301      	adds	r3, #1
 800d186:	429a      	cmp	r2, r3
 800d188:	fbb2 f6f3 	udiv	r6, r2, r3
 800d18c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d190:	d32e      	bcc.n	800d1f0 <quorem+0x96>
 800d192:	f04f 0a00 	mov.w	sl, #0
 800d196:	46c4      	mov	ip, r8
 800d198:	46ae      	mov	lr, r5
 800d19a:	46d3      	mov	fp, sl
 800d19c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1a0:	b298      	uxth	r0, r3
 800d1a2:	fb06 a000 	mla	r0, r6, r0, sl
 800d1a6:	0c1b      	lsrs	r3, r3, #16
 800d1a8:	0c02      	lsrs	r2, r0, #16
 800d1aa:	fb06 2303 	mla	r3, r6, r3, r2
 800d1ae:	f8de 2000 	ldr.w	r2, [lr]
 800d1b2:	b280      	uxth	r0, r0
 800d1b4:	b292      	uxth	r2, r2
 800d1b6:	1a12      	subs	r2, r2, r0
 800d1b8:	445a      	add	r2, fp
 800d1ba:	f8de 0000 	ldr.w	r0, [lr]
 800d1be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1cc:	b292      	uxth	r2, r2
 800d1ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d1d2:	45e1      	cmp	r9, ip
 800d1d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d1d8:	f84e 2b04 	str.w	r2, [lr], #4
 800d1dc:	d2de      	bcs.n	800d19c <quorem+0x42>
 800d1de:	9b00      	ldr	r3, [sp, #0]
 800d1e0:	58eb      	ldr	r3, [r5, r3]
 800d1e2:	b92b      	cbnz	r3, 800d1f0 <quorem+0x96>
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	3b04      	subs	r3, #4
 800d1e8:	429d      	cmp	r5, r3
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	d32f      	bcc.n	800d24e <quorem+0xf4>
 800d1ee:	613c      	str	r4, [r7, #16]
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f001 f981 	bl	800e4f8 <__mcmp>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	db25      	blt.n	800d246 <quorem+0xec>
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	f858 2b04 	ldr.w	r2, [r8], #4
 800d202:	f8d1 c000 	ldr.w	ip, [r1]
 800d206:	fa1f fe82 	uxth.w	lr, r2
 800d20a:	fa1f f38c 	uxth.w	r3, ip
 800d20e:	eba3 030e 	sub.w	r3, r3, lr
 800d212:	4403      	add	r3, r0
 800d214:	0c12      	lsrs	r2, r2, #16
 800d216:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d21a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d21e:	b29b      	uxth	r3, r3
 800d220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d224:	45c1      	cmp	r9, r8
 800d226:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d22a:	f841 3b04 	str.w	r3, [r1], #4
 800d22e:	d2e6      	bcs.n	800d1fe <quorem+0xa4>
 800d230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d234:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d238:	b922      	cbnz	r2, 800d244 <quorem+0xea>
 800d23a:	3b04      	subs	r3, #4
 800d23c:	429d      	cmp	r5, r3
 800d23e:	461a      	mov	r2, r3
 800d240:	d30b      	bcc.n	800d25a <quorem+0x100>
 800d242:	613c      	str	r4, [r7, #16]
 800d244:	3601      	adds	r6, #1
 800d246:	4630      	mov	r0, r6
 800d248:	b003      	add	sp, #12
 800d24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24e:	6812      	ldr	r2, [r2, #0]
 800d250:	3b04      	subs	r3, #4
 800d252:	2a00      	cmp	r2, #0
 800d254:	d1cb      	bne.n	800d1ee <quorem+0x94>
 800d256:	3c01      	subs	r4, #1
 800d258:	e7c6      	b.n	800d1e8 <quorem+0x8e>
 800d25a:	6812      	ldr	r2, [r2, #0]
 800d25c:	3b04      	subs	r3, #4
 800d25e:	2a00      	cmp	r2, #0
 800d260:	d1ef      	bne.n	800d242 <quorem+0xe8>
 800d262:	3c01      	subs	r4, #1
 800d264:	e7ea      	b.n	800d23c <quorem+0xe2>
 800d266:	2000      	movs	r0, #0
 800d268:	e7ee      	b.n	800d248 <quorem+0xee>
 800d26a:	0000      	movs	r0, r0
 800d26c:	0000      	movs	r0, r0
	...

0800d270 <_dtoa_r>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	4614      	mov	r4, r2
 800d276:	461d      	mov	r5, r3
 800d278:	69c7      	ldr	r7, [r0, #28]
 800d27a:	b097      	sub	sp, #92	@ 0x5c
 800d27c:	4681      	mov	r9, r0
 800d27e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d282:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800d284:	b97f      	cbnz	r7, 800d2a6 <_dtoa_r+0x36>
 800d286:	2010      	movs	r0, #16
 800d288:	f000 fe0e 	bl	800dea8 <malloc>
 800d28c:	4602      	mov	r2, r0
 800d28e:	f8c9 001c 	str.w	r0, [r9, #28]
 800d292:	b920      	cbnz	r0, 800d29e <_dtoa_r+0x2e>
 800d294:	21ef      	movs	r1, #239	@ 0xef
 800d296:	4bac      	ldr	r3, [pc, #688]	@ (800d548 <_dtoa_r+0x2d8>)
 800d298:	48ac      	ldr	r0, [pc, #688]	@ (800d54c <_dtoa_r+0x2dc>)
 800d29a:	f001 fc5f 	bl	800eb5c <__assert_func>
 800d29e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d2a2:	6007      	str	r7, [r0, #0]
 800d2a4:	60c7      	str	r7, [r0, #12]
 800d2a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d2aa:	6819      	ldr	r1, [r3, #0]
 800d2ac:	b159      	cbz	r1, 800d2c6 <_dtoa_r+0x56>
 800d2ae:	685a      	ldr	r2, [r3, #4]
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	4093      	lsls	r3, r2
 800d2b4:	604a      	str	r2, [r1, #4]
 800d2b6:	608b      	str	r3, [r1, #8]
 800d2b8:	4648      	mov	r0, r9
 800d2ba:	f000 feeb 	bl	800e094 <_Bfree>
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	1e2b      	subs	r3, r5, #0
 800d2c8:	bfaf      	iteee	ge
 800d2ca:	2300      	movge	r3, #0
 800d2cc:	2201      	movlt	r2, #1
 800d2ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2d2:	9307      	strlt	r3, [sp, #28]
 800d2d4:	bfa8      	it	ge
 800d2d6:	6033      	strge	r3, [r6, #0]
 800d2d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800d2dc:	4b9c      	ldr	r3, [pc, #624]	@ (800d550 <_dtoa_r+0x2e0>)
 800d2de:	bfb8      	it	lt
 800d2e0:	6032      	strlt	r2, [r6, #0]
 800d2e2:	ea33 0308 	bics.w	r3, r3, r8
 800d2e6:	d112      	bne.n	800d30e <_dtoa_r+0x9e>
 800d2e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d2ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d2ee:	6013      	str	r3, [r2, #0]
 800d2f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d2f4:	4323      	orrs	r3, r4
 800d2f6:	f000 855e 	beq.w	800ddb6 <_dtoa_r+0xb46>
 800d2fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d2fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d554 <_dtoa_r+0x2e4>
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 8560 	beq.w	800ddc6 <_dtoa_r+0xb56>
 800d306:	f10a 0303 	add.w	r3, sl, #3
 800d30a:	f000 bd5a 	b.w	800ddc2 <_dtoa_r+0xb52>
 800d30e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d312:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d31a:	2200      	movs	r2, #0
 800d31c:	2300      	movs	r3, #0
 800d31e:	f7f3 fb5b 	bl	80009d8 <__aeabi_dcmpeq>
 800d322:	4607      	mov	r7, r0
 800d324:	b158      	cbz	r0, 800d33e <_dtoa_r+0xce>
 800d326:	2301      	movs	r3, #1
 800d328:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d32a:	6013      	str	r3, [r2, #0]
 800d32c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d32e:	b113      	cbz	r3, 800d336 <_dtoa_r+0xc6>
 800d330:	4b89      	ldr	r3, [pc, #548]	@ (800d558 <_dtoa_r+0x2e8>)
 800d332:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800d55c <_dtoa_r+0x2ec>
 800d33a:	f000 bd44 	b.w	800ddc6 <_dtoa_r+0xb56>
 800d33e:	ab14      	add	r3, sp, #80	@ 0x50
 800d340:	9301      	str	r3, [sp, #4]
 800d342:	ab15      	add	r3, sp, #84	@ 0x54
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	4648      	mov	r0, r9
 800d348:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d34c:	f001 f984 	bl	800e658 <__d2b>
 800d350:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800d354:	9003      	str	r0, [sp, #12]
 800d356:	2e00      	cmp	r6, #0
 800d358:	d078      	beq.n	800d44c <_dtoa_r+0x1dc>
 800d35a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d35e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d360:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d368:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d36c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d370:	9712      	str	r7, [sp, #72]	@ 0x48
 800d372:	4619      	mov	r1, r3
 800d374:	2200      	movs	r2, #0
 800d376:	4b7a      	ldr	r3, [pc, #488]	@ (800d560 <_dtoa_r+0x2f0>)
 800d378:	f7f2 ff0e 	bl	8000198 <__aeabi_dsub>
 800d37c:	a36c      	add	r3, pc, #432	@ (adr r3, 800d530 <_dtoa_r+0x2c0>)
 800d37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d382:	f7f3 f8c1 	bl	8000508 <__aeabi_dmul>
 800d386:	a36c      	add	r3, pc, #432	@ (adr r3, 800d538 <_dtoa_r+0x2c8>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	f7f2 ff06 	bl	800019c <__adddf3>
 800d390:	4604      	mov	r4, r0
 800d392:	4630      	mov	r0, r6
 800d394:	460d      	mov	r5, r1
 800d396:	f7f3 f84d 	bl	8000434 <__aeabi_i2d>
 800d39a:	a369      	add	r3, pc, #420	@ (adr r3, 800d540 <_dtoa_r+0x2d0>)
 800d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a0:	f7f3 f8b2 	bl	8000508 <__aeabi_dmul>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	f7f2 fef6 	bl	800019c <__adddf3>
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	460d      	mov	r5, r1
 800d3b4:	f7f3 fb58 	bl	8000a68 <__aeabi_d2iz>
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4607      	mov	r7, r0
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4620      	mov	r0, r4
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	f7f3 fb13 	bl	80009ec <__aeabi_dcmplt>
 800d3c6:	b140      	cbz	r0, 800d3da <_dtoa_r+0x16a>
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	f7f3 f833 	bl	8000434 <__aeabi_i2d>
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	462b      	mov	r3, r5
 800d3d2:	f7f3 fb01 	bl	80009d8 <__aeabi_dcmpeq>
 800d3d6:	b900      	cbnz	r0, 800d3da <_dtoa_r+0x16a>
 800d3d8:	3f01      	subs	r7, #1
 800d3da:	2f16      	cmp	r7, #22
 800d3dc:	d854      	bhi.n	800d488 <_dtoa_r+0x218>
 800d3de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3e2:	4b60      	ldr	r3, [pc, #384]	@ (800d564 <_dtoa_r+0x2f4>)
 800d3e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	f7f3 fafe 	bl	80009ec <__aeabi_dcmplt>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d04b      	beq.n	800d48c <_dtoa_r+0x21c>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	3f01      	subs	r7, #1
 800d3f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3fc:	1b9b      	subs	r3, r3, r6
 800d3fe:	1e5a      	subs	r2, r3, #1
 800d400:	bf49      	itett	mi
 800d402:	f1c3 0301 	rsbmi	r3, r3, #1
 800d406:	2300      	movpl	r3, #0
 800d408:	9304      	strmi	r3, [sp, #16]
 800d40a:	2300      	movmi	r3, #0
 800d40c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d40e:	bf54      	ite	pl
 800d410:	9304      	strpl	r3, [sp, #16]
 800d412:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800d414:	2f00      	cmp	r7, #0
 800d416:	db3b      	blt.n	800d490 <_dtoa_r+0x220>
 800d418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d41a:	970e      	str	r7, [sp, #56]	@ 0x38
 800d41c:	443b      	add	r3, r7
 800d41e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d420:	2300      	movs	r3, #0
 800d422:	930a      	str	r3, [sp, #40]	@ 0x28
 800d424:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d426:	2b09      	cmp	r3, #9
 800d428:	d865      	bhi.n	800d4f6 <_dtoa_r+0x286>
 800d42a:	2b05      	cmp	r3, #5
 800d42c:	bfc4      	itt	gt
 800d42e:	3b04      	subgt	r3, #4
 800d430:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800d432:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d434:	bfc8      	it	gt
 800d436:	2400      	movgt	r4, #0
 800d438:	f1a3 0302 	sub.w	r3, r3, #2
 800d43c:	bfd8      	it	le
 800d43e:	2401      	movle	r4, #1
 800d440:	2b03      	cmp	r3, #3
 800d442:	d864      	bhi.n	800d50e <_dtoa_r+0x29e>
 800d444:	e8df f003 	tbb	[pc, r3]
 800d448:	2c385553 	.word	0x2c385553
 800d44c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d450:	441e      	add	r6, r3
 800d452:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d456:	2b20      	cmp	r3, #32
 800d458:	bfc1      	itttt	gt
 800d45a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d45e:	fa08 f803 	lslgt.w	r8, r8, r3
 800d462:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d466:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d46a:	bfd6      	itet	le
 800d46c:	f1c3 0320 	rsble	r3, r3, #32
 800d470:	ea48 0003 	orrgt.w	r0, r8, r3
 800d474:	fa04 f003 	lslle.w	r0, r4, r3
 800d478:	f7f2 ffcc 	bl	8000414 <__aeabi_ui2d>
 800d47c:	2201      	movs	r2, #1
 800d47e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d482:	3e01      	subs	r6, #1
 800d484:	9212      	str	r2, [sp, #72]	@ 0x48
 800d486:	e774      	b.n	800d372 <_dtoa_r+0x102>
 800d488:	2301      	movs	r3, #1
 800d48a:	e7b5      	b.n	800d3f8 <_dtoa_r+0x188>
 800d48c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d48e:	e7b4      	b.n	800d3fa <_dtoa_r+0x18a>
 800d490:	9b04      	ldr	r3, [sp, #16]
 800d492:	1bdb      	subs	r3, r3, r7
 800d494:	9304      	str	r3, [sp, #16]
 800d496:	427b      	negs	r3, r7
 800d498:	930a      	str	r3, [sp, #40]	@ 0x28
 800d49a:	2300      	movs	r3, #0
 800d49c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d49e:	e7c1      	b.n	800d424 <_dtoa_r+0x1b4>
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d4a6:	eb07 0b03 	add.w	fp, r7, r3
 800d4aa:	f10b 0301 	add.w	r3, fp, #1
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	9308      	str	r3, [sp, #32]
 800d4b2:	bfb8      	it	lt
 800d4b4:	2301      	movlt	r3, #1
 800d4b6:	e006      	b.n	800d4c6 <_dtoa_r+0x256>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	dd28      	ble.n	800d514 <_dtoa_r+0x2a4>
 800d4c2:	469b      	mov	fp, r3
 800d4c4:	9308      	str	r3, [sp, #32]
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	2204      	movs	r2, #4
 800d4ca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d4ce:	f102 0514 	add.w	r5, r2, #20
 800d4d2:	429d      	cmp	r5, r3
 800d4d4:	d926      	bls.n	800d524 <_dtoa_r+0x2b4>
 800d4d6:	6041      	str	r1, [r0, #4]
 800d4d8:	4648      	mov	r0, r9
 800d4da:	f000 fd9b 	bl	800e014 <_Balloc>
 800d4de:	4682      	mov	sl, r0
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d143      	bne.n	800d56c <_dtoa_r+0x2fc>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4ea:	4b1f      	ldr	r3, [pc, #124]	@ (800d568 <_dtoa_r+0x2f8>)
 800d4ec:	e6d4      	b.n	800d298 <_dtoa_r+0x28>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e7e3      	b.n	800d4ba <_dtoa_r+0x24a>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e7d5      	b.n	800d4a2 <_dtoa_r+0x232>
 800d4f6:	2401      	movs	r4, #1
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d4fc:	9320      	str	r3, [sp, #128]	@ 0x80
 800d4fe:	f04f 3bff 	mov.w	fp, #4294967295
 800d502:	2200      	movs	r2, #0
 800d504:	2312      	movs	r3, #18
 800d506:	f8cd b020 	str.w	fp, [sp, #32]
 800d50a:	9221      	str	r2, [sp, #132]	@ 0x84
 800d50c:	e7db      	b.n	800d4c6 <_dtoa_r+0x256>
 800d50e:	2301      	movs	r3, #1
 800d510:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d512:	e7f4      	b.n	800d4fe <_dtoa_r+0x28e>
 800d514:	f04f 0b01 	mov.w	fp, #1
 800d518:	465b      	mov	r3, fp
 800d51a:	f8cd b020 	str.w	fp, [sp, #32]
 800d51e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800d522:	e7d0      	b.n	800d4c6 <_dtoa_r+0x256>
 800d524:	3101      	adds	r1, #1
 800d526:	0052      	lsls	r2, r2, #1
 800d528:	e7d1      	b.n	800d4ce <_dtoa_r+0x25e>
 800d52a:	bf00      	nop
 800d52c:	f3af 8000 	nop.w
 800d530:	636f4361 	.word	0x636f4361
 800d534:	3fd287a7 	.word	0x3fd287a7
 800d538:	8b60c8b3 	.word	0x8b60c8b3
 800d53c:	3fc68a28 	.word	0x3fc68a28
 800d540:	509f79fb 	.word	0x509f79fb
 800d544:	3fd34413 	.word	0x3fd34413
 800d548:	0800f6d5 	.word	0x0800f6d5
 800d54c:	0800f6ec 	.word	0x0800f6ec
 800d550:	7ff00000 	.word	0x7ff00000
 800d554:	0800f6d1 	.word	0x0800f6d1
 800d558:	0800f6a5 	.word	0x0800f6a5
 800d55c:	0800f6a4 	.word	0x0800f6a4
 800d560:	3ff80000 	.word	0x3ff80000
 800d564:	0800f840 	.word	0x0800f840
 800d568:	0800f744 	.word	0x0800f744
 800d56c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d570:	6018      	str	r0, [r3, #0]
 800d572:	9b08      	ldr	r3, [sp, #32]
 800d574:	2b0e      	cmp	r3, #14
 800d576:	f200 80a1 	bhi.w	800d6bc <_dtoa_r+0x44c>
 800d57a:	2c00      	cmp	r4, #0
 800d57c:	f000 809e 	beq.w	800d6bc <_dtoa_r+0x44c>
 800d580:	2f00      	cmp	r7, #0
 800d582:	dd33      	ble.n	800d5ec <_dtoa_r+0x37c>
 800d584:	4b9c      	ldr	r3, [pc, #624]	@ (800d7f8 <_dtoa_r+0x588>)
 800d586:	f007 020f 	and.w	r2, r7, #15
 800d58a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d58e:	05f8      	lsls	r0, r7, #23
 800d590:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d594:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800d598:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d59c:	d516      	bpl.n	800d5cc <_dtoa_r+0x35c>
 800d59e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5a2:	4b96      	ldr	r3, [pc, #600]	@ (800d7fc <_dtoa_r+0x58c>)
 800d5a4:	2603      	movs	r6, #3
 800d5a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5aa:	f7f3 f8d7 	bl	800075c <__aeabi_ddiv>
 800d5ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5b2:	f004 040f 	and.w	r4, r4, #15
 800d5b6:	4d91      	ldr	r5, [pc, #580]	@ (800d7fc <_dtoa_r+0x58c>)
 800d5b8:	b954      	cbnz	r4, 800d5d0 <_dtoa_r+0x360>
 800d5ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d5be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5c2:	f7f3 f8cb 	bl	800075c <__aeabi_ddiv>
 800d5c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5ca:	e028      	b.n	800d61e <_dtoa_r+0x3ae>
 800d5cc:	2602      	movs	r6, #2
 800d5ce:	e7f2      	b.n	800d5b6 <_dtoa_r+0x346>
 800d5d0:	07e1      	lsls	r1, r4, #31
 800d5d2:	d508      	bpl.n	800d5e6 <_dtoa_r+0x376>
 800d5d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d5d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5dc:	f7f2 ff94 	bl	8000508 <__aeabi_dmul>
 800d5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5e4:	3601      	adds	r6, #1
 800d5e6:	1064      	asrs	r4, r4, #1
 800d5e8:	3508      	adds	r5, #8
 800d5ea:	e7e5      	b.n	800d5b8 <_dtoa_r+0x348>
 800d5ec:	f000 80af 	beq.w	800d74e <_dtoa_r+0x4de>
 800d5f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5f4:	427c      	negs	r4, r7
 800d5f6:	4b80      	ldr	r3, [pc, #512]	@ (800d7f8 <_dtoa_r+0x588>)
 800d5f8:	f004 020f 	and.w	r2, r4, #15
 800d5fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d604:	f7f2 ff80 	bl	8000508 <__aeabi_dmul>
 800d608:	2602      	movs	r6, #2
 800d60a:	2300      	movs	r3, #0
 800d60c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d610:	4d7a      	ldr	r5, [pc, #488]	@ (800d7fc <_dtoa_r+0x58c>)
 800d612:	1124      	asrs	r4, r4, #4
 800d614:	2c00      	cmp	r4, #0
 800d616:	f040 808f 	bne.w	800d738 <_dtoa_r+0x4c8>
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1d3      	bne.n	800d5c6 <_dtoa_r+0x356>
 800d61e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800d622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 8094 	beq.w	800d752 <_dtoa_r+0x4e2>
 800d62a:	2200      	movs	r2, #0
 800d62c:	4620      	mov	r0, r4
 800d62e:	4629      	mov	r1, r5
 800d630:	4b73      	ldr	r3, [pc, #460]	@ (800d800 <_dtoa_r+0x590>)
 800d632:	f7f3 f9db 	bl	80009ec <__aeabi_dcmplt>
 800d636:	2800      	cmp	r0, #0
 800d638:	f000 808b 	beq.w	800d752 <_dtoa_r+0x4e2>
 800d63c:	9b08      	ldr	r3, [sp, #32]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 8087 	beq.w	800d752 <_dtoa_r+0x4e2>
 800d644:	f1bb 0f00 	cmp.w	fp, #0
 800d648:	dd34      	ble.n	800d6b4 <_dtoa_r+0x444>
 800d64a:	4620      	mov	r0, r4
 800d64c:	2200      	movs	r2, #0
 800d64e:	4629      	mov	r1, r5
 800d650:	4b6c      	ldr	r3, [pc, #432]	@ (800d804 <_dtoa_r+0x594>)
 800d652:	f7f2 ff59 	bl	8000508 <__aeabi_dmul>
 800d656:	465c      	mov	r4, fp
 800d658:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d65c:	f107 38ff 	add.w	r8, r7, #4294967295
 800d660:	3601      	adds	r6, #1
 800d662:	4630      	mov	r0, r6
 800d664:	f7f2 fee6 	bl	8000434 <__aeabi_i2d>
 800d668:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d66c:	f7f2 ff4c 	bl	8000508 <__aeabi_dmul>
 800d670:	2200      	movs	r2, #0
 800d672:	4b65      	ldr	r3, [pc, #404]	@ (800d808 <_dtoa_r+0x598>)
 800d674:	f7f2 fd92 	bl	800019c <__adddf3>
 800d678:	4605      	mov	r5, r0
 800d67a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d67e:	2c00      	cmp	r4, #0
 800d680:	d16a      	bne.n	800d758 <_dtoa_r+0x4e8>
 800d682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d686:	2200      	movs	r2, #0
 800d688:	4b60      	ldr	r3, [pc, #384]	@ (800d80c <_dtoa_r+0x59c>)
 800d68a:	f7f2 fd85 	bl	8000198 <__aeabi_dsub>
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d696:	462a      	mov	r2, r5
 800d698:	4633      	mov	r3, r6
 800d69a:	f7f3 f9c5 	bl	8000a28 <__aeabi_dcmpgt>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	f040 8298 	bne.w	800dbd4 <_dtoa_r+0x964>
 800d6a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6a8:	462a      	mov	r2, r5
 800d6aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d6ae:	f7f3 f99d 	bl	80009ec <__aeabi_dcmplt>
 800d6b2:	bb38      	cbnz	r0, 800d704 <_dtoa_r+0x494>
 800d6b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d6b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d6bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f2c0 8157 	blt.w	800d972 <_dtoa_r+0x702>
 800d6c4:	2f0e      	cmp	r7, #14
 800d6c6:	f300 8154 	bgt.w	800d972 <_dtoa_r+0x702>
 800d6ca:	4b4b      	ldr	r3, [pc, #300]	@ (800d7f8 <_dtoa_r+0x588>)
 800d6cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d6d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d6d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f280 80e5 	bge.w	800d8aa <_dtoa_r+0x63a>
 800d6e0:	9b08      	ldr	r3, [sp, #32]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f300 80e1 	bgt.w	800d8aa <_dtoa_r+0x63a>
 800d6e8:	d10c      	bne.n	800d704 <_dtoa_r+0x494>
 800d6ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	4b46      	ldr	r3, [pc, #280]	@ (800d80c <_dtoa_r+0x59c>)
 800d6f2:	f7f2 ff09 	bl	8000508 <__aeabi_dmul>
 800d6f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6fa:	f7f3 f98b 	bl	8000a14 <__aeabi_dcmpge>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	f000 8266 	beq.w	800dbd0 <_dtoa_r+0x960>
 800d704:	2400      	movs	r4, #0
 800d706:	4625      	mov	r5, r4
 800d708:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d70a:	4656      	mov	r6, sl
 800d70c:	ea6f 0803 	mvn.w	r8, r3
 800d710:	2700      	movs	r7, #0
 800d712:	4621      	mov	r1, r4
 800d714:	4648      	mov	r0, r9
 800d716:	f000 fcbd 	bl	800e094 <_Bfree>
 800d71a:	2d00      	cmp	r5, #0
 800d71c:	f000 80bd 	beq.w	800d89a <_dtoa_r+0x62a>
 800d720:	b12f      	cbz	r7, 800d72e <_dtoa_r+0x4be>
 800d722:	42af      	cmp	r7, r5
 800d724:	d003      	beq.n	800d72e <_dtoa_r+0x4be>
 800d726:	4639      	mov	r1, r7
 800d728:	4648      	mov	r0, r9
 800d72a:	f000 fcb3 	bl	800e094 <_Bfree>
 800d72e:	4629      	mov	r1, r5
 800d730:	4648      	mov	r0, r9
 800d732:	f000 fcaf 	bl	800e094 <_Bfree>
 800d736:	e0b0      	b.n	800d89a <_dtoa_r+0x62a>
 800d738:	07e2      	lsls	r2, r4, #31
 800d73a:	d505      	bpl.n	800d748 <_dtoa_r+0x4d8>
 800d73c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d740:	f7f2 fee2 	bl	8000508 <__aeabi_dmul>
 800d744:	2301      	movs	r3, #1
 800d746:	3601      	adds	r6, #1
 800d748:	1064      	asrs	r4, r4, #1
 800d74a:	3508      	adds	r5, #8
 800d74c:	e762      	b.n	800d614 <_dtoa_r+0x3a4>
 800d74e:	2602      	movs	r6, #2
 800d750:	e765      	b.n	800d61e <_dtoa_r+0x3ae>
 800d752:	46b8      	mov	r8, r7
 800d754:	9c08      	ldr	r4, [sp, #32]
 800d756:	e784      	b.n	800d662 <_dtoa_r+0x3f2>
 800d758:	4b27      	ldr	r3, [pc, #156]	@ (800d7f8 <_dtoa_r+0x588>)
 800d75a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d75c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d760:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d764:	4454      	add	r4, sl
 800d766:	2900      	cmp	r1, #0
 800d768:	d054      	beq.n	800d814 <_dtoa_r+0x5a4>
 800d76a:	2000      	movs	r0, #0
 800d76c:	4928      	ldr	r1, [pc, #160]	@ (800d810 <_dtoa_r+0x5a0>)
 800d76e:	f7f2 fff5 	bl	800075c <__aeabi_ddiv>
 800d772:	4633      	mov	r3, r6
 800d774:	462a      	mov	r2, r5
 800d776:	f7f2 fd0f 	bl	8000198 <__aeabi_dsub>
 800d77a:	4656      	mov	r6, sl
 800d77c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d784:	f7f3 f970 	bl	8000a68 <__aeabi_d2iz>
 800d788:	4605      	mov	r5, r0
 800d78a:	f7f2 fe53 	bl	8000434 <__aeabi_i2d>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d796:	f7f2 fcff 	bl	8000198 <__aeabi_dsub>
 800d79a:	4602      	mov	r2, r0
 800d79c:	460b      	mov	r3, r1
 800d79e:	3530      	adds	r5, #48	@ 0x30
 800d7a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7a8:	f806 5b01 	strb.w	r5, [r6], #1
 800d7ac:	f7f3 f91e 	bl	80009ec <__aeabi_dcmplt>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d172      	bne.n	800d89a <_dtoa_r+0x62a>
 800d7b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	4911      	ldr	r1, [pc, #68]	@ (800d800 <_dtoa_r+0x590>)
 800d7bc:	f7f2 fcec 	bl	8000198 <__aeabi_dsub>
 800d7c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7c4:	f7f3 f912 	bl	80009ec <__aeabi_dcmplt>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	f040 80b4 	bne.w	800d936 <_dtoa_r+0x6c6>
 800d7ce:	42a6      	cmp	r6, r4
 800d7d0:	f43f af70 	beq.w	800d6b4 <_dtoa_r+0x444>
 800d7d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7d8:	2200      	movs	r2, #0
 800d7da:	4b0a      	ldr	r3, [pc, #40]	@ (800d804 <_dtoa_r+0x594>)
 800d7dc:	f7f2 fe94 	bl	8000508 <__aeabi_dmul>
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7ea:	4b06      	ldr	r3, [pc, #24]	@ (800d804 <_dtoa_r+0x594>)
 800d7ec:	f7f2 fe8c 	bl	8000508 <__aeabi_dmul>
 800d7f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d7f4:	e7c4      	b.n	800d780 <_dtoa_r+0x510>
 800d7f6:	bf00      	nop
 800d7f8:	0800f840 	.word	0x0800f840
 800d7fc:	0800f818 	.word	0x0800f818
 800d800:	3ff00000 	.word	0x3ff00000
 800d804:	40240000 	.word	0x40240000
 800d808:	401c0000 	.word	0x401c0000
 800d80c:	40140000 	.word	0x40140000
 800d810:	3fe00000 	.word	0x3fe00000
 800d814:	4631      	mov	r1, r6
 800d816:	4628      	mov	r0, r5
 800d818:	f7f2 fe76 	bl	8000508 <__aeabi_dmul>
 800d81c:	4656      	mov	r6, sl
 800d81e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d822:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d828:	f7f3 f91e 	bl	8000a68 <__aeabi_d2iz>
 800d82c:	4605      	mov	r5, r0
 800d82e:	f7f2 fe01 	bl	8000434 <__aeabi_i2d>
 800d832:	4602      	mov	r2, r0
 800d834:	460b      	mov	r3, r1
 800d836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d83a:	f7f2 fcad 	bl	8000198 <__aeabi_dsub>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	3530      	adds	r5, #48	@ 0x30
 800d844:	f806 5b01 	strb.w	r5, [r6], #1
 800d848:	42a6      	cmp	r6, r4
 800d84a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d84e:	f04f 0200 	mov.w	r2, #0
 800d852:	d124      	bne.n	800d89e <_dtoa_r+0x62e>
 800d854:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d858:	4bae      	ldr	r3, [pc, #696]	@ (800db14 <_dtoa_r+0x8a4>)
 800d85a:	f7f2 fc9f 	bl	800019c <__adddf3>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d866:	f7f3 f8df 	bl	8000a28 <__aeabi_dcmpgt>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d163      	bne.n	800d936 <_dtoa_r+0x6c6>
 800d86e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d872:	2000      	movs	r0, #0
 800d874:	49a7      	ldr	r1, [pc, #668]	@ (800db14 <_dtoa_r+0x8a4>)
 800d876:	f7f2 fc8f 	bl	8000198 <__aeabi_dsub>
 800d87a:	4602      	mov	r2, r0
 800d87c:	460b      	mov	r3, r1
 800d87e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d882:	f7f3 f8b3 	bl	80009ec <__aeabi_dcmplt>
 800d886:	2800      	cmp	r0, #0
 800d888:	f43f af14 	beq.w	800d6b4 <_dtoa_r+0x444>
 800d88c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d88e:	1e73      	subs	r3, r6, #1
 800d890:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d892:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d896:	2b30      	cmp	r3, #48	@ 0x30
 800d898:	d0f8      	beq.n	800d88c <_dtoa_r+0x61c>
 800d89a:	4647      	mov	r7, r8
 800d89c:	e03b      	b.n	800d916 <_dtoa_r+0x6a6>
 800d89e:	4b9e      	ldr	r3, [pc, #632]	@ (800db18 <_dtoa_r+0x8a8>)
 800d8a0:	f7f2 fe32 	bl	8000508 <__aeabi_dmul>
 800d8a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d8a8:	e7bc      	b.n	800d824 <_dtoa_r+0x5b4>
 800d8aa:	4656      	mov	r6, sl
 800d8ac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800d8b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	f7f2 ff50 	bl	800075c <__aeabi_ddiv>
 800d8bc:	f7f3 f8d4 	bl	8000a68 <__aeabi_d2iz>
 800d8c0:	4680      	mov	r8, r0
 800d8c2:	f7f2 fdb7 	bl	8000434 <__aeabi_i2d>
 800d8c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8ca:	f7f2 fe1d 	bl	8000508 <__aeabi_dmul>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f2 fc5f 	bl	8000198 <__aeabi_dsub>
 800d8da:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d8de:	9d08      	ldr	r5, [sp, #32]
 800d8e0:	f806 4b01 	strb.w	r4, [r6], #1
 800d8e4:	eba6 040a 	sub.w	r4, r6, sl
 800d8e8:	42a5      	cmp	r5, r4
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	d133      	bne.n	800d958 <_dtoa_r+0x6e8>
 800d8f0:	f7f2 fc54 	bl	800019c <__adddf3>
 800d8f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	460d      	mov	r5, r1
 800d8fc:	f7f3 f894 	bl	8000a28 <__aeabi_dcmpgt>
 800d900:	b9c0      	cbnz	r0, 800d934 <_dtoa_r+0x6c4>
 800d902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d906:	4620      	mov	r0, r4
 800d908:	4629      	mov	r1, r5
 800d90a:	f7f3 f865 	bl	80009d8 <__aeabi_dcmpeq>
 800d90e:	b110      	cbz	r0, 800d916 <_dtoa_r+0x6a6>
 800d910:	f018 0f01 	tst.w	r8, #1
 800d914:	d10e      	bne.n	800d934 <_dtoa_r+0x6c4>
 800d916:	4648      	mov	r0, r9
 800d918:	9903      	ldr	r1, [sp, #12]
 800d91a:	f000 fbbb 	bl	800e094 <_Bfree>
 800d91e:	2300      	movs	r3, #0
 800d920:	7033      	strb	r3, [r6, #0]
 800d922:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d924:	3701      	adds	r7, #1
 800d926:	601f      	str	r7, [r3, #0]
 800d928:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f000 824b 	beq.w	800ddc6 <_dtoa_r+0xb56>
 800d930:	601e      	str	r6, [r3, #0]
 800d932:	e248      	b.n	800ddc6 <_dtoa_r+0xb56>
 800d934:	46b8      	mov	r8, r7
 800d936:	4633      	mov	r3, r6
 800d938:	461e      	mov	r6, r3
 800d93a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d93e:	2a39      	cmp	r2, #57	@ 0x39
 800d940:	d106      	bne.n	800d950 <_dtoa_r+0x6e0>
 800d942:	459a      	cmp	sl, r3
 800d944:	d1f8      	bne.n	800d938 <_dtoa_r+0x6c8>
 800d946:	2230      	movs	r2, #48	@ 0x30
 800d948:	f108 0801 	add.w	r8, r8, #1
 800d94c:	f88a 2000 	strb.w	r2, [sl]
 800d950:	781a      	ldrb	r2, [r3, #0]
 800d952:	3201      	adds	r2, #1
 800d954:	701a      	strb	r2, [r3, #0]
 800d956:	e7a0      	b.n	800d89a <_dtoa_r+0x62a>
 800d958:	2200      	movs	r2, #0
 800d95a:	4b6f      	ldr	r3, [pc, #444]	@ (800db18 <_dtoa_r+0x8a8>)
 800d95c:	f7f2 fdd4 	bl	8000508 <__aeabi_dmul>
 800d960:	2200      	movs	r2, #0
 800d962:	2300      	movs	r3, #0
 800d964:	4604      	mov	r4, r0
 800d966:	460d      	mov	r5, r1
 800d968:	f7f3 f836 	bl	80009d8 <__aeabi_dcmpeq>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d09f      	beq.n	800d8b0 <_dtoa_r+0x640>
 800d970:	e7d1      	b.n	800d916 <_dtoa_r+0x6a6>
 800d972:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d974:	2a00      	cmp	r2, #0
 800d976:	f000 80ea 	beq.w	800db4e <_dtoa_r+0x8de>
 800d97a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d97c:	2a01      	cmp	r2, #1
 800d97e:	f300 80cd 	bgt.w	800db1c <_dtoa_r+0x8ac>
 800d982:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d984:	2a00      	cmp	r2, #0
 800d986:	f000 80c1 	beq.w	800db0c <_dtoa_r+0x89c>
 800d98a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d98e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d990:	9e04      	ldr	r6, [sp, #16]
 800d992:	9a04      	ldr	r2, [sp, #16]
 800d994:	2101      	movs	r1, #1
 800d996:	441a      	add	r2, r3
 800d998:	9204      	str	r2, [sp, #16]
 800d99a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d99c:	4648      	mov	r0, r9
 800d99e:	441a      	add	r2, r3
 800d9a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9a2:	f000 fc2b 	bl	800e1fc <__i2b>
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	b166      	cbz	r6, 800d9c4 <_dtoa_r+0x754>
 800d9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	dd09      	ble.n	800d9c4 <_dtoa_r+0x754>
 800d9b0:	42b3      	cmp	r3, r6
 800d9b2:	bfa8      	it	ge
 800d9b4:	4633      	movge	r3, r6
 800d9b6:	9a04      	ldr	r2, [sp, #16]
 800d9b8:	1af6      	subs	r6, r6, r3
 800d9ba:	1ad2      	subs	r2, r2, r3
 800d9bc:	9204      	str	r2, [sp, #16]
 800d9be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9c6:	b30b      	cbz	r3, 800da0c <_dtoa_r+0x79c>
 800d9c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f000 80c6 	beq.w	800db5c <_dtoa_r+0x8ec>
 800d9d0:	2c00      	cmp	r4, #0
 800d9d2:	f000 80c0 	beq.w	800db56 <_dtoa_r+0x8e6>
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	4622      	mov	r2, r4
 800d9da:	4648      	mov	r0, r9
 800d9dc:	f000 fcc6 	bl	800e36c <__pow5mult>
 800d9e0:	9a03      	ldr	r2, [sp, #12]
 800d9e2:	4601      	mov	r1, r0
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	4648      	mov	r0, r9
 800d9e8:	f000 fc1e 	bl	800e228 <__multiply>
 800d9ec:	9903      	ldr	r1, [sp, #12]
 800d9ee:	4680      	mov	r8, r0
 800d9f0:	4648      	mov	r0, r9
 800d9f2:	f000 fb4f 	bl	800e094 <_Bfree>
 800d9f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9f8:	1b1b      	subs	r3, r3, r4
 800d9fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9fc:	f000 80b1 	beq.w	800db62 <_dtoa_r+0x8f2>
 800da00:	4641      	mov	r1, r8
 800da02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da04:	4648      	mov	r0, r9
 800da06:	f000 fcb1 	bl	800e36c <__pow5mult>
 800da0a:	9003      	str	r0, [sp, #12]
 800da0c:	2101      	movs	r1, #1
 800da0e:	4648      	mov	r0, r9
 800da10:	f000 fbf4 	bl	800e1fc <__i2b>
 800da14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da16:	4604      	mov	r4, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 81d8 	beq.w	800ddce <_dtoa_r+0xb5e>
 800da1e:	461a      	mov	r2, r3
 800da20:	4601      	mov	r1, r0
 800da22:	4648      	mov	r0, r9
 800da24:	f000 fca2 	bl	800e36c <__pow5mult>
 800da28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800da2a:	4604      	mov	r4, r0
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	f300 809f 	bgt.w	800db70 <_dtoa_r+0x900>
 800da32:	9b06      	ldr	r3, [sp, #24]
 800da34:	2b00      	cmp	r3, #0
 800da36:	f040 8097 	bne.w	800db68 <_dtoa_r+0x8f8>
 800da3a:	9b07      	ldr	r3, [sp, #28]
 800da3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da40:	2b00      	cmp	r3, #0
 800da42:	f040 8093 	bne.w	800db6c <_dtoa_r+0x8fc>
 800da46:	9b07      	ldr	r3, [sp, #28]
 800da48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da4c:	0d1b      	lsrs	r3, r3, #20
 800da4e:	051b      	lsls	r3, r3, #20
 800da50:	b133      	cbz	r3, 800da60 <_dtoa_r+0x7f0>
 800da52:	9b04      	ldr	r3, [sp, #16]
 800da54:	3301      	adds	r3, #1
 800da56:	9304      	str	r3, [sp, #16]
 800da58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da5a:	3301      	adds	r3, #1
 800da5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da5e:	2301      	movs	r3, #1
 800da60:	930a      	str	r3, [sp, #40]	@ 0x28
 800da62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 81b8 	beq.w	800ddda <_dtoa_r+0xb6a>
 800da6a:	6923      	ldr	r3, [r4, #16]
 800da6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da70:	6918      	ldr	r0, [r3, #16]
 800da72:	f000 fb77 	bl	800e164 <__hi0bits>
 800da76:	f1c0 0020 	rsb	r0, r0, #32
 800da7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da7c:	4418      	add	r0, r3
 800da7e:	f010 001f 	ands.w	r0, r0, #31
 800da82:	f000 8082 	beq.w	800db8a <_dtoa_r+0x91a>
 800da86:	f1c0 0320 	rsb	r3, r0, #32
 800da8a:	2b04      	cmp	r3, #4
 800da8c:	dd73      	ble.n	800db76 <_dtoa_r+0x906>
 800da8e:	9b04      	ldr	r3, [sp, #16]
 800da90:	f1c0 001c 	rsb	r0, r0, #28
 800da94:	4403      	add	r3, r0
 800da96:	9304      	str	r3, [sp, #16]
 800da98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da9a:	4406      	add	r6, r0
 800da9c:	4403      	add	r3, r0
 800da9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800daa0:	9b04      	ldr	r3, [sp, #16]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	dd05      	ble.n	800dab2 <_dtoa_r+0x842>
 800daa6:	461a      	mov	r2, r3
 800daa8:	4648      	mov	r0, r9
 800daaa:	9903      	ldr	r1, [sp, #12]
 800daac:	f000 fcb8 	bl	800e420 <__lshift>
 800dab0:	9003      	str	r0, [sp, #12]
 800dab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	dd05      	ble.n	800dac4 <_dtoa_r+0x854>
 800dab8:	4621      	mov	r1, r4
 800daba:	461a      	mov	r2, r3
 800dabc:	4648      	mov	r0, r9
 800dabe:	f000 fcaf 	bl	800e420 <__lshift>
 800dac2:	4604      	mov	r4, r0
 800dac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d061      	beq.n	800db8e <_dtoa_r+0x91e>
 800daca:	4621      	mov	r1, r4
 800dacc:	9803      	ldr	r0, [sp, #12]
 800dace:	f000 fd13 	bl	800e4f8 <__mcmp>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	da5b      	bge.n	800db8e <_dtoa_r+0x91e>
 800dad6:	2300      	movs	r3, #0
 800dad8:	220a      	movs	r2, #10
 800dada:	4648      	mov	r0, r9
 800dadc:	9903      	ldr	r1, [sp, #12]
 800dade:	f000 fafb 	bl	800e0d8 <__multadd>
 800dae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dae4:	f107 38ff 	add.w	r8, r7, #4294967295
 800dae8:	9003      	str	r0, [sp, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	f000 8177 	beq.w	800ddde <_dtoa_r+0xb6e>
 800daf0:	4629      	mov	r1, r5
 800daf2:	2300      	movs	r3, #0
 800daf4:	220a      	movs	r2, #10
 800daf6:	4648      	mov	r0, r9
 800daf8:	f000 faee 	bl	800e0d8 <__multadd>
 800dafc:	f1bb 0f00 	cmp.w	fp, #0
 800db00:	4605      	mov	r5, r0
 800db02:	dc6f      	bgt.n	800dbe4 <_dtoa_r+0x974>
 800db04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800db06:	2b02      	cmp	r3, #2
 800db08:	dc49      	bgt.n	800db9e <_dtoa_r+0x92e>
 800db0a:	e06b      	b.n	800dbe4 <_dtoa_r+0x974>
 800db0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800db0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800db12:	e73c      	b.n	800d98e <_dtoa_r+0x71e>
 800db14:	3fe00000 	.word	0x3fe00000
 800db18:	40240000 	.word	0x40240000
 800db1c:	9b08      	ldr	r3, [sp, #32]
 800db1e:	1e5c      	subs	r4, r3, #1
 800db20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db22:	42a3      	cmp	r3, r4
 800db24:	db09      	blt.n	800db3a <_dtoa_r+0x8ca>
 800db26:	1b1c      	subs	r4, r3, r4
 800db28:	9b08      	ldr	r3, [sp, #32]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f6bf af30 	bge.w	800d990 <_dtoa_r+0x720>
 800db30:	9b04      	ldr	r3, [sp, #16]
 800db32:	9a08      	ldr	r2, [sp, #32]
 800db34:	1a9e      	subs	r6, r3, r2
 800db36:	2300      	movs	r3, #0
 800db38:	e72b      	b.n	800d992 <_dtoa_r+0x722>
 800db3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db3e:	1ae3      	subs	r3, r4, r3
 800db40:	441a      	add	r2, r3
 800db42:	940a      	str	r4, [sp, #40]	@ 0x28
 800db44:	9e04      	ldr	r6, [sp, #16]
 800db46:	2400      	movs	r4, #0
 800db48:	9b08      	ldr	r3, [sp, #32]
 800db4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800db4c:	e721      	b.n	800d992 <_dtoa_r+0x722>
 800db4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db50:	9e04      	ldr	r6, [sp, #16]
 800db52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800db54:	e728      	b.n	800d9a8 <_dtoa_r+0x738>
 800db56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800db5a:	e751      	b.n	800da00 <_dtoa_r+0x790>
 800db5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db5e:	9903      	ldr	r1, [sp, #12]
 800db60:	e750      	b.n	800da04 <_dtoa_r+0x794>
 800db62:	f8cd 800c 	str.w	r8, [sp, #12]
 800db66:	e751      	b.n	800da0c <_dtoa_r+0x79c>
 800db68:	2300      	movs	r3, #0
 800db6a:	e779      	b.n	800da60 <_dtoa_r+0x7f0>
 800db6c:	9b06      	ldr	r3, [sp, #24]
 800db6e:	e777      	b.n	800da60 <_dtoa_r+0x7f0>
 800db70:	2300      	movs	r3, #0
 800db72:	930a      	str	r3, [sp, #40]	@ 0x28
 800db74:	e779      	b.n	800da6a <_dtoa_r+0x7fa>
 800db76:	d093      	beq.n	800daa0 <_dtoa_r+0x830>
 800db78:	9a04      	ldr	r2, [sp, #16]
 800db7a:	331c      	adds	r3, #28
 800db7c:	441a      	add	r2, r3
 800db7e:	9204      	str	r2, [sp, #16]
 800db80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db82:	441e      	add	r6, r3
 800db84:	441a      	add	r2, r3
 800db86:	9209      	str	r2, [sp, #36]	@ 0x24
 800db88:	e78a      	b.n	800daa0 <_dtoa_r+0x830>
 800db8a:	4603      	mov	r3, r0
 800db8c:	e7f4      	b.n	800db78 <_dtoa_r+0x908>
 800db8e:	9b08      	ldr	r3, [sp, #32]
 800db90:	46b8      	mov	r8, r7
 800db92:	2b00      	cmp	r3, #0
 800db94:	dc20      	bgt.n	800dbd8 <_dtoa_r+0x968>
 800db96:	469b      	mov	fp, r3
 800db98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	dd1e      	ble.n	800dbdc <_dtoa_r+0x96c>
 800db9e:	f1bb 0f00 	cmp.w	fp, #0
 800dba2:	f47f adb1 	bne.w	800d708 <_dtoa_r+0x498>
 800dba6:	4621      	mov	r1, r4
 800dba8:	465b      	mov	r3, fp
 800dbaa:	2205      	movs	r2, #5
 800dbac:	4648      	mov	r0, r9
 800dbae:	f000 fa93 	bl	800e0d8 <__multadd>
 800dbb2:	4601      	mov	r1, r0
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	9803      	ldr	r0, [sp, #12]
 800dbb8:	f000 fc9e 	bl	800e4f8 <__mcmp>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	f77f ada3 	ble.w	800d708 <_dtoa_r+0x498>
 800dbc2:	4656      	mov	r6, sl
 800dbc4:	2331      	movs	r3, #49	@ 0x31
 800dbc6:	f108 0801 	add.w	r8, r8, #1
 800dbca:	f806 3b01 	strb.w	r3, [r6], #1
 800dbce:	e59f      	b.n	800d710 <_dtoa_r+0x4a0>
 800dbd0:	46b8      	mov	r8, r7
 800dbd2:	9c08      	ldr	r4, [sp, #32]
 800dbd4:	4625      	mov	r5, r4
 800dbd6:	e7f4      	b.n	800dbc2 <_dtoa_r+0x952>
 800dbd8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800dbdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 8101 	beq.w	800dde6 <_dtoa_r+0xb76>
 800dbe4:	2e00      	cmp	r6, #0
 800dbe6:	dd05      	ble.n	800dbf4 <_dtoa_r+0x984>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	4632      	mov	r2, r6
 800dbec:	4648      	mov	r0, r9
 800dbee:	f000 fc17 	bl	800e420 <__lshift>
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d05c      	beq.n	800dcb4 <_dtoa_r+0xa44>
 800dbfa:	4648      	mov	r0, r9
 800dbfc:	6869      	ldr	r1, [r5, #4]
 800dbfe:	f000 fa09 	bl	800e014 <_Balloc>
 800dc02:	4606      	mov	r6, r0
 800dc04:	b928      	cbnz	r0, 800dc12 <_dtoa_r+0x9a2>
 800dc06:	4602      	mov	r2, r0
 800dc08:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dc0c:	4b80      	ldr	r3, [pc, #512]	@ (800de10 <_dtoa_r+0xba0>)
 800dc0e:	f7ff bb43 	b.w	800d298 <_dtoa_r+0x28>
 800dc12:	692a      	ldr	r2, [r5, #16]
 800dc14:	f105 010c 	add.w	r1, r5, #12
 800dc18:	3202      	adds	r2, #2
 800dc1a:	0092      	lsls	r2, r2, #2
 800dc1c:	300c      	adds	r0, #12
 800dc1e:	f7ff fa8e 	bl	800d13e <memcpy>
 800dc22:	2201      	movs	r2, #1
 800dc24:	4631      	mov	r1, r6
 800dc26:	4648      	mov	r0, r9
 800dc28:	f000 fbfa 	bl	800e420 <__lshift>
 800dc2c:	462f      	mov	r7, r5
 800dc2e:	4605      	mov	r5, r0
 800dc30:	f10a 0301 	add.w	r3, sl, #1
 800dc34:	9304      	str	r3, [sp, #16]
 800dc36:	eb0a 030b 	add.w	r3, sl, fp
 800dc3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc3c:	9b06      	ldr	r3, [sp, #24]
 800dc3e:	f003 0301 	and.w	r3, r3, #1
 800dc42:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	4621      	mov	r1, r4
 800dc48:	9803      	ldr	r0, [sp, #12]
 800dc4a:	f103 3bff 	add.w	fp, r3, #4294967295
 800dc4e:	f7ff fa84 	bl	800d15a <quorem>
 800dc52:	4603      	mov	r3, r0
 800dc54:	4639      	mov	r1, r7
 800dc56:	3330      	adds	r3, #48	@ 0x30
 800dc58:	9006      	str	r0, [sp, #24]
 800dc5a:	9803      	ldr	r0, [sp, #12]
 800dc5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc5e:	f000 fc4b 	bl	800e4f8 <__mcmp>
 800dc62:	462a      	mov	r2, r5
 800dc64:	9008      	str	r0, [sp, #32]
 800dc66:	4621      	mov	r1, r4
 800dc68:	4648      	mov	r0, r9
 800dc6a:	f000 fc61 	bl	800e530 <__mdiff>
 800dc6e:	68c2      	ldr	r2, [r0, #12]
 800dc70:	4606      	mov	r6, r0
 800dc72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc74:	bb02      	cbnz	r2, 800dcb8 <_dtoa_r+0xa48>
 800dc76:	4601      	mov	r1, r0
 800dc78:	9803      	ldr	r0, [sp, #12]
 800dc7a:	f000 fc3d 	bl	800e4f8 <__mcmp>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc82:	4631      	mov	r1, r6
 800dc84:	4648      	mov	r0, r9
 800dc86:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800dc8a:	f000 fa03 	bl	800e094 <_Bfree>
 800dc8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dc90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc92:	9e04      	ldr	r6, [sp, #16]
 800dc94:	ea42 0103 	orr.w	r1, r2, r3
 800dc98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc9a:	4319      	orrs	r1, r3
 800dc9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc9e:	d10d      	bne.n	800dcbc <_dtoa_r+0xa4c>
 800dca0:	2b39      	cmp	r3, #57	@ 0x39
 800dca2:	d027      	beq.n	800dcf4 <_dtoa_r+0xa84>
 800dca4:	9a08      	ldr	r2, [sp, #32]
 800dca6:	2a00      	cmp	r2, #0
 800dca8:	dd01      	ble.n	800dcae <_dtoa_r+0xa3e>
 800dcaa:	9b06      	ldr	r3, [sp, #24]
 800dcac:	3331      	adds	r3, #49	@ 0x31
 800dcae:	f88b 3000 	strb.w	r3, [fp]
 800dcb2:	e52e      	b.n	800d712 <_dtoa_r+0x4a2>
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	e7b9      	b.n	800dc2c <_dtoa_r+0x9bc>
 800dcb8:	2201      	movs	r2, #1
 800dcba:	e7e2      	b.n	800dc82 <_dtoa_r+0xa12>
 800dcbc:	9908      	ldr	r1, [sp, #32]
 800dcbe:	2900      	cmp	r1, #0
 800dcc0:	db04      	blt.n	800dccc <_dtoa_r+0xa5c>
 800dcc2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800dcc4:	4301      	orrs	r1, r0
 800dcc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcc8:	4301      	orrs	r1, r0
 800dcca:	d120      	bne.n	800dd0e <_dtoa_r+0xa9e>
 800dccc:	2a00      	cmp	r2, #0
 800dcce:	ddee      	ble.n	800dcae <_dtoa_r+0xa3e>
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	9903      	ldr	r1, [sp, #12]
 800dcd4:	4648      	mov	r0, r9
 800dcd6:	9304      	str	r3, [sp, #16]
 800dcd8:	f000 fba2 	bl	800e420 <__lshift>
 800dcdc:	4621      	mov	r1, r4
 800dcde:	9003      	str	r0, [sp, #12]
 800dce0:	f000 fc0a 	bl	800e4f8 <__mcmp>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	9b04      	ldr	r3, [sp, #16]
 800dce8:	dc02      	bgt.n	800dcf0 <_dtoa_r+0xa80>
 800dcea:	d1e0      	bne.n	800dcae <_dtoa_r+0xa3e>
 800dcec:	07da      	lsls	r2, r3, #31
 800dcee:	d5de      	bpl.n	800dcae <_dtoa_r+0xa3e>
 800dcf0:	2b39      	cmp	r3, #57	@ 0x39
 800dcf2:	d1da      	bne.n	800dcaa <_dtoa_r+0xa3a>
 800dcf4:	2339      	movs	r3, #57	@ 0x39
 800dcf6:	f88b 3000 	strb.w	r3, [fp]
 800dcfa:	4633      	mov	r3, r6
 800dcfc:	461e      	mov	r6, r3
 800dcfe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	2a39      	cmp	r2, #57	@ 0x39
 800dd06:	d04e      	beq.n	800dda6 <_dtoa_r+0xb36>
 800dd08:	3201      	adds	r2, #1
 800dd0a:	701a      	strb	r2, [r3, #0]
 800dd0c:	e501      	b.n	800d712 <_dtoa_r+0x4a2>
 800dd0e:	2a00      	cmp	r2, #0
 800dd10:	dd03      	ble.n	800dd1a <_dtoa_r+0xaaa>
 800dd12:	2b39      	cmp	r3, #57	@ 0x39
 800dd14:	d0ee      	beq.n	800dcf4 <_dtoa_r+0xa84>
 800dd16:	3301      	adds	r3, #1
 800dd18:	e7c9      	b.n	800dcae <_dtoa_r+0xa3e>
 800dd1a:	9a04      	ldr	r2, [sp, #16]
 800dd1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd22:	428a      	cmp	r2, r1
 800dd24:	d028      	beq.n	800dd78 <_dtoa_r+0xb08>
 800dd26:	2300      	movs	r3, #0
 800dd28:	220a      	movs	r2, #10
 800dd2a:	9903      	ldr	r1, [sp, #12]
 800dd2c:	4648      	mov	r0, r9
 800dd2e:	f000 f9d3 	bl	800e0d8 <__multadd>
 800dd32:	42af      	cmp	r7, r5
 800dd34:	9003      	str	r0, [sp, #12]
 800dd36:	f04f 0300 	mov.w	r3, #0
 800dd3a:	f04f 020a 	mov.w	r2, #10
 800dd3e:	4639      	mov	r1, r7
 800dd40:	4648      	mov	r0, r9
 800dd42:	d107      	bne.n	800dd54 <_dtoa_r+0xae4>
 800dd44:	f000 f9c8 	bl	800e0d8 <__multadd>
 800dd48:	4607      	mov	r7, r0
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	9b04      	ldr	r3, [sp, #16]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	9304      	str	r3, [sp, #16]
 800dd52:	e777      	b.n	800dc44 <_dtoa_r+0x9d4>
 800dd54:	f000 f9c0 	bl	800e0d8 <__multadd>
 800dd58:	4629      	mov	r1, r5
 800dd5a:	4607      	mov	r7, r0
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	220a      	movs	r2, #10
 800dd60:	4648      	mov	r0, r9
 800dd62:	f000 f9b9 	bl	800e0d8 <__multadd>
 800dd66:	4605      	mov	r5, r0
 800dd68:	e7f0      	b.n	800dd4c <_dtoa_r+0xadc>
 800dd6a:	f1bb 0f00 	cmp.w	fp, #0
 800dd6e:	bfcc      	ite	gt
 800dd70:	465e      	movgt	r6, fp
 800dd72:	2601      	movle	r6, #1
 800dd74:	2700      	movs	r7, #0
 800dd76:	4456      	add	r6, sl
 800dd78:	2201      	movs	r2, #1
 800dd7a:	9903      	ldr	r1, [sp, #12]
 800dd7c:	4648      	mov	r0, r9
 800dd7e:	9304      	str	r3, [sp, #16]
 800dd80:	f000 fb4e 	bl	800e420 <__lshift>
 800dd84:	4621      	mov	r1, r4
 800dd86:	9003      	str	r0, [sp, #12]
 800dd88:	f000 fbb6 	bl	800e4f8 <__mcmp>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	dcb4      	bgt.n	800dcfa <_dtoa_r+0xa8a>
 800dd90:	d102      	bne.n	800dd98 <_dtoa_r+0xb28>
 800dd92:	9b04      	ldr	r3, [sp, #16]
 800dd94:	07db      	lsls	r3, r3, #31
 800dd96:	d4b0      	bmi.n	800dcfa <_dtoa_r+0xa8a>
 800dd98:	4633      	mov	r3, r6
 800dd9a:	461e      	mov	r6, r3
 800dd9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dda0:	2a30      	cmp	r2, #48	@ 0x30
 800dda2:	d0fa      	beq.n	800dd9a <_dtoa_r+0xb2a>
 800dda4:	e4b5      	b.n	800d712 <_dtoa_r+0x4a2>
 800dda6:	459a      	cmp	sl, r3
 800dda8:	d1a8      	bne.n	800dcfc <_dtoa_r+0xa8c>
 800ddaa:	2331      	movs	r3, #49	@ 0x31
 800ddac:	f108 0801 	add.w	r8, r8, #1
 800ddb0:	f88a 3000 	strb.w	r3, [sl]
 800ddb4:	e4ad      	b.n	800d712 <_dtoa_r+0x4a2>
 800ddb6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ddb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800de14 <_dtoa_r+0xba4>
 800ddbc:	b11b      	cbz	r3, 800ddc6 <_dtoa_r+0xb56>
 800ddbe:	f10a 0308 	add.w	r3, sl, #8
 800ddc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	b017      	add	sp, #92	@ 0x5c
 800ddca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	f77f ae2e 	ble.w	800da32 <_dtoa_r+0x7c2>
 800ddd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddda:	2001      	movs	r0, #1
 800dddc:	e64d      	b.n	800da7a <_dtoa_r+0x80a>
 800ddde:	f1bb 0f00 	cmp.w	fp, #0
 800dde2:	f77f aed9 	ble.w	800db98 <_dtoa_r+0x928>
 800dde6:	4656      	mov	r6, sl
 800dde8:	4621      	mov	r1, r4
 800ddea:	9803      	ldr	r0, [sp, #12]
 800ddec:	f7ff f9b5 	bl	800d15a <quorem>
 800ddf0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ddf4:	f806 3b01 	strb.w	r3, [r6], #1
 800ddf8:	eba6 020a 	sub.w	r2, r6, sl
 800ddfc:	4593      	cmp	fp, r2
 800ddfe:	ddb4      	ble.n	800dd6a <_dtoa_r+0xafa>
 800de00:	2300      	movs	r3, #0
 800de02:	220a      	movs	r2, #10
 800de04:	4648      	mov	r0, r9
 800de06:	9903      	ldr	r1, [sp, #12]
 800de08:	f000 f966 	bl	800e0d8 <__multadd>
 800de0c:	9003      	str	r0, [sp, #12]
 800de0e:	e7eb      	b.n	800dde8 <_dtoa_r+0xb78>
 800de10:	0800f744 	.word	0x0800f744
 800de14:	0800f6c8 	.word	0x0800f6c8

0800de18 <_free_r>:
 800de18:	b538      	push	{r3, r4, r5, lr}
 800de1a:	4605      	mov	r5, r0
 800de1c:	2900      	cmp	r1, #0
 800de1e:	d040      	beq.n	800dea2 <_free_r+0x8a>
 800de20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de24:	1f0c      	subs	r4, r1, #4
 800de26:	2b00      	cmp	r3, #0
 800de28:	bfb8      	it	lt
 800de2a:	18e4      	addlt	r4, r4, r3
 800de2c:	f000 f8e6 	bl	800dffc <__malloc_lock>
 800de30:	4a1c      	ldr	r2, [pc, #112]	@ (800dea4 <_free_r+0x8c>)
 800de32:	6813      	ldr	r3, [r2, #0]
 800de34:	b933      	cbnz	r3, 800de44 <_free_r+0x2c>
 800de36:	6063      	str	r3, [r4, #4]
 800de38:	6014      	str	r4, [r2, #0]
 800de3a:	4628      	mov	r0, r5
 800de3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de40:	f000 b8e2 	b.w	800e008 <__malloc_unlock>
 800de44:	42a3      	cmp	r3, r4
 800de46:	d908      	bls.n	800de5a <_free_r+0x42>
 800de48:	6820      	ldr	r0, [r4, #0]
 800de4a:	1821      	adds	r1, r4, r0
 800de4c:	428b      	cmp	r3, r1
 800de4e:	bf01      	itttt	eq
 800de50:	6819      	ldreq	r1, [r3, #0]
 800de52:	685b      	ldreq	r3, [r3, #4]
 800de54:	1809      	addeq	r1, r1, r0
 800de56:	6021      	streq	r1, [r4, #0]
 800de58:	e7ed      	b.n	800de36 <_free_r+0x1e>
 800de5a:	461a      	mov	r2, r3
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	b10b      	cbz	r3, 800de64 <_free_r+0x4c>
 800de60:	42a3      	cmp	r3, r4
 800de62:	d9fa      	bls.n	800de5a <_free_r+0x42>
 800de64:	6811      	ldr	r1, [r2, #0]
 800de66:	1850      	adds	r0, r2, r1
 800de68:	42a0      	cmp	r0, r4
 800de6a:	d10b      	bne.n	800de84 <_free_r+0x6c>
 800de6c:	6820      	ldr	r0, [r4, #0]
 800de6e:	4401      	add	r1, r0
 800de70:	1850      	adds	r0, r2, r1
 800de72:	4283      	cmp	r3, r0
 800de74:	6011      	str	r1, [r2, #0]
 800de76:	d1e0      	bne.n	800de3a <_free_r+0x22>
 800de78:	6818      	ldr	r0, [r3, #0]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	4408      	add	r0, r1
 800de7e:	6010      	str	r0, [r2, #0]
 800de80:	6053      	str	r3, [r2, #4]
 800de82:	e7da      	b.n	800de3a <_free_r+0x22>
 800de84:	d902      	bls.n	800de8c <_free_r+0x74>
 800de86:	230c      	movs	r3, #12
 800de88:	602b      	str	r3, [r5, #0]
 800de8a:	e7d6      	b.n	800de3a <_free_r+0x22>
 800de8c:	6820      	ldr	r0, [r4, #0]
 800de8e:	1821      	adds	r1, r4, r0
 800de90:	428b      	cmp	r3, r1
 800de92:	bf01      	itttt	eq
 800de94:	6819      	ldreq	r1, [r3, #0]
 800de96:	685b      	ldreq	r3, [r3, #4]
 800de98:	1809      	addeq	r1, r1, r0
 800de9a:	6021      	streq	r1, [r4, #0]
 800de9c:	6063      	str	r3, [r4, #4]
 800de9e:	6054      	str	r4, [r2, #4]
 800dea0:	e7cb      	b.n	800de3a <_free_r+0x22>
 800dea2:	bd38      	pop	{r3, r4, r5, pc}
 800dea4:	20004ce4 	.word	0x20004ce4

0800dea8 <malloc>:
 800dea8:	4b02      	ldr	r3, [pc, #8]	@ (800deb4 <malloc+0xc>)
 800deaa:	4601      	mov	r1, r0
 800deac:	6818      	ldr	r0, [r3, #0]
 800deae:	f000 b825 	b.w	800defc <_malloc_r>
 800deb2:	bf00      	nop
 800deb4:	20000034 	.word	0x20000034

0800deb8 <sbrk_aligned>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	4e0f      	ldr	r6, [pc, #60]	@ (800def8 <sbrk_aligned+0x40>)
 800debc:	460c      	mov	r4, r1
 800debe:	6831      	ldr	r1, [r6, #0]
 800dec0:	4605      	mov	r5, r0
 800dec2:	b911      	cbnz	r1, 800deca <sbrk_aligned+0x12>
 800dec4:	f000 fe3a 	bl	800eb3c <_sbrk_r>
 800dec8:	6030      	str	r0, [r6, #0]
 800deca:	4621      	mov	r1, r4
 800decc:	4628      	mov	r0, r5
 800dece:	f000 fe35 	bl	800eb3c <_sbrk_r>
 800ded2:	1c43      	adds	r3, r0, #1
 800ded4:	d103      	bne.n	800dede <sbrk_aligned+0x26>
 800ded6:	f04f 34ff 	mov.w	r4, #4294967295
 800deda:	4620      	mov	r0, r4
 800dedc:	bd70      	pop	{r4, r5, r6, pc}
 800dede:	1cc4      	adds	r4, r0, #3
 800dee0:	f024 0403 	bic.w	r4, r4, #3
 800dee4:	42a0      	cmp	r0, r4
 800dee6:	d0f8      	beq.n	800deda <sbrk_aligned+0x22>
 800dee8:	1a21      	subs	r1, r4, r0
 800deea:	4628      	mov	r0, r5
 800deec:	f000 fe26 	bl	800eb3c <_sbrk_r>
 800def0:	3001      	adds	r0, #1
 800def2:	d1f2      	bne.n	800deda <sbrk_aligned+0x22>
 800def4:	e7ef      	b.n	800ded6 <sbrk_aligned+0x1e>
 800def6:	bf00      	nop
 800def8:	20004ce0 	.word	0x20004ce0

0800defc <_malloc_r>:
 800defc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df00:	1ccd      	adds	r5, r1, #3
 800df02:	f025 0503 	bic.w	r5, r5, #3
 800df06:	3508      	adds	r5, #8
 800df08:	2d0c      	cmp	r5, #12
 800df0a:	bf38      	it	cc
 800df0c:	250c      	movcc	r5, #12
 800df0e:	2d00      	cmp	r5, #0
 800df10:	4606      	mov	r6, r0
 800df12:	db01      	blt.n	800df18 <_malloc_r+0x1c>
 800df14:	42a9      	cmp	r1, r5
 800df16:	d904      	bls.n	800df22 <_malloc_r+0x26>
 800df18:	230c      	movs	r3, #12
 800df1a:	6033      	str	r3, [r6, #0]
 800df1c:	2000      	movs	r0, #0
 800df1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dff8 <_malloc_r+0xfc>
 800df26:	f000 f869 	bl	800dffc <__malloc_lock>
 800df2a:	f8d8 3000 	ldr.w	r3, [r8]
 800df2e:	461c      	mov	r4, r3
 800df30:	bb44      	cbnz	r4, 800df84 <_malloc_r+0x88>
 800df32:	4629      	mov	r1, r5
 800df34:	4630      	mov	r0, r6
 800df36:	f7ff ffbf 	bl	800deb8 <sbrk_aligned>
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	4604      	mov	r4, r0
 800df3e:	d158      	bne.n	800dff2 <_malloc_r+0xf6>
 800df40:	f8d8 4000 	ldr.w	r4, [r8]
 800df44:	4627      	mov	r7, r4
 800df46:	2f00      	cmp	r7, #0
 800df48:	d143      	bne.n	800dfd2 <_malloc_r+0xd6>
 800df4a:	2c00      	cmp	r4, #0
 800df4c:	d04b      	beq.n	800dfe6 <_malloc_r+0xea>
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	4639      	mov	r1, r7
 800df52:	4630      	mov	r0, r6
 800df54:	eb04 0903 	add.w	r9, r4, r3
 800df58:	f000 fdf0 	bl	800eb3c <_sbrk_r>
 800df5c:	4581      	cmp	r9, r0
 800df5e:	d142      	bne.n	800dfe6 <_malloc_r+0xea>
 800df60:	6821      	ldr	r1, [r4, #0]
 800df62:	4630      	mov	r0, r6
 800df64:	1a6d      	subs	r5, r5, r1
 800df66:	4629      	mov	r1, r5
 800df68:	f7ff ffa6 	bl	800deb8 <sbrk_aligned>
 800df6c:	3001      	adds	r0, #1
 800df6e:	d03a      	beq.n	800dfe6 <_malloc_r+0xea>
 800df70:	6823      	ldr	r3, [r4, #0]
 800df72:	442b      	add	r3, r5
 800df74:	6023      	str	r3, [r4, #0]
 800df76:	f8d8 3000 	ldr.w	r3, [r8]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	bb62      	cbnz	r2, 800dfd8 <_malloc_r+0xdc>
 800df7e:	f8c8 7000 	str.w	r7, [r8]
 800df82:	e00f      	b.n	800dfa4 <_malloc_r+0xa8>
 800df84:	6822      	ldr	r2, [r4, #0]
 800df86:	1b52      	subs	r2, r2, r5
 800df88:	d420      	bmi.n	800dfcc <_malloc_r+0xd0>
 800df8a:	2a0b      	cmp	r2, #11
 800df8c:	d917      	bls.n	800dfbe <_malloc_r+0xc2>
 800df8e:	1961      	adds	r1, r4, r5
 800df90:	42a3      	cmp	r3, r4
 800df92:	6025      	str	r5, [r4, #0]
 800df94:	bf18      	it	ne
 800df96:	6059      	strne	r1, [r3, #4]
 800df98:	6863      	ldr	r3, [r4, #4]
 800df9a:	bf08      	it	eq
 800df9c:	f8c8 1000 	streq.w	r1, [r8]
 800dfa0:	5162      	str	r2, [r4, r5]
 800dfa2:	604b      	str	r3, [r1, #4]
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	f000 f82f 	bl	800e008 <__malloc_unlock>
 800dfaa:	f104 000b 	add.w	r0, r4, #11
 800dfae:	1d23      	adds	r3, r4, #4
 800dfb0:	f020 0007 	bic.w	r0, r0, #7
 800dfb4:	1ac2      	subs	r2, r0, r3
 800dfb6:	bf1c      	itt	ne
 800dfb8:	1a1b      	subne	r3, r3, r0
 800dfba:	50a3      	strne	r3, [r4, r2]
 800dfbc:	e7af      	b.n	800df1e <_malloc_r+0x22>
 800dfbe:	6862      	ldr	r2, [r4, #4]
 800dfc0:	42a3      	cmp	r3, r4
 800dfc2:	bf0c      	ite	eq
 800dfc4:	f8c8 2000 	streq.w	r2, [r8]
 800dfc8:	605a      	strne	r2, [r3, #4]
 800dfca:	e7eb      	b.n	800dfa4 <_malloc_r+0xa8>
 800dfcc:	4623      	mov	r3, r4
 800dfce:	6864      	ldr	r4, [r4, #4]
 800dfd0:	e7ae      	b.n	800df30 <_malloc_r+0x34>
 800dfd2:	463c      	mov	r4, r7
 800dfd4:	687f      	ldr	r7, [r7, #4]
 800dfd6:	e7b6      	b.n	800df46 <_malloc_r+0x4a>
 800dfd8:	461a      	mov	r2, r3
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	42a3      	cmp	r3, r4
 800dfde:	d1fb      	bne.n	800dfd8 <_malloc_r+0xdc>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	6053      	str	r3, [r2, #4]
 800dfe4:	e7de      	b.n	800dfa4 <_malloc_r+0xa8>
 800dfe6:	230c      	movs	r3, #12
 800dfe8:	4630      	mov	r0, r6
 800dfea:	6033      	str	r3, [r6, #0]
 800dfec:	f000 f80c 	bl	800e008 <__malloc_unlock>
 800dff0:	e794      	b.n	800df1c <_malloc_r+0x20>
 800dff2:	6005      	str	r5, [r0, #0]
 800dff4:	e7d6      	b.n	800dfa4 <_malloc_r+0xa8>
 800dff6:	bf00      	nop
 800dff8:	20004ce4 	.word	0x20004ce4

0800dffc <__malloc_lock>:
 800dffc:	4801      	ldr	r0, [pc, #4]	@ (800e004 <__malloc_lock+0x8>)
 800dffe:	f7ff b88e 	b.w	800d11e <__retarget_lock_acquire_recursive>
 800e002:	bf00      	nop
 800e004:	20004cdc 	.word	0x20004cdc

0800e008 <__malloc_unlock>:
 800e008:	4801      	ldr	r0, [pc, #4]	@ (800e010 <__malloc_unlock+0x8>)
 800e00a:	f7ff b889 	b.w	800d120 <__retarget_lock_release_recursive>
 800e00e:	bf00      	nop
 800e010:	20004cdc 	.word	0x20004cdc

0800e014 <_Balloc>:
 800e014:	b570      	push	{r4, r5, r6, lr}
 800e016:	69c6      	ldr	r6, [r0, #28]
 800e018:	4604      	mov	r4, r0
 800e01a:	460d      	mov	r5, r1
 800e01c:	b976      	cbnz	r6, 800e03c <_Balloc+0x28>
 800e01e:	2010      	movs	r0, #16
 800e020:	f7ff ff42 	bl	800dea8 <malloc>
 800e024:	4602      	mov	r2, r0
 800e026:	61e0      	str	r0, [r4, #28]
 800e028:	b920      	cbnz	r0, 800e034 <_Balloc+0x20>
 800e02a:	216b      	movs	r1, #107	@ 0x6b
 800e02c:	4b17      	ldr	r3, [pc, #92]	@ (800e08c <_Balloc+0x78>)
 800e02e:	4818      	ldr	r0, [pc, #96]	@ (800e090 <_Balloc+0x7c>)
 800e030:	f000 fd94 	bl	800eb5c <__assert_func>
 800e034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e038:	6006      	str	r6, [r0, #0]
 800e03a:	60c6      	str	r6, [r0, #12]
 800e03c:	69e6      	ldr	r6, [r4, #28]
 800e03e:	68f3      	ldr	r3, [r6, #12]
 800e040:	b183      	cbz	r3, 800e064 <_Balloc+0x50>
 800e042:	69e3      	ldr	r3, [r4, #28]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e04a:	b9b8      	cbnz	r0, 800e07c <_Balloc+0x68>
 800e04c:	2101      	movs	r1, #1
 800e04e:	fa01 f605 	lsl.w	r6, r1, r5
 800e052:	1d72      	adds	r2, r6, #5
 800e054:	4620      	mov	r0, r4
 800e056:	0092      	lsls	r2, r2, #2
 800e058:	f000 fd9e 	bl	800eb98 <_calloc_r>
 800e05c:	b160      	cbz	r0, 800e078 <_Balloc+0x64>
 800e05e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e062:	e00e      	b.n	800e082 <_Balloc+0x6e>
 800e064:	2221      	movs	r2, #33	@ 0x21
 800e066:	2104      	movs	r1, #4
 800e068:	4620      	mov	r0, r4
 800e06a:	f000 fd95 	bl	800eb98 <_calloc_r>
 800e06e:	69e3      	ldr	r3, [r4, #28]
 800e070:	60f0      	str	r0, [r6, #12]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1e4      	bne.n	800e042 <_Balloc+0x2e>
 800e078:	2000      	movs	r0, #0
 800e07a:	bd70      	pop	{r4, r5, r6, pc}
 800e07c:	6802      	ldr	r2, [r0, #0]
 800e07e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e082:	2300      	movs	r3, #0
 800e084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e088:	e7f7      	b.n	800e07a <_Balloc+0x66>
 800e08a:	bf00      	nop
 800e08c:	0800f6d5 	.word	0x0800f6d5
 800e090:	0800f755 	.word	0x0800f755

0800e094 <_Bfree>:
 800e094:	b570      	push	{r4, r5, r6, lr}
 800e096:	69c6      	ldr	r6, [r0, #28]
 800e098:	4605      	mov	r5, r0
 800e09a:	460c      	mov	r4, r1
 800e09c:	b976      	cbnz	r6, 800e0bc <_Bfree+0x28>
 800e09e:	2010      	movs	r0, #16
 800e0a0:	f7ff ff02 	bl	800dea8 <malloc>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	61e8      	str	r0, [r5, #28]
 800e0a8:	b920      	cbnz	r0, 800e0b4 <_Bfree+0x20>
 800e0aa:	218f      	movs	r1, #143	@ 0x8f
 800e0ac:	4b08      	ldr	r3, [pc, #32]	@ (800e0d0 <_Bfree+0x3c>)
 800e0ae:	4809      	ldr	r0, [pc, #36]	@ (800e0d4 <_Bfree+0x40>)
 800e0b0:	f000 fd54 	bl	800eb5c <__assert_func>
 800e0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0b8:	6006      	str	r6, [r0, #0]
 800e0ba:	60c6      	str	r6, [r0, #12]
 800e0bc:	b13c      	cbz	r4, 800e0ce <_Bfree+0x3a>
 800e0be:	69eb      	ldr	r3, [r5, #28]
 800e0c0:	6862      	ldr	r2, [r4, #4]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0c8:	6021      	str	r1, [r4, #0]
 800e0ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0ce:	bd70      	pop	{r4, r5, r6, pc}
 800e0d0:	0800f6d5 	.word	0x0800f6d5
 800e0d4:	0800f755 	.word	0x0800f755

0800e0d8 <__multadd>:
 800e0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0dc:	4607      	mov	r7, r0
 800e0de:	460c      	mov	r4, r1
 800e0e0:	461e      	mov	r6, r3
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	690d      	ldr	r5, [r1, #16]
 800e0e6:	f101 0c14 	add.w	ip, r1, #20
 800e0ea:	f8dc 3000 	ldr.w	r3, [ip]
 800e0ee:	3001      	adds	r0, #1
 800e0f0:	b299      	uxth	r1, r3
 800e0f2:	fb02 6101 	mla	r1, r2, r1, r6
 800e0f6:	0c1e      	lsrs	r6, r3, #16
 800e0f8:	0c0b      	lsrs	r3, r1, #16
 800e0fa:	fb02 3306 	mla	r3, r2, r6, r3
 800e0fe:	b289      	uxth	r1, r1
 800e100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e104:	4285      	cmp	r5, r0
 800e106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e10a:	f84c 1b04 	str.w	r1, [ip], #4
 800e10e:	dcec      	bgt.n	800e0ea <__multadd+0x12>
 800e110:	b30e      	cbz	r6, 800e156 <__multadd+0x7e>
 800e112:	68a3      	ldr	r3, [r4, #8]
 800e114:	42ab      	cmp	r3, r5
 800e116:	dc19      	bgt.n	800e14c <__multadd+0x74>
 800e118:	6861      	ldr	r1, [r4, #4]
 800e11a:	4638      	mov	r0, r7
 800e11c:	3101      	adds	r1, #1
 800e11e:	f7ff ff79 	bl	800e014 <_Balloc>
 800e122:	4680      	mov	r8, r0
 800e124:	b928      	cbnz	r0, 800e132 <__multadd+0x5a>
 800e126:	4602      	mov	r2, r0
 800e128:	21ba      	movs	r1, #186	@ 0xba
 800e12a:	4b0c      	ldr	r3, [pc, #48]	@ (800e15c <__multadd+0x84>)
 800e12c:	480c      	ldr	r0, [pc, #48]	@ (800e160 <__multadd+0x88>)
 800e12e:	f000 fd15 	bl	800eb5c <__assert_func>
 800e132:	6922      	ldr	r2, [r4, #16]
 800e134:	f104 010c 	add.w	r1, r4, #12
 800e138:	3202      	adds	r2, #2
 800e13a:	0092      	lsls	r2, r2, #2
 800e13c:	300c      	adds	r0, #12
 800e13e:	f7fe fffe 	bl	800d13e <memcpy>
 800e142:	4621      	mov	r1, r4
 800e144:	4638      	mov	r0, r7
 800e146:	f7ff ffa5 	bl	800e094 <_Bfree>
 800e14a:	4644      	mov	r4, r8
 800e14c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e150:	3501      	adds	r5, #1
 800e152:	615e      	str	r6, [r3, #20]
 800e154:	6125      	str	r5, [r4, #16]
 800e156:	4620      	mov	r0, r4
 800e158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15c:	0800f744 	.word	0x0800f744
 800e160:	0800f755 	.word	0x0800f755

0800e164 <__hi0bits>:
 800e164:	4603      	mov	r3, r0
 800e166:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e16a:	bf3a      	itte	cc
 800e16c:	0403      	lslcc	r3, r0, #16
 800e16e:	2010      	movcc	r0, #16
 800e170:	2000      	movcs	r0, #0
 800e172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e176:	bf3c      	itt	cc
 800e178:	021b      	lslcc	r3, r3, #8
 800e17a:	3008      	addcc	r0, #8
 800e17c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e180:	bf3c      	itt	cc
 800e182:	011b      	lslcc	r3, r3, #4
 800e184:	3004      	addcc	r0, #4
 800e186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e18a:	bf3c      	itt	cc
 800e18c:	009b      	lslcc	r3, r3, #2
 800e18e:	3002      	addcc	r0, #2
 800e190:	2b00      	cmp	r3, #0
 800e192:	db05      	blt.n	800e1a0 <__hi0bits+0x3c>
 800e194:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e198:	f100 0001 	add.w	r0, r0, #1
 800e19c:	bf08      	it	eq
 800e19e:	2020      	moveq	r0, #32
 800e1a0:	4770      	bx	lr

0800e1a2 <__lo0bits>:
 800e1a2:	6803      	ldr	r3, [r0, #0]
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	f013 0007 	ands.w	r0, r3, #7
 800e1aa:	d00b      	beq.n	800e1c4 <__lo0bits+0x22>
 800e1ac:	07d9      	lsls	r1, r3, #31
 800e1ae:	d421      	bmi.n	800e1f4 <__lo0bits+0x52>
 800e1b0:	0798      	lsls	r0, r3, #30
 800e1b2:	bf49      	itett	mi
 800e1b4:	085b      	lsrmi	r3, r3, #1
 800e1b6:	089b      	lsrpl	r3, r3, #2
 800e1b8:	2001      	movmi	r0, #1
 800e1ba:	6013      	strmi	r3, [r2, #0]
 800e1bc:	bf5c      	itt	pl
 800e1be:	2002      	movpl	r0, #2
 800e1c0:	6013      	strpl	r3, [r2, #0]
 800e1c2:	4770      	bx	lr
 800e1c4:	b299      	uxth	r1, r3
 800e1c6:	b909      	cbnz	r1, 800e1cc <__lo0bits+0x2a>
 800e1c8:	2010      	movs	r0, #16
 800e1ca:	0c1b      	lsrs	r3, r3, #16
 800e1cc:	b2d9      	uxtb	r1, r3
 800e1ce:	b909      	cbnz	r1, 800e1d4 <__lo0bits+0x32>
 800e1d0:	3008      	adds	r0, #8
 800e1d2:	0a1b      	lsrs	r3, r3, #8
 800e1d4:	0719      	lsls	r1, r3, #28
 800e1d6:	bf04      	itt	eq
 800e1d8:	091b      	lsreq	r3, r3, #4
 800e1da:	3004      	addeq	r0, #4
 800e1dc:	0799      	lsls	r1, r3, #30
 800e1de:	bf04      	itt	eq
 800e1e0:	089b      	lsreq	r3, r3, #2
 800e1e2:	3002      	addeq	r0, #2
 800e1e4:	07d9      	lsls	r1, r3, #31
 800e1e6:	d403      	bmi.n	800e1f0 <__lo0bits+0x4e>
 800e1e8:	085b      	lsrs	r3, r3, #1
 800e1ea:	f100 0001 	add.w	r0, r0, #1
 800e1ee:	d003      	beq.n	800e1f8 <__lo0bits+0x56>
 800e1f0:	6013      	str	r3, [r2, #0]
 800e1f2:	4770      	bx	lr
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	4770      	bx	lr
 800e1f8:	2020      	movs	r0, #32
 800e1fa:	4770      	bx	lr

0800e1fc <__i2b>:
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	460c      	mov	r4, r1
 800e200:	2101      	movs	r1, #1
 800e202:	f7ff ff07 	bl	800e014 <_Balloc>
 800e206:	4602      	mov	r2, r0
 800e208:	b928      	cbnz	r0, 800e216 <__i2b+0x1a>
 800e20a:	f240 1145 	movw	r1, #325	@ 0x145
 800e20e:	4b04      	ldr	r3, [pc, #16]	@ (800e220 <__i2b+0x24>)
 800e210:	4804      	ldr	r0, [pc, #16]	@ (800e224 <__i2b+0x28>)
 800e212:	f000 fca3 	bl	800eb5c <__assert_func>
 800e216:	2301      	movs	r3, #1
 800e218:	6144      	str	r4, [r0, #20]
 800e21a:	6103      	str	r3, [r0, #16]
 800e21c:	bd10      	pop	{r4, pc}
 800e21e:	bf00      	nop
 800e220:	0800f744 	.word	0x0800f744
 800e224:	0800f755 	.word	0x0800f755

0800e228 <__multiply>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	4617      	mov	r7, r2
 800e22e:	690a      	ldr	r2, [r1, #16]
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	4689      	mov	r9, r1
 800e234:	429a      	cmp	r2, r3
 800e236:	bfa2      	ittt	ge
 800e238:	463b      	movge	r3, r7
 800e23a:	460f      	movge	r7, r1
 800e23c:	4699      	movge	r9, r3
 800e23e:	693d      	ldr	r5, [r7, #16]
 800e240:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	eb05 060a 	add.w	r6, r5, sl
 800e24c:	42b3      	cmp	r3, r6
 800e24e:	b085      	sub	sp, #20
 800e250:	bfb8      	it	lt
 800e252:	3101      	addlt	r1, #1
 800e254:	f7ff fede 	bl	800e014 <_Balloc>
 800e258:	b930      	cbnz	r0, 800e268 <__multiply+0x40>
 800e25a:	4602      	mov	r2, r0
 800e25c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e260:	4b40      	ldr	r3, [pc, #256]	@ (800e364 <__multiply+0x13c>)
 800e262:	4841      	ldr	r0, [pc, #260]	@ (800e368 <__multiply+0x140>)
 800e264:	f000 fc7a 	bl	800eb5c <__assert_func>
 800e268:	f100 0414 	add.w	r4, r0, #20
 800e26c:	4623      	mov	r3, r4
 800e26e:	2200      	movs	r2, #0
 800e270:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e274:	4573      	cmp	r3, lr
 800e276:	d320      	bcc.n	800e2ba <__multiply+0x92>
 800e278:	f107 0814 	add.w	r8, r7, #20
 800e27c:	f109 0114 	add.w	r1, r9, #20
 800e280:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e284:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e288:	9302      	str	r3, [sp, #8]
 800e28a:	1beb      	subs	r3, r5, r7
 800e28c:	3b15      	subs	r3, #21
 800e28e:	f023 0303 	bic.w	r3, r3, #3
 800e292:	3304      	adds	r3, #4
 800e294:	3715      	adds	r7, #21
 800e296:	42bd      	cmp	r5, r7
 800e298:	bf38      	it	cc
 800e29a:	2304      	movcc	r3, #4
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	9b02      	ldr	r3, [sp, #8]
 800e2a0:	9103      	str	r1, [sp, #12]
 800e2a2:	428b      	cmp	r3, r1
 800e2a4:	d80c      	bhi.n	800e2c0 <__multiply+0x98>
 800e2a6:	2e00      	cmp	r6, #0
 800e2a8:	dd03      	ble.n	800e2b2 <__multiply+0x8a>
 800e2aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d055      	beq.n	800e35e <__multiply+0x136>
 800e2b2:	6106      	str	r6, [r0, #16]
 800e2b4:	b005      	add	sp, #20
 800e2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ba:	f843 2b04 	str.w	r2, [r3], #4
 800e2be:	e7d9      	b.n	800e274 <__multiply+0x4c>
 800e2c0:	f8b1 a000 	ldrh.w	sl, [r1]
 800e2c4:	f1ba 0f00 	cmp.w	sl, #0
 800e2c8:	d01f      	beq.n	800e30a <__multiply+0xe2>
 800e2ca:	46c4      	mov	ip, r8
 800e2cc:	46a1      	mov	r9, r4
 800e2ce:	2700      	movs	r7, #0
 800e2d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2d4:	f8d9 3000 	ldr.w	r3, [r9]
 800e2d8:	fa1f fb82 	uxth.w	fp, r2
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2e2:	443b      	add	r3, r7
 800e2e4:	f8d9 7000 	ldr.w	r7, [r9]
 800e2e8:	0c12      	lsrs	r2, r2, #16
 800e2ea:	0c3f      	lsrs	r7, r7, #16
 800e2ec:	fb0a 7202 	mla	r2, sl, r2, r7
 800e2f0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2fa:	4565      	cmp	r5, ip
 800e2fc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e300:	f849 3b04 	str.w	r3, [r9], #4
 800e304:	d8e4      	bhi.n	800e2d0 <__multiply+0xa8>
 800e306:	9b01      	ldr	r3, [sp, #4]
 800e308:	50e7      	str	r7, [r4, r3]
 800e30a:	9b03      	ldr	r3, [sp, #12]
 800e30c:	3104      	adds	r1, #4
 800e30e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e312:	f1b9 0f00 	cmp.w	r9, #0
 800e316:	d020      	beq.n	800e35a <__multiply+0x132>
 800e318:	4647      	mov	r7, r8
 800e31a:	46a4      	mov	ip, r4
 800e31c:	f04f 0a00 	mov.w	sl, #0
 800e320:	6823      	ldr	r3, [r4, #0]
 800e322:	f8b7 b000 	ldrh.w	fp, [r7]
 800e326:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	fb09 220b 	mla	r2, r9, fp, r2
 800e330:	4452      	add	r2, sl
 800e332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e336:	f84c 3b04 	str.w	r3, [ip], #4
 800e33a:	f857 3b04 	ldr.w	r3, [r7], #4
 800e33e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e342:	f8bc 3000 	ldrh.w	r3, [ip]
 800e346:	42bd      	cmp	r5, r7
 800e348:	fb09 330a 	mla	r3, r9, sl, r3
 800e34c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e350:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e354:	d8e5      	bhi.n	800e322 <__multiply+0xfa>
 800e356:	9a01      	ldr	r2, [sp, #4]
 800e358:	50a3      	str	r3, [r4, r2]
 800e35a:	3404      	adds	r4, #4
 800e35c:	e79f      	b.n	800e29e <__multiply+0x76>
 800e35e:	3e01      	subs	r6, #1
 800e360:	e7a1      	b.n	800e2a6 <__multiply+0x7e>
 800e362:	bf00      	nop
 800e364:	0800f744 	.word	0x0800f744
 800e368:	0800f755 	.word	0x0800f755

0800e36c <__pow5mult>:
 800e36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e370:	4615      	mov	r5, r2
 800e372:	f012 0203 	ands.w	r2, r2, #3
 800e376:	4607      	mov	r7, r0
 800e378:	460e      	mov	r6, r1
 800e37a:	d007      	beq.n	800e38c <__pow5mult+0x20>
 800e37c:	4c25      	ldr	r4, [pc, #148]	@ (800e414 <__pow5mult+0xa8>)
 800e37e:	3a01      	subs	r2, #1
 800e380:	2300      	movs	r3, #0
 800e382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e386:	f7ff fea7 	bl	800e0d8 <__multadd>
 800e38a:	4606      	mov	r6, r0
 800e38c:	10ad      	asrs	r5, r5, #2
 800e38e:	d03d      	beq.n	800e40c <__pow5mult+0xa0>
 800e390:	69fc      	ldr	r4, [r7, #28]
 800e392:	b97c      	cbnz	r4, 800e3b4 <__pow5mult+0x48>
 800e394:	2010      	movs	r0, #16
 800e396:	f7ff fd87 	bl	800dea8 <malloc>
 800e39a:	4602      	mov	r2, r0
 800e39c:	61f8      	str	r0, [r7, #28]
 800e39e:	b928      	cbnz	r0, 800e3ac <__pow5mult+0x40>
 800e3a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e3a4:	4b1c      	ldr	r3, [pc, #112]	@ (800e418 <__pow5mult+0xac>)
 800e3a6:	481d      	ldr	r0, [pc, #116]	@ (800e41c <__pow5mult+0xb0>)
 800e3a8:	f000 fbd8 	bl	800eb5c <__assert_func>
 800e3ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e3b0:	6004      	str	r4, [r0, #0]
 800e3b2:	60c4      	str	r4, [r0, #12]
 800e3b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e3b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3bc:	b94c      	cbnz	r4, 800e3d2 <__pow5mult+0x66>
 800e3be:	f240 2171 	movw	r1, #625	@ 0x271
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	f7ff ff1a 	bl	800e1fc <__i2b>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3d0:	6003      	str	r3, [r0, #0]
 800e3d2:	f04f 0900 	mov.w	r9, #0
 800e3d6:	07eb      	lsls	r3, r5, #31
 800e3d8:	d50a      	bpl.n	800e3f0 <__pow5mult+0x84>
 800e3da:	4631      	mov	r1, r6
 800e3dc:	4622      	mov	r2, r4
 800e3de:	4638      	mov	r0, r7
 800e3e0:	f7ff ff22 	bl	800e228 <__multiply>
 800e3e4:	4680      	mov	r8, r0
 800e3e6:	4631      	mov	r1, r6
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	f7ff fe53 	bl	800e094 <_Bfree>
 800e3ee:	4646      	mov	r6, r8
 800e3f0:	106d      	asrs	r5, r5, #1
 800e3f2:	d00b      	beq.n	800e40c <__pow5mult+0xa0>
 800e3f4:	6820      	ldr	r0, [r4, #0]
 800e3f6:	b938      	cbnz	r0, 800e408 <__pow5mult+0x9c>
 800e3f8:	4622      	mov	r2, r4
 800e3fa:	4621      	mov	r1, r4
 800e3fc:	4638      	mov	r0, r7
 800e3fe:	f7ff ff13 	bl	800e228 <__multiply>
 800e402:	6020      	str	r0, [r4, #0]
 800e404:	f8c0 9000 	str.w	r9, [r0]
 800e408:	4604      	mov	r4, r0
 800e40a:	e7e4      	b.n	800e3d6 <__pow5mult+0x6a>
 800e40c:	4630      	mov	r0, r6
 800e40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e412:	bf00      	nop
 800e414:	0800f808 	.word	0x0800f808
 800e418:	0800f6d5 	.word	0x0800f6d5
 800e41c:	0800f755 	.word	0x0800f755

0800e420 <__lshift>:
 800e420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e424:	460c      	mov	r4, r1
 800e426:	4607      	mov	r7, r0
 800e428:	4691      	mov	r9, r2
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	6849      	ldr	r1, [r1, #4]
 800e42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e432:	68a3      	ldr	r3, [r4, #8]
 800e434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e438:	f108 0601 	add.w	r6, r8, #1
 800e43c:	42b3      	cmp	r3, r6
 800e43e:	db0b      	blt.n	800e458 <__lshift+0x38>
 800e440:	4638      	mov	r0, r7
 800e442:	f7ff fde7 	bl	800e014 <_Balloc>
 800e446:	4605      	mov	r5, r0
 800e448:	b948      	cbnz	r0, 800e45e <__lshift+0x3e>
 800e44a:	4602      	mov	r2, r0
 800e44c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e450:	4b27      	ldr	r3, [pc, #156]	@ (800e4f0 <__lshift+0xd0>)
 800e452:	4828      	ldr	r0, [pc, #160]	@ (800e4f4 <__lshift+0xd4>)
 800e454:	f000 fb82 	bl	800eb5c <__assert_func>
 800e458:	3101      	adds	r1, #1
 800e45a:	005b      	lsls	r3, r3, #1
 800e45c:	e7ee      	b.n	800e43c <__lshift+0x1c>
 800e45e:	2300      	movs	r3, #0
 800e460:	f100 0114 	add.w	r1, r0, #20
 800e464:	f100 0210 	add.w	r2, r0, #16
 800e468:	4618      	mov	r0, r3
 800e46a:	4553      	cmp	r3, sl
 800e46c:	db33      	blt.n	800e4d6 <__lshift+0xb6>
 800e46e:	6920      	ldr	r0, [r4, #16]
 800e470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e474:	f104 0314 	add.w	r3, r4, #20
 800e478:	f019 091f 	ands.w	r9, r9, #31
 800e47c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e484:	d02b      	beq.n	800e4de <__lshift+0xbe>
 800e486:	468a      	mov	sl, r1
 800e488:	2200      	movs	r2, #0
 800e48a:	f1c9 0e20 	rsb	lr, r9, #32
 800e48e:	6818      	ldr	r0, [r3, #0]
 800e490:	fa00 f009 	lsl.w	r0, r0, r9
 800e494:	4310      	orrs	r0, r2
 800e496:	f84a 0b04 	str.w	r0, [sl], #4
 800e49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e49e:	459c      	cmp	ip, r3
 800e4a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e4a4:	d8f3      	bhi.n	800e48e <__lshift+0x6e>
 800e4a6:	ebac 0304 	sub.w	r3, ip, r4
 800e4aa:	3b15      	subs	r3, #21
 800e4ac:	f023 0303 	bic.w	r3, r3, #3
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	f104 0015 	add.w	r0, r4, #21
 800e4b6:	4560      	cmp	r0, ip
 800e4b8:	bf88      	it	hi
 800e4ba:	2304      	movhi	r3, #4
 800e4bc:	50ca      	str	r2, [r1, r3]
 800e4be:	b10a      	cbz	r2, 800e4c4 <__lshift+0xa4>
 800e4c0:	f108 0602 	add.w	r6, r8, #2
 800e4c4:	3e01      	subs	r6, #1
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	4621      	mov	r1, r4
 800e4ca:	612e      	str	r6, [r5, #16]
 800e4cc:	f7ff fde2 	bl	800e094 <_Bfree>
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4da:	3301      	adds	r3, #1
 800e4dc:	e7c5      	b.n	800e46a <__lshift+0x4a>
 800e4de:	3904      	subs	r1, #4
 800e4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4e4:	459c      	cmp	ip, r3
 800e4e6:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4ea:	d8f9      	bhi.n	800e4e0 <__lshift+0xc0>
 800e4ec:	e7ea      	b.n	800e4c4 <__lshift+0xa4>
 800e4ee:	bf00      	nop
 800e4f0:	0800f744 	.word	0x0800f744
 800e4f4:	0800f755 	.word	0x0800f755

0800e4f8 <__mcmp>:
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	690a      	ldr	r2, [r1, #16]
 800e4fc:	6900      	ldr	r0, [r0, #16]
 800e4fe:	b530      	push	{r4, r5, lr}
 800e500:	1a80      	subs	r0, r0, r2
 800e502:	d10e      	bne.n	800e522 <__mcmp+0x2a>
 800e504:	3314      	adds	r3, #20
 800e506:	3114      	adds	r1, #20
 800e508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e50c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e518:	4295      	cmp	r5, r2
 800e51a:	d003      	beq.n	800e524 <__mcmp+0x2c>
 800e51c:	d205      	bcs.n	800e52a <__mcmp+0x32>
 800e51e:	f04f 30ff 	mov.w	r0, #4294967295
 800e522:	bd30      	pop	{r4, r5, pc}
 800e524:	42a3      	cmp	r3, r4
 800e526:	d3f3      	bcc.n	800e510 <__mcmp+0x18>
 800e528:	e7fb      	b.n	800e522 <__mcmp+0x2a>
 800e52a:	2001      	movs	r0, #1
 800e52c:	e7f9      	b.n	800e522 <__mcmp+0x2a>
	...

0800e530 <__mdiff>:
 800e530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e534:	4689      	mov	r9, r1
 800e536:	4606      	mov	r6, r0
 800e538:	4611      	mov	r1, r2
 800e53a:	4648      	mov	r0, r9
 800e53c:	4614      	mov	r4, r2
 800e53e:	f7ff ffdb 	bl	800e4f8 <__mcmp>
 800e542:	1e05      	subs	r5, r0, #0
 800e544:	d112      	bne.n	800e56c <__mdiff+0x3c>
 800e546:	4629      	mov	r1, r5
 800e548:	4630      	mov	r0, r6
 800e54a:	f7ff fd63 	bl	800e014 <_Balloc>
 800e54e:	4602      	mov	r2, r0
 800e550:	b928      	cbnz	r0, 800e55e <__mdiff+0x2e>
 800e552:	f240 2137 	movw	r1, #567	@ 0x237
 800e556:	4b3e      	ldr	r3, [pc, #248]	@ (800e650 <__mdiff+0x120>)
 800e558:	483e      	ldr	r0, [pc, #248]	@ (800e654 <__mdiff+0x124>)
 800e55a:	f000 faff 	bl	800eb5c <__assert_func>
 800e55e:	2301      	movs	r3, #1
 800e560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e564:	4610      	mov	r0, r2
 800e566:	b003      	add	sp, #12
 800e568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56c:	bfbc      	itt	lt
 800e56e:	464b      	movlt	r3, r9
 800e570:	46a1      	movlt	r9, r4
 800e572:	4630      	mov	r0, r6
 800e574:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e578:	bfba      	itte	lt
 800e57a:	461c      	movlt	r4, r3
 800e57c:	2501      	movlt	r5, #1
 800e57e:	2500      	movge	r5, #0
 800e580:	f7ff fd48 	bl	800e014 <_Balloc>
 800e584:	4602      	mov	r2, r0
 800e586:	b918      	cbnz	r0, 800e590 <__mdiff+0x60>
 800e588:	f240 2145 	movw	r1, #581	@ 0x245
 800e58c:	4b30      	ldr	r3, [pc, #192]	@ (800e650 <__mdiff+0x120>)
 800e58e:	e7e3      	b.n	800e558 <__mdiff+0x28>
 800e590:	f100 0b14 	add.w	fp, r0, #20
 800e594:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e598:	f109 0310 	add.w	r3, r9, #16
 800e59c:	60c5      	str	r5, [r0, #12]
 800e59e:	f04f 0c00 	mov.w	ip, #0
 800e5a2:	f109 0514 	add.w	r5, r9, #20
 800e5a6:	46d9      	mov	r9, fp
 800e5a8:	6926      	ldr	r6, [r4, #16]
 800e5aa:	f104 0e14 	add.w	lr, r4, #20
 800e5ae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e5b2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e5b6:	9301      	str	r3, [sp, #4]
 800e5b8:	9b01      	ldr	r3, [sp, #4]
 800e5ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e5be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e5c2:	b281      	uxth	r1, r0
 800e5c4:	9301      	str	r3, [sp, #4]
 800e5c6:	fa1f f38a 	uxth.w	r3, sl
 800e5ca:	1a5b      	subs	r3, r3, r1
 800e5cc:	0c00      	lsrs	r0, r0, #16
 800e5ce:	4463      	add	r3, ip
 800e5d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5de:	4576      	cmp	r6, lr
 800e5e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5e4:	f849 3b04 	str.w	r3, [r9], #4
 800e5e8:	d8e6      	bhi.n	800e5b8 <__mdiff+0x88>
 800e5ea:	1b33      	subs	r3, r6, r4
 800e5ec:	3b15      	subs	r3, #21
 800e5ee:	f023 0303 	bic.w	r3, r3, #3
 800e5f2:	3415      	adds	r4, #21
 800e5f4:	3304      	adds	r3, #4
 800e5f6:	42a6      	cmp	r6, r4
 800e5f8:	bf38      	it	cc
 800e5fa:	2304      	movcc	r3, #4
 800e5fc:	441d      	add	r5, r3
 800e5fe:	445b      	add	r3, fp
 800e600:	461e      	mov	r6, r3
 800e602:	462c      	mov	r4, r5
 800e604:	4544      	cmp	r4, r8
 800e606:	d30e      	bcc.n	800e626 <__mdiff+0xf6>
 800e608:	f108 0103 	add.w	r1, r8, #3
 800e60c:	1b49      	subs	r1, r1, r5
 800e60e:	f021 0103 	bic.w	r1, r1, #3
 800e612:	3d03      	subs	r5, #3
 800e614:	45a8      	cmp	r8, r5
 800e616:	bf38      	it	cc
 800e618:	2100      	movcc	r1, #0
 800e61a:	440b      	add	r3, r1
 800e61c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e620:	b199      	cbz	r1, 800e64a <__mdiff+0x11a>
 800e622:	6117      	str	r7, [r2, #16]
 800e624:	e79e      	b.n	800e564 <__mdiff+0x34>
 800e626:	46e6      	mov	lr, ip
 800e628:	f854 1b04 	ldr.w	r1, [r4], #4
 800e62c:	fa1f fc81 	uxth.w	ip, r1
 800e630:	44f4      	add	ip, lr
 800e632:	0c08      	lsrs	r0, r1, #16
 800e634:	4471      	add	r1, lr
 800e636:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e63a:	b289      	uxth	r1, r1
 800e63c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e640:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e644:	f846 1b04 	str.w	r1, [r6], #4
 800e648:	e7dc      	b.n	800e604 <__mdiff+0xd4>
 800e64a:	3f01      	subs	r7, #1
 800e64c:	e7e6      	b.n	800e61c <__mdiff+0xec>
 800e64e:	bf00      	nop
 800e650:	0800f744 	.word	0x0800f744
 800e654:	0800f755 	.word	0x0800f755

0800e658 <__d2b>:
 800e658:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800e65c:	2101      	movs	r1, #1
 800e65e:	4690      	mov	r8, r2
 800e660:	4699      	mov	r9, r3
 800e662:	9e08      	ldr	r6, [sp, #32]
 800e664:	f7ff fcd6 	bl	800e014 <_Balloc>
 800e668:	4604      	mov	r4, r0
 800e66a:	b930      	cbnz	r0, 800e67a <__d2b+0x22>
 800e66c:	4602      	mov	r2, r0
 800e66e:	f240 310f 	movw	r1, #783	@ 0x30f
 800e672:	4b23      	ldr	r3, [pc, #140]	@ (800e700 <__d2b+0xa8>)
 800e674:	4823      	ldr	r0, [pc, #140]	@ (800e704 <__d2b+0xac>)
 800e676:	f000 fa71 	bl	800eb5c <__assert_func>
 800e67a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e67e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e682:	b10d      	cbz	r5, 800e688 <__d2b+0x30>
 800e684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	f1b8 0300 	subs.w	r3, r8, #0
 800e68e:	d024      	beq.n	800e6da <__d2b+0x82>
 800e690:	4668      	mov	r0, sp
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	f7ff fd85 	bl	800e1a2 <__lo0bits>
 800e698:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e69c:	b1d8      	cbz	r0, 800e6d6 <__d2b+0x7e>
 800e69e:	f1c0 0320 	rsb	r3, r0, #32
 800e6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a6:	430b      	orrs	r3, r1
 800e6a8:	40c2      	lsrs	r2, r0
 800e6aa:	6163      	str	r3, [r4, #20]
 800e6ac:	9201      	str	r2, [sp, #4]
 800e6ae:	9b01      	ldr	r3, [sp, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	bf0c      	ite	eq
 800e6b4:	2201      	moveq	r2, #1
 800e6b6:	2202      	movne	r2, #2
 800e6b8:	61a3      	str	r3, [r4, #24]
 800e6ba:	6122      	str	r2, [r4, #16]
 800e6bc:	b1ad      	cbz	r5, 800e6ea <__d2b+0x92>
 800e6be:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e6c2:	4405      	add	r5, r0
 800e6c4:	6035      	str	r5, [r6, #0]
 800e6c6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6cc:	6018      	str	r0, [r3, #0]
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	b002      	add	sp, #8
 800e6d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e6d6:	6161      	str	r1, [r4, #20]
 800e6d8:	e7e9      	b.n	800e6ae <__d2b+0x56>
 800e6da:	a801      	add	r0, sp, #4
 800e6dc:	f7ff fd61 	bl	800e1a2 <__lo0bits>
 800e6e0:	9b01      	ldr	r3, [sp, #4]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	6163      	str	r3, [r4, #20]
 800e6e6:	3020      	adds	r0, #32
 800e6e8:	e7e7      	b.n	800e6ba <__d2b+0x62>
 800e6ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e6ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6f2:	6030      	str	r0, [r6, #0]
 800e6f4:	6918      	ldr	r0, [r3, #16]
 800e6f6:	f7ff fd35 	bl	800e164 <__hi0bits>
 800e6fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6fe:	e7e4      	b.n	800e6ca <__d2b+0x72>
 800e700:	0800f744 	.word	0x0800f744
 800e704:	0800f755 	.word	0x0800f755

0800e708 <__ssputs_r>:
 800e708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e70c:	461f      	mov	r7, r3
 800e70e:	688e      	ldr	r6, [r1, #8]
 800e710:	4682      	mov	sl, r0
 800e712:	42be      	cmp	r6, r7
 800e714:	460c      	mov	r4, r1
 800e716:	4690      	mov	r8, r2
 800e718:	680b      	ldr	r3, [r1, #0]
 800e71a:	d82d      	bhi.n	800e778 <__ssputs_r+0x70>
 800e71c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e720:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e724:	d026      	beq.n	800e774 <__ssputs_r+0x6c>
 800e726:	6965      	ldr	r5, [r4, #20]
 800e728:	6909      	ldr	r1, [r1, #16]
 800e72a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e72e:	eba3 0901 	sub.w	r9, r3, r1
 800e732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e736:	1c7b      	adds	r3, r7, #1
 800e738:	444b      	add	r3, r9
 800e73a:	106d      	asrs	r5, r5, #1
 800e73c:	429d      	cmp	r5, r3
 800e73e:	bf38      	it	cc
 800e740:	461d      	movcc	r5, r3
 800e742:	0553      	lsls	r3, r2, #21
 800e744:	d527      	bpl.n	800e796 <__ssputs_r+0x8e>
 800e746:	4629      	mov	r1, r5
 800e748:	f7ff fbd8 	bl	800defc <_malloc_r>
 800e74c:	4606      	mov	r6, r0
 800e74e:	b360      	cbz	r0, 800e7aa <__ssputs_r+0xa2>
 800e750:	464a      	mov	r2, r9
 800e752:	6921      	ldr	r1, [r4, #16]
 800e754:	f7fe fcf3 	bl	800d13e <memcpy>
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e75e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e762:	81a3      	strh	r3, [r4, #12]
 800e764:	6126      	str	r6, [r4, #16]
 800e766:	444e      	add	r6, r9
 800e768:	6026      	str	r6, [r4, #0]
 800e76a:	463e      	mov	r6, r7
 800e76c:	6165      	str	r5, [r4, #20]
 800e76e:	eba5 0509 	sub.w	r5, r5, r9
 800e772:	60a5      	str	r5, [r4, #8]
 800e774:	42be      	cmp	r6, r7
 800e776:	d900      	bls.n	800e77a <__ssputs_r+0x72>
 800e778:	463e      	mov	r6, r7
 800e77a:	4632      	mov	r2, r6
 800e77c:	4641      	mov	r1, r8
 800e77e:	6820      	ldr	r0, [r4, #0]
 800e780:	f000 f9c2 	bl	800eb08 <memmove>
 800e784:	2000      	movs	r0, #0
 800e786:	68a3      	ldr	r3, [r4, #8]
 800e788:	1b9b      	subs	r3, r3, r6
 800e78a:	60a3      	str	r3, [r4, #8]
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	4433      	add	r3, r6
 800e790:	6023      	str	r3, [r4, #0]
 800e792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e796:	462a      	mov	r2, r5
 800e798:	f000 fa24 	bl	800ebe4 <_realloc_r>
 800e79c:	4606      	mov	r6, r0
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d1e0      	bne.n	800e764 <__ssputs_r+0x5c>
 800e7a2:	4650      	mov	r0, sl
 800e7a4:	6921      	ldr	r1, [r4, #16]
 800e7a6:	f7ff fb37 	bl	800de18 <_free_r>
 800e7aa:	230c      	movs	r3, #12
 800e7ac:	f8ca 3000 	str.w	r3, [sl]
 800e7b0:	89a3      	ldrh	r3, [r4, #12]
 800e7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7ba:	81a3      	strh	r3, [r4, #12]
 800e7bc:	e7e9      	b.n	800e792 <__ssputs_r+0x8a>
	...

0800e7c0 <_svfiprintf_r>:
 800e7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c4:	4698      	mov	r8, r3
 800e7c6:	898b      	ldrh	r3, [r1, #12]
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	061b      	lsls	r3, r3, #24
 800e7cc:	460d      	mov	r5, r1
 800e7ce:	4614      	mov	r4, r2
 800e7d0:	b09d      	sub	sp, #116	@ 0x74
 800e7d2:	d510      	bpl.n	800e7f6 <_svfiprintf_r+0x36>
 800e7d4:	690b      	ldr	r3, [r1, #16]
 800e7d6:	b973      	cbnz	r3, 800e7f6 <_svfiprintf_r+0x36>
 800e7d8:	2140      	movs	r1, #64	@ 0x40
 800e7da:	f7ff fb8f 	bl	800defc <_malloc_r>
 800e7de:	6028      	str	r0, [r5, #0]
 800e7e0:	6128      	str	r0, [r5, #16]
 800e7e2:	b930      	cbnz	r0, 800e7f2 <_svfiprintf_r+0x32>
 800e7e4:	230c      	movs	r3, #12
 800e7e6:	603b      	str	r3, [r7, #0]
 800e7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ec:	b01d      	add	sp, #116	@ 0x74
 800e7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f2:	2340      	movs	r3, #64	@ 0x40
 800e7f4:	616b      	str	r3, [r5, #20]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7fa:	2320      	movs	r3, #32
 800e7fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e800:	2330      	movs	r3, #48	@ 0x30
 800e802:	f04f 0901 	mov.w	r9, #1
 800e806:	f8cd 800c 	str.w	r8, [sp, #12]
 800e80a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e9a4 <_svfiprintf_r+0x1e4>
 800e80e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e812:	4623      	mov	r3, r4
 800e814:	469a      	mov	sl, r3
 800e816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e81a:	b10a      	cbz	r2, 800e820 <_svfiprintf_r+0x60>
 800e81c:	2a25      	cmp	r2, #37	@ 0x25
 800e81e:	d1f9      	bne.n	800e814 <_svfiprintf_r+0x54>
 800e820:	ebba 0b04 	subs.w	fp, sl, r4
 800e824:	d00b      	beq.n	800e83e <_svfiprintf_r+0x7e>
 800e826:	465b      	mov	r3, fp
 800e828:	4622      	mov	r2, r4
 800e82a:	4629      	mov	r1, r5
 800e82c:	4638      	mov	r0, r7
 800e82e:	f7ff ff6b 	bl	800e708 <__ssputs_r>
 800e832:	3001      	adds	r0, #1
 800e834:	f000 80a7 	beq.w	800e986 <_svfiprintf_r+0x1c6>
 800e838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e83a:	445a      	add	r2, fp
 800e83c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e83e:	f89a 3000 	ldrb.w	r3, [sl]
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 809f 	beq.w	800e986 <_svfiprintf_r+0x1c6>
 800e848:	2300      	movs	r3, #0
 800e84a:	f04f 32ff 	mov.w	r2, #4294967295
 800e84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e852:	f10a 0a01 	add.w	sl, sl, #1
 800e856:	9304      	str	r3, [sp, #16]
 800e858:	9307      	str	r3, [sp, #28]
 800e85a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e85e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e860:	4654      	mov	r4, sl
 800e862:	2205      	movs	r2, #5
 800e864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e868:	484e      	ldr	r0, [pc, #312]	@ (800e9a4 <_svfiprintf_r+0x1e4>)
 800e86a:	f7fe fc5a 	bl	800d122 <memchr>
 800e86e:	9a04      	ldr	r2, [sp, #16]
 800e870:	b9d8      	cbnz	r0, 800e8aa <_svfiprintf_r+0xea>
 800e872:	06d0      	lsls	r0, r2, #27
 800e874:	bf44      	itt	mi
 800e876:	2320      	movmi	r3, #32
 800e878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e87c:	0711      	lsls	r1, r2, #28
 800e87e:	bf44      	itt	mi
 800e880:	232b      	movmi	r3, #43	@ 0x2b
 800e882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e886:	f89a 3000 	ldrb.w	r3, [sl]
 800e88a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e88c:	d015      	beq.n	800e8ba <_svfiprintf_r+0xfa>
 800e88e:	4654      	mov	r4, sl
 800e890:	2000      	movs	r0, #0
 800e892:	f04f 0c0a 	mov.w	ip, #10
 800e896:	9a07      	ldr	r2, [sp, #28]
 800e898:	4621      	mov	r1, r4
 800e89a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e89e:	3b30      	subs	r3, #48	@ 0x30
 800e8a0:	2b09      	cmp	r3, #9
 800e8a2:	d94b      	bls.n	800e93c <_svfiprintf_r+0x17c>
 800e8a4:	b1b0      	cbz	r0, 800e8d4 <_svfiprintf_r+0x114>
 800e8a6:	9207      	str	r2, [sp, #28]
 800e8a8:	e014      	b.n	800e8d4 <_svfiprintf_r+0x114>
 800e8aa:	eba0 0308 	sub.w	r3, r0, r8
 800e8ae:	fa09 f303 	lsl.w	r3, r9, r3
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	46a2      	mov	sl, r4
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	e7d2      	b.n	800e860 <_svfiprintf_r+0xa0>
 800e8ba:	9b03      	ldr	r3, [sp, #12]
 800e8bc:	1d19      	adds	r1, r3, #4
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	9103      	str	r1, [sp, #12]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	bfbb      	ittet	lt
 800e8c6:	425b      	neglt	r3, r3
 800e8c8:	f042 0202 	orrlt.w	r2, r2, #2
 800e8cc:	9307      	strge	r3, [sp, #28]
 800e8ce:	9307      	strlt	r3, [sp, #28]
 800e8d0:	bfb8      	it	lt
 800e8d2:	9204      	strlt	r2, [sp, #16]
 800e8d4:	7823      	ldrb	r3, [r4, #0]
 800e8d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8d8:	d10a      	bne.n	800e8f0 <_svfiprintf_r+0x130>
 800e8da:	7863      	ldrb	r3, [r4, #1]
 800e8dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8de:	d132      	bne.n	800e946 <_svfiprintf_r+0x186>
 800e8e0:	9b03      	ldr	r3, [sp, #12]
 800e8e2:	3402      	adds	r4, #2
 800e8e4:	1d1a      	adds	r2, r3, #4
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	9203      	str	r2, [sp, #12]
 800e8ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8ee:	9305      	str	r3, [sp, #20]
 800e8f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e9a8 <_svfiprintf_r+0x1e8>
 800e8f4:	2203      	movs	r2, #3
 800e8f6:	4650      	mov	r0, sl
 800e8f8:	7821      	ldrb	r1, [r4, #0]
 800e8fa:	f7fe fc12 	bl	800d122 <memchr>
 800e8fe:	b138      	cbz	r0, 800e910 <_svfiprintf_r+0x150>
 800e900:	2240      	movs	r2, #64	@ 0x40
 800e902:	9b04      	ldr	r3, [sp, #16]
 800e904:	eba0 000a 	sub.w	r0, r0, sl
 800e908:	4082      	lsls	r2, r0
 800e90a:	4313      	orrs	r3, r2
 800e90c:	3401      	adds	r4, #1
 800e90e:	9304      	str	r3, [sp, #16]
 800e910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e914:	2206      	movs	r2, #6
 800e916:	4825      	ldr	r0, [pc, #148]	@ (800e9ac <_svfiprintf_r+0x1ec>)
 800e918:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e91c:	f7fe fc01 	bl	800d122 <memchr>
 800e920:	2800      	cmp	r0, #0
 800e922:	d036      	beq.n	800e992 <_svfiprintf_r+0x1d2>
 800e924:	4b22      	ldr	r3, [pc, #136]	@ (800e9b0 <_svfiprintf_r+0x1f0>)
 800e926:	bb1b      	cbnz	r3, 800e970 <_svfiprintf_r+0x1b0>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	3307      	adds	r3, #7
 800e92c:	f023 0307 	bic.w	r3, r3, #7
 800e930:	3308      	adds	r3, #8
 800e932:	9303      	str	r3, [sp, #12]
 800e934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e936:	4433      	add	r3, r6
 800e938:	9309      	str	r3, [sp, #36]	@ 0x24
 800e93a:	e76a      	b.n	800e812 <_svfiprintf_r+0x52>
 800e93c:	460c      	mov	r4, r1
 800e93e:	2001      	movs	r0, #1
 800e940:	fb0c 3202 	mla	r2, ip, r2, r3
 800e944:	e7a8      	b.n	800e898 <_svfiprintf_r+0xd8>
 800e946:	2300      	movs	r3, #0
 800e948:	f04f 0c0a 	mov.w	ip, #10
 800e94c:	4619      	mov	r1, r3
 800e94e:	3401      	adds	r4, #1
 800e950:	9305      	str	r3, [sp, #20]
 800e952:	4620      	mov	r0, r4
 800e954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e958:	3a30      	subs	r2, #48	@ 0x30
 800e95a:	2a09      	cmp	r2, #9
 800e95c:	d903      	bls.n	800e966 <_svfiprintf_r+0x1a6>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d0c6      	beq.n	800e8f0 <_svfiprintf_r+0x130>
 800e962:	9105      	str	r1, [sp, #20]
 800e964:	e7c4      	b.n	800e8f0 <_svfiprintf_r+0x130>
 800e966:	4604      	mov	r4, r0
 800e968:	2301      	movs	r3, #1
 800e96a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e96e:	e7f0      	b.n	800e952 <_svfiprintf_r+0x192>
 800e970:	ab03      	add	r3, sp, #12
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	462a      	mov	r2, r5
 800e976:	4638      	mov	r0, r7
 800e978:	4b0e      	ldr	r3, [pc, #56]	@ (800e9b4 <_svfiprintf_r+0x1f4>)
 800e97a:	a904      	add	r1, sp, #16
 800e97c:	f7fd fdfc 	bl	800c578 <_printf_float>
 800e980:	1c42      	adds	r2, r0, #1
 800e982:	4606      	mov	r6, r0
 800e984:	d1d6      	bne.n	800e934 <_svfiprintf_r+0x174>
 800e986:	89ab      	ldrh	r3, [r5, #12]
 800e988:	065b      	lsls	r3, r3, #25
 800e98a:	f53f af2d 	bmi.w	800e7e8 <_svfiprintf_r+0x28>
 800e98e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e990:	e72c      	b.n	800e7ec <_svfiprintf_r+0x2c>
 800e992:	ab03      	add	r3, sp, #12
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	462a      	mov	r2, r5
 800e998:	4638      	mov	r0, r7
 800e99a:	4b06      	ldr	r3, [pc, #24]	@ (800e9b4 <_svfiprintf_r+0x1f4>)
 800e99c:	a904      	add	r1, sp, #16
 800e99e:	f7fe f889 	bl	800cab4 <_printf_i>
 800e9a2:	e7ed      	b.n	800e980 <_svfiprintf_r+0x1c0>
 800e9a4:	0800f7ae 	.word	0x0800f7ae
 800e9a8:	0800f7b4 	.word	0x0800f7b4
 800e9ac:	0800f7b8 	.word	0x0800f7b8
 800e9b0:	0800c579 	.word	0x0800c579
 800e9b4:	0800e709 	.word	0x0800e709

0800e9b8 <__sflush_r>:
 800e9b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9be:	0716      	lsls	r6, r2, #28
 800e9c0:	4605      	mov	r5, r0
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	d454      	bmi.n	800ea70 <__sflush_r+0xb8>
 800e9c6:	684b      	ldr	r3, [r1, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	dc02      	bgt.n	800e9d2 <__sflush_r+0x1a>
 800e9cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	dd48      	ble.n	800ea64 <__sflush_r+0xac>
 800e9d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9d4:	2e00      	cmp	r6, #0
 800e9d6:	d045      	beq.n	800ea64 <__sflush_r+0xac>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9de:	682f      	ldr	r7, [r5, #0]
 800e9e0:	6a21      	ldr	r1, [r4, #32]
 800e9e2:	602b      	str	r3, [r5, #0]
 800e9e4:	d030      	beq.n	800ea48 <__sflush_r+0x90>
 800e9e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9e8:	89a3      	ldrh	r3, [r4, #12]
 800e9ea:	0759      	lsls	r1, r3, #29
 800e9ec:	d505      	bpl.n	800e9fa <__sflush_r+0x42>
 800e9ee:	6863      	ldr	r3, [r4, #4]
 800e9f0:	1ad2      	subs	r2, r2, r3
 800e9f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e9f4:	b10b      	cbz	r3, 800e9fa <__sflush_r+0x42>
 800e9f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e9f8:	1ad2      	subs	r2, r2, r3
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea00:	6a21      	ldr	r1, [r4, #32]
 800ea02:	47b0      	blx	r6
 800ea04:	1c43      	adds	r3, r0, #1
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	d106      	bne.n	800ea18 <__sflush_r+0x60>
 800ea0a:	6829      	ldr	r1, [r5, #0]
 800ea0c:	291d      	cmp	r1, #29
 800ea0e:	d82b      	bhi.n	800ea68 <__sflush_r+0xb0>
 800ea10:	4a28      	ldr	r2, [pc, #160]	@ (800eab4 <__sflush_r+0xfc>)
 800ea12:	40ca      	lsrs	r2, r1
 800ea14:	07d6      	lsls	r6, r2, #31
 800ea16:	d527      	bpl.n	800ea68 <__sflush_r+0xb0>
 800ea18:	2200      	movs	r2, #0
 800ea1a:	6062      	str	r2, [r4, #4]
 800ea1c:	6922      	ldr	r2, [r4, #16]
 800ea1e:	04d9      	lsls	r1, r3, #19
 800ea20:	6022      	str	r2, [r4, #0]
 800ea22:	d504      	bpl.n	800ea2e <__sflush_r+0x76>
 800ea24:	1c42      	adds	r2, r0, #1
 800ea26:	d101      	bne.n	800ea2c <__sflush_r+0x74>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b903      	cbnz	r3, 800ea2e <__sflush_r+0x76>
 800ea2c:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea30:	602f      	str	r7, [r5, #0]
 800ea32:	b1b9      	cbz	r1, 800ea64 <__sflush_r+0xac>
 800ea34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea38:	4299      	cmp	r1, r3
 800ea3a:	d002      	beq.n	800ea42 <__sflush_r+0x8a>
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f7ff f9eb 	bl	800de18 <_free_r>
 800ea42:	2300      	movs	r3, #0
 800ea44:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea46:	e00d      	b.n	800ea64 <__sflush_r+0xac>
 800ea48:	2301      	movs	r3, #1
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	47b0      	blx	r6
 800ea4e:	4602      	mov	r2, r0
 800ea50:	1c50      	adds	r0, r2, #1
 800ea52:	d1c9      	bne.n	800e9e8 <__sflush_r+0x30>
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d0c6      	beq.n	800e9e8 <__sflush_r+0x30>
 800ea5a:	2b1d      	cmp	r3, #29
 800ea5c:	d001      	beq.n	800ea62 <__sflush_r+0xaa>
 800ea5e:	2b16      	cmp	r3, #22
 800ea60:	d11d      	bne.n	800ea9e <__sflush_r+0xe6>
 800ea62:	602f      	str	r7, [r5, #0]
 800ea64:	2000      	movs	r0, #0
 800ea66:	e021      	b.n	800eaac <__sflush_r+0xf4>
 800ea68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea6c:	b21b      	sxth	r3, r3
 800ea6e:	e01a      	b.n	800eaa6 <__sflush_r+0xee>
 800ea70:	690f      	ldr	r7, [r1, #16]
 800ea72:	2f00      	cmp	r7, #0
 800ea74:	d0f6      	beq.n	800ea64 <__sflush_r+0xac>
 800ea76:	0793      	lsls	r3, r2, #30
 800ea78:	bf18      	it	ne
 800ea7a:	2300      	movne	r3, #0
 800ea7c:	680e      	ldr	r6, [r1, #0]
 800ea7e:	bf08      	it	eq
 800ea80:	694b      	ldreq	r3, [r1, #20]
 800ea82:	1bf6      	subs	r6, r6, r7
 800ea84:	600f      	str	r7, [r1, #0]
 800ea86:	608b      	str	r3, [r1, #8]
 800ea88:	2e00      	cmp	r6, #0
 800ea8a:	ddeb      	ble.n	800ea64 <__sflush_r+0xac>
 800ea8c:	4633      	mov	r3, r6
 800ea8e:	463a      	mov	r2, r7
 800ea90:	4628      	mov	r0, r5
 800ea92:	6a21      	ldr	r1, [r4, #32]
 800ea94:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ea98:	47e0      	blx	ip
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	dc07      	bgt.n	800eaae <__sflush_r+0xf6>
 800ea9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaaa:	81a3      	strh	r3, [r4, #12]
 800eaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaae:	4407      	add	r7, r0
 800eab0:	1a36      	subs	r6, r6, r0
 800eab2:	e7e9      	b.n	800ea88 <__sflush_r+0xd0>
 800eab4:	20400001 	.word	0x20400001

0800eab8 <_fflush_r>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	690b      	ldr	r3, [r1, #16]
 800eabc:	4605      	mov	r5, r0
 800eabe:	460c      	mov	r4, r1
 800eac0:	b913      	cbnz	r3, 800eac8 <_fflush_r+0x10>
 800eac2:	2500      	movs	r5, #0
 800eac4:	4628      	mov	r0, r5
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	b118      	cbz	r0, 800ead2 <_fflush_r+0x1a>
 800eaca:	6a03      	ldr	r3, [r0, #32]
 800eacc:	b90b      	cbnz	r3, 800ead2 <_fflush_r+0x1a>
 800eace:	f7fe f99b 	bl	800ce08 <__sinit>
 800ead2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d0f3      	beq.n	800eac2 <_fflush_r+0xa>
 800eada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eadc:	07d0      	lsls	r0, r2, #31
 800eade:	d404      	bmi.n	800eaea <_fflush_r+0x32>
 800eae0:	0599      	lsls	r1, r3, #22
 800eae2:	d402      	bmi.n	800eaea <_fflush_r+0x32>
 800eae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eae6:	f7fe fb1a 	bl	800d11e <__retarget_lock_acquire_recursive>
 800eaea:	4628      	mov	r0, r5
 800eaec:	4621      	mov	r1, r4
 800eaee:	f7ff ff63 	bl	800e9b8 <__sflush_r>
 800eaf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	07da      	lsls	r2, r3, #31
 800eaf8:	d4e4      	bmi.n	800eac4 <_fflush_r+0xc>
 800eafa:	89a3      	ldrh	r3, [r4, #12]
 800eafc:	059b      	lsls	r3, r3, #22
 800eafe:	d4e1      	bmi.n	800eac4 <_fflush_r+0xc>
 800eb00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb02:	f7fe fb0d 	bl	800d120 <__retarget_lock_release_recursive>
 800eb06:	e7dd      	b.n	800eac4 <_fflush_r+0xc>

0800eb08 <memmove>:
 800eb08:	4288      	cmp	r0, r1
 800eb0a:	b510      	push	{r4, lr}
 800eb0c:	eb01 0402 	add.w	r4, r1, r2
 800eb10:	d902      	bls.n	800eb18 <memmove+0x10>
 800eb12:	4284      	cmp	r4, r0
 800eb14:	4623      	mov	r3, r4
 800eb16:	d807      	bhi.n	800eb28 <memmove+0x20>
 800eb18:	1e43      	subs	r3, r0, #1
 800eb1a:	42a1      	cmp	r1, r4
 800eb1c:	d008      	beq.n	800eb30 <memmove+0x28>
 800eb1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb26:	e7f8      	b.n	800eb1a <memmove+0x12>
 800eb28:	4601      	mov	r1, r0
 800eb2a:	4402      	add	r2, r0
 800eb2c:	428a      	cmp	r2, r1
 800eb2e:	d100      	bne.n	800eb32 <memmove+0x2a>
 800eb30:	bd10      	pop	{r4, pc}
 800eb32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb3a:	e7f7      	b.n	800eb2c <memmove+0x24>

0800eb3c <_sbrk_r>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	2300      	movs	r3, #0
 800eb40:	4d05      	ldr	r5, [pc, #20]	@ (800eb58 <_sbrk_r+0x1c>)
 800eb42:	4604      	mov	r4, r0
 800eb44:	4608      	mov	r0, r1
 800eb46:	602b      	str	r3, [r5, #0]
 800eb48:	f7f6 f874 	bl	8004c34 <_sbrk>
 800eb4c:	1c43      	adds	r3, r0, #1
 800eb4e:	d102      	bne.n	800eb56 <_sbrk_r+0x1a>
 800eb50:	682b      	ldr	r3, [r5, #0]
 800eb52:	b103      	cbz	r3, 800eb56 <_sbrk_r+0x1a>
 800eb54:	6023      	str	r3, [r4, #0]
 800eb56:	bd38      	pop	{r3, r4, r5, pc}
 800eb58:	20004cd8 	.word	0x20004cd8

0800eb5c <__assert_func>:
 800eb5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb5e:	4614      	mov	r4, r2
 800eb60:	461a      	mov	r2, r3
 800eb62:	4b09      	ldr	r3, [pc, #36]	@ (800eb88 <__assert_func+0x2c>)
 800eb64:	4605      	mov	r5, r0
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68d8      	ldr	r0, [r3, #12]
 800eb6a:	b14c      	cbz	r4, 800eb80 <__assert_func+0x24>
 800eb6c:	4b07      	ldr	r3, [pc, #28]	@ (800eb8c <__assert_func+0x30>)
 800eb6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb72:	9100      	str	r1, [sp, #0]
 800eb74:	462b      	mov	r3, r5
 800eb76:	4906      	ldr	r1, [pc, #24]	@ (800eb90 <__assert_func+0x34>)
 800eb78:	f000 f870 	bl	800ec5c <fiprintf>
 800eb7c:	f000 f880 	bl	800ec80 <abort>
 800eb80:	4b04      	ldr	r3, [pc, #16]	@ (800eb94 <__assert_func+0x38>)
 800eb82:	461c      	mov	r4, r3
 800eb84:	e7f3      	b.n	800eb6e <__assert_func+0x12>
 800eb86:	bf00      	nop
 800eb88:	20000034 	.word	0x20000034
 800eb8c:	0800f7c9 	.word	0x0800f7c9
 800eb90:	0800f7d6 	.word	0x0800f7d6
 800eb94:	0800f804 	.word	0x0800f804

0800eb98 <_calloc_r>:
 800eb98:	b570      	push	{r4, r5, r6, lr}
 800eb9a:	fba1 5402 	umull	r5, r4, r1, r2
 800eb9e:	b934      	cbnz	r4, 800ebae <_calloc_r+0x16>
 800eba0:	4629      	mov	r1, r5
 800eba2:	f7ff f9ab 	bl	800defc <_malloc_r>
 800eba6:	4606      	mov	r6, r0
 800eba8:	b928      	cbnz	r0, 800ebb6 <_calloc_r+0x1e>
 800ebaa:	4630      	mov	r0, r6
 800ebac:	bd70      	pop	{r4, r5, r6, pc}
 800ebae:	220c      	movs	r2, #12
 800ebb0:	2600      	movs	r6, #0
 800ebb2:	6002      	str	r2, [r0, #0]
 800ebb4:	e7f9      	b.n	800ebaa <_calloc_r+0x12>
 800ebb6:	462a      	mov	r2, r5
 800ebb8:	4621      	mov	r1, r4
 800ebba:	f7fe fa33 	bl	800d024 <memset>
 800ebbe:	e7f4      	b.n	800ebaa <_calloc_r+0x12>

0800ebc0 <__ascii_mbtowc>:
 800ebc0:	b082      	sub	sp, #8
 800ebc2:	b901      	cbnz	r1, 800ebc6 <__ascii_mbtowc+0x6>
 800ebc4:	a901      	add	r1, sp, #4
 800ebc6:	b142      	cbz	r2, 800ebda <__ascii_mbtowc+0x1a>
 800ebc8:	b14b      	cbz	r3, 800ebde <__ascii_mbtowc+0x1e>
 800ebca:	7813      	ldrb	r3, [r2, #0]
 800ebcc:	600b      	str	r3, [r1, #0]
 800ebce:	7812      	ldrb	r2, [r2, #0]
 800ebd0:	1e10      	subs	r0, r2, #0
 800ebd2:	bf18      	it	ne
 800ebd4:	2001      	movne	r0, #1
 800ebd6:	b002      	add	sp, #8
 800ebd8:	4770      	bx	lr
 800ebda:	4610      	mov	r0, r2
 800ebdc:	e7fb      	b.n	800ebd6 <__ascii_mbtowc+0x16>
 800ebde:	f06f 0001 	mvn.w	r0, #1
 800ebe2:	e7f8      	b.n	800ebd6 <__ascii_mbtowc+0x16>

0800ebe4 <_realloc_r>:
 800ebe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe8:	4607      	mov	r7, r0
 800ebea:	4614      	mov	r4, r2
 800ebec:	460d      	mov	r5, r1
 800ebee:	b921      	cbnz	r1, 800ebfa <_realloc_r+0x16>
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf6:	f7ff b981 	b.w	800defc <_malloc_r>
 800ebfa:	b92a      	cbnz	r2, 800ec08 <_realloc_r+0x24>
 800ebfc:	f7ff f90c 	bl	800de18 <_free_r>
 800ec00:	4625      	mov	r5, r4
 800ec02:	4628      	mov	r0, r5
 800ec04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec08:	f000 f841 	bl	800ec8e <_malloc_usable_size_r>
 800ec0c:	4284      	cmp	r4, r0
 800ec0e:	4606      	mov	r6, r0
 800ec10:	d802      	bhi.n	800ec18 <_realloc_r+0x34>
 800ec12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec16:	d8f4      	bhi.n	800ec02 <_realloc_r+0x1e>
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4638      	mov	r0, r7
 800ec1c:	f7ff f96e 	bl	800defc <_malloc_r>
 800ec20:	4680      	mov	r8, r0
 800ec22:	b908      	cbnz	r0, 800ec28 <_realloc_r+0x44>
 800ec24:	4645      	mov	r5, r8
 800ec26:	e7ec      	b.n	800ec02 <_realloc_r+0x1e>
 800ec28:	42b4      	cmp	r4, r6
 800ec2a:	4622      	mov	r2, r4
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	bf28      	it	cs
 800ec30:	4632      	movcs	r2, r6
 800ec32:	f7fe fa84 	bl	800d13e <memcpy>
 800ec36:	4629      	mov	r1, r5
 800ec38:	4638      	mov	r0, r7
 800ec3a:	f7ff f8ed 	bl	800de18 <_free_r>
 800ec3e:	e7f1      	b.n	800ec24 <_realloc_r+0x40>

0800ec40 <__ascii_wctomb>:
 800ec40:	4603      	mov	r3, r0
 800ec42:	4608      	mov	r0, r1
 800ec44:	b141      	cbz	r1, 800ec58 <__ascii_wctomb+0x18>
 800ec46:	2aff      	cmp	r2, #255	@ 0xff
 800ec48:	d904      	bls.n	800ec54 <__ascii_wctomb+0x14>
 800ec4a:	228a      	movs	r2, #138	@ 0x8a
 800ec4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	4770      	bx	lr
 800ec54:	2001      	movs	r0, #1
 800ec56:	700a      	strb	r2, [r1, #0]
 800ec58:	4770      	bx	lr
	...

0800ec5c <fiprintf>:
 800ec5c:	b40e      	push	{r1, r2, r3}
 800ec5e:	b503      	push	{r0, r1, lr}
 800ec60:	4601      	mov	r1, r0
 800ec62:	ab03      	add	r3, sp, #12
 800ec64:	4805      	ldr	r0, [pc, #20]	@ (800ec7c <fiprintf+0x20>)
 800ec66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec6a:	6800      	ldr	r0, [r0, #0]
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	f000 f83d 	bl	800ecec <_vfiprintf_r>
 800ec72:	b002      	add	sp, #8
 800ec74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec78:	b003      	add	sp, #12
 800ec7a:	4770      	bx	lr
 800ec7c:	20000034 	.word	0x20000034

0800ec80 <abort>:
 800ec80:	2006      	movs	r0, #6
 800ec82:	b508      	push	{r3, lr}
 800ec84:	f000 fa06 	bl	800f094 <raise>
 800ec88:	2001      	movs	r0, #1
 800ec8a:	f7f5 ff5e 	bl	8004b4a <_exit>

0800ec8e <_malloc_usable_size_r>:
 800ec8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec92:	1f18      	subs	r0, r3, #4
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	bfbc      	itt	lt
 800ec98:	580b      	ldrlt	r3, [r1, r0]
 800ec9a:	18c0      	addlt	r0, r0, r3
 800ec9c:	4770      	bx	lr

0800ec9e <__sfputc_r>:
 800ec9e:	6893      	ldr	r3, [r2, #8]
 800eca0:	b410      	push	{r4}
 800eca2:	3b01      	subs	r3, #1
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	6093      	str	r3, [r2, #8]
 800eca8:	da07      	bge.n	800ecba <__sfputc_r+0x1c>
 800ecaa:	6994      	ldr	r4, [r2, #24]
 800ecac:	42a3      	cmp	r3, r4
 800ecae:	db01      	blt.n	800ecb4 <__sfputc_r+0x16>
 800ecb0:	290a      	cmp	r1, #10
 800ecb2:	d102      	bne.n	800ecba <__sfputc_r+0x1c>
 800ecb4:	bc10      	pop	{r4}
 800ecb6:	f000 b931 	b.w	800ef1c <__swbuf_r>
 800ecba:	6813      	ldr	r3, [r2, #0]
 800ecbc:	1c58      	adds	r0, r3, #1
 800ecbe:	6010      	str	r0, [r2, #0]
 800ecc0:	7019      	strb	r1, [r3, #0]
 800ecc2:	4608      	mov	r0, r1
 800ecc4:	bc10      	pop	{r4}
 800ecc6:	4770      	bx	lr

0800ecc8 <__sfputs_r>:
 800ecc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecca:	4606      	mov	r6, r0
 800eccc:	460f      	mov	r7, r1
 800ecce:	4614      	mov	r4, r2
 800ecd0:	18d5      	adds	r5, r2, r3
 800ecd2:	42ac      	cmp	r4, r5
 800ecd4:	d101      	bne.n	800ecda <__sfputs_r+0x12>
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	e007      	b.n	800ecea <__sfputs_r+0x22>
 800ecda:	463a      	mov	r2, r7
 800ecdc:	4630      	mov	r0, r6
 800ecde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ece2:	f7ff ffdc 	bl	800ec9e <__sfputc_r>
 800ece6:	1c43      	adds	r3, r0, #1
 800ece8:	d1f3      	bne.n	800ecd2 <__sfputs_r+0xa>
 800ecea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ecec <_vfiprintf_r>:
 800ecec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf0:	460d      	mov	r5, r1
 800ecf2:	4614      	mov	r4, r2
 800ecf4:	4698      	mov	r8, r3
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	b09d      	sub	sp, #116	@ 0x74
 800ecfa:	b118      	cbz	r0, 800ed04 <_vfiprintf_r+0x18>
 800ecfc:	6a03      	ldr	r3, [r0, #32]
 800ecfe:	b90b      	cbnz	r3, 800ed04 <_vfiprintf_r+0x18>
 800ed00:	f7fe f882 	bl	800ce08 <__sinit>
 800ed04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed06:	07d9      	lsls	r1, r3, #31
 800ed08:	d405      	bmi.n	800ed16 <_vfiprintf_r+0x2a>
 800ed0a:	89ab      	ldrh	r3, [r5, #12]
 800ed0c:	059a      	lsls	r2, r3, #22
 800ed0e:	d402      	bmi.n	800ed16 <_vfiprintf_r+0x2a>
 800ed10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed12:	f7fe fa04 	bl	800d11e <__retarget_lock_acquire_recursive>
 800ed16:	89ab      	ldrh	r3, [r5, #12]
 800ed18:	071b      	lsls	r3, r3, #28
 800ed1a:	d501      	bpl.n	800ed20 <_vfiprintf_r+0x34>
 800ed1c:	692b      	ldr	r3, [r5, #16]
 800ed1e:	b99b      	cbnz	r3, 800ed48 <_vfiprintf_r+0x5c>
 800ed20:	4629      	mov	r1, r5
 800ed22:	4630      	mov	r0, r6
 800ed24:	f000 f938 	bl	800ef98 <__swsetup_r>
 800ed28:	b170      	cbz	r0, 800ed48 <_vfiprintf_r+0x5c>
 800ed2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed2c:	07dc      	lsls	r4, r3, #31
 800ed2e:	d504      	bpl.n	800ed3a <_vfiprintf_r+0x4e>
 800ed30:	f04f 30ff 	mov.w	r0, #4294967295
 800ed34:	b01d      	add	sp, #116	@ 0x74
 800ed36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3a:	89ab      	ldrh	r3, [r5, #12]
 800ed3c:	0598      	lsls	r0, r3, #22
 800ed3e:	d4f7      	bmi.n	800ed30 <_vfiprintf_r+0x44>
 800ed40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed42:	f7fe f9ed 	bl	800d120 <__retarget_lock_release_recursive>
 800ed46:	e7f3      	b.n	800ed30 <_vfiprintf_r+0x44>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed4c:	2320      	movs	r3, #32
 800ed4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed52:	2330      	movs	r3, #48	@ 0x30
 800ed54:	f04f 0901 	mov.w	r9, #1
 800ed58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ef08 <_vfiprintf_r+0x21c>
 800ed60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed64:	4623      	mov	r3, r4
 800ed66:	469a      	mov	sl, r3
 800ed68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed6c:	b10a      	cbz	r2, 800ed72 <_vfiprintf_r+0x86>
 800ed6e:	2a25      	cmp	r2, #37	@ 0x25
 800ed70:	d1f9      	bne.n	800ed66 <_vfiprintf_r+0x7a>
 800ed72:	ebba 0b04 	subs.w	fp, sl, r4
 800ed76:	d00b      	beq.n	800ed90 <_vfiprintf_r+0xa4>
 800ed78:	465b      	mov	r3, fp
 800ed7a:	4622      	mov	r2, r4
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f7ff ffa2 	bl	800ecc8 <__sfputs_r>
 800ed84:	3001      	adds	r0, #1
 800ed86:	f000 80a7 	beq.w	800eed8 <_vfiprintf_r+0x1ec>
 800ed8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed8c:	445a      	add	r2, fp
 800ed8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed90:	f89a 3000 	ldrb.w	r3, [sl]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f000 809f 	beq.w	800eed8 <_vfiprintf_r+0x1ec>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f04f 32ff 	mov.w	r2, #4294967295
 800eda0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eda4:	f10a 0a01 	add.w	sl, sl, #1
 800eda8:	9304      	str	r3, [sp, #16]
 800edaa:	9307      	str	r3, [sp, #28]
 800edac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800edb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800edb2:	4654      	mov	r4, sl
 800edb4:	2205      	movs	r2, #5
 800edb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edba:	4853      	ldr	r0, [pc, #332]	@ (800ef08 <_vfiprintf_r+0x21c>)
 800edbc:	f7fe f9b1 	bl	800d122 <memchr>
 800edc0:	9a04      	ldr	r2, [sp, #16]
 800edc2:	b9d8      	cbnz	r0, 800edfc <_vfiprintf_r+0x110>
 800edc4:	06d1      	lsls	r1, r2, #27
 800edc6:	bf44      	itt	mi
 800edc8:	2320      	movmi	r3, #32
 800edca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edce:	0713      	lsls	r3, r2, #28
 800edd0:	bf44      	itt	mi
 800edd2:	232b      	movmi	r3, #43	@ 0x2b
 800edd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edd8:	f89a 3000 	ldrb.w	r3, [sl]
 800eddc:	2b2a      	cmp	r3, #42	@ 0x2a
 800edde:	d015      	beq.n	800ee0c <_vfiprintf_r+0x120>
 800ede0:	4654      	mov	r4, sl
 800ede2:	2000      	movs	r0, #0
 800ede4:	f04f 0c0a 	mov.w	ip, #10
 800ede8:	9a07      	ldr	r2, [sp, #28]
 800edea:	4621      	mov	r1, r4
 800edec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edf0:	3b30      	subs	r3, #48	@ 0x30
 800edf2:	2b09      	cmp	r3, #9
 800edf4:	d94b      	bls.n	800ee8e <_vfiprintf_r+0x1a2>
 800edf6:	b1b0      	cbz	r0, 800ee26 <_vfiprintf_r+0x13a>
 800edf8:	9207      	str	r2, [sp, #28]
 800edfa:	e014      	b.n	800ee26 <_vfiprintf_r+0x13a>
 800edfc:	eba0 0308 	sub.w	r3, r0, r8
 800ee00:	fa09 f303 	lsl.w	r3, r9, r3
 800ee04:	4313      	orrs	r3, r2
 800ee06:	46a2      	mov	sl, r4
 800ee08:	9304      	str	r3, [sp, #16]
 800ee0a:	e7d2      	b.n	800edb2 <_vfiprintf_r+0xc6>
 800ee0c:	9b03      	ldr	r3, [sp, #12]
 800ee0e:	1d19      	adds	r1, r3, #4
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	9103      	str	r1, [sp, #12]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	bfbb      	ittet	lt
 800ee18:	425b      	neglt	r3, r3
 800ee1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee1e:	9307      	strge	r3, [sp, #28]
 800ee20:	9307      	strlt	r3, [sp, #28]
 800ee22:	bfb8      	it	lt
 800ee24:	9204      	strlt	r2, [sp, #16]
 800ee26:	7823      	ldrb	r3, [r4, #0]
 800ee28:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee2a:	d10a      	bne.n	800ee42 <_vfiprintf_r+0x156>
 800ee2c:	7863      	ldrb	r3, [r4, #1]
 800ee2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee30:	d132      	bne.n	800ee98 <_vfiprintf_r+0x1ac>
 800ee32:	9b03      	ldr	r3, [sp, #12]
 800ee34:	3402      	adds	r4, #2
 800ee36:	1d1a      	adds	r2, r3, #4
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	9203      	str	r2, [sp, #12]
 800ee3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee40:	9305      	str	r3, [sp, #20]
 800ee42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ef0c <_vfiprintf_r+0x220>
 800ee46:	2203      	movs	r2, #3
 800ee48:	4650      	mov	r0, sl
 800ee4a:	7821      	ldrb	r1, [r4, #0]
 800ee4c:	f7fe f969 	bl	800d122 <memchr>
 800ee50:	b138      	cbz	r0, 800ee62 <_vfiprintf_r+0x176>
 800ee52:	2240      	movs	r2, #64	@ 0x40
 800ee54:	9b04      	ldr	r3, [sp, #16]
 800ee56:	eba0 000a 	sub.w	r0, r0, sl
 800ee5a:	4082      	lsls	r2, r0
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	3401      	adds	r4, #1
 800ee60:	9304      	str	r3, [sp, #16]
 800ee62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee66:	2206      	movs	r2, #6
 800ee68:	4829      	ldr	r0, [pc, #164]	@ (800ef10 <_vfiprintf_r+0x224>)
 800ee6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee6e:	f7fe f958 	bl	800d122 <memchr>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d03f      	beq.n	800eef6 <_vfiprintf_r+0x20a>
 800ee76:	4b27      	ldr	r3, [pc, #156]	@ (800ef14 <_vfiprintf_r+0x228>)
 800ee78:	bb1b      	cbnz	r3, 800eec2 <_vfiprintf_r+0x1d6>
 800ee7a:	9b03      	ldr	r3, [sp, #12]
 800ee7c:	3307      	adds	r3, #7
 800ee7e:	f023 0307 	bic.w	r3, r3, #7
 800ee82:	3308      	adds	r3, #8
 800ee84:	9303      	str	r3, [sp, #12]
 800ee86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee88:	443b      	add	r3, r7
 800ee8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee8c:	e76a      	b.n	800ed64 <_vfiprintf_r+0x78>
 800ee8e:	460c      	mov	r4, r1
 800ee90:	2001      	movs	r0, #1
 800ee92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee96:	e7a8      	b.n	800edea <_vfiprintf_r+0xfe>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f04f 0c0a 	mov.w	ip, #10
 800ee9e:	4619      	mov	r1, r3
 800eea0:	3401      	adds	r4, #1
 800eea2:	9305      	str	r3, [sp, #20]
 800eea4:	4620      	mov	r0, r4
 800eea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeaa:	3a30      	subs	r2, #48	@ 0x30
 800eeac:	2a09      	cmp	r2, #9
 800eeae:	d903      	bls.n	800eeb8 <_vfiprintf_r+0x1cc>
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d0c6      	beq.n	800ee42 <_vfiprintf_r+0x156>
 800eeb4:	9105      	str	r1, [sp, #20]
 800eeb6:	e7c4      	b.n	800ee42 <_vfiprintf_r+0x156>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	2301      	movs	r3, #1
 800eebc:	fb0c 2101 	mla	r1, ip, r1, r2
 800eec0:	e7f0      	b.n	800eea4 <_vfiprintf_r+0x1b8>
 800eec2:	ab03      	add	r3, sp, #12
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	462a      	mov	r2, r5
 800eec8:	4630      	mov	r0, r6
 800eeca:	4b13      	ldr	r3, [pc, #76]	@ (800ef18 <_vfiprintf_r+0x22c>)
 800eecc:	a904      	add	r1, sp, #16
 800eece:	f7fd fb53 	bl	800c578 <_printf_float>
 800eed2:	4607      	mov	r7, r0
 800eed4:	1c78      	adds	r0, r7, #1
 800eed6:	d1d6      	bne.n	800ee86 <_vfiprintf_r+0x19a>
 800eed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eeda:	07d9      	lsls	r1, r3, #31
 800eedc:	d405      	bmi.n	800eeea <_vfiprintf_r+0x1fe>
 800eede:	89ab      	ldrh	r3, [r5, #12]
 800eee0:	059a      	lsls	r2, r3, #22
 800eee2:	d402      	bmi.n	800eeea <_vfiprintf_r+0x1fe>
 800eee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eee6:	f7fe f91b 	bl	800d120 <__retarget_lock_release_recursive>
 800eeea:	89ab      	ldrh	r3, [r5, #12]
 800eeec:	065b      	lsls	r3, r3, #25
 800eeee:	f53f af1f 	bmi.w	800ed30 <_vfiprintf_r+0x44>
 800eef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eef4:	e71e      	b.n	800ed34 <_vfiprintf_r+0x48>
 800eef6:	ab03      	add	r3, sp, #12
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	462a      	mov	r2, r5
 800eefc:	4630      	mov	r0, r6
 800eefe:	4b06      	ldr	r3, [pc, #24]	@ (800ef18 <_vfiprintf_r+0x22c>)
 800ef00:	a904      	add	r1, sp, #16
 800ef02:	f7fd fdd7 	bl	800cab4 <_printf_i>
 800ef06:	e7e4      	b.n	800eed2 <_vfiprintf_r+0x1e6>
 800ef08:	0800f7ae 	.word	0x0800f7ae
 800ef0c:	0800f7b4 	.word	0x0800f7b4
 800ef10:	0800f7b8 	.word	0x0800f7b8
 800ef14:	0800c579 	.word	0x0800c579
 800ef18:	0800ecc9 	.word	0x0800ecc9

0800ef1c <__swbuf_r>:
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	460e      	mov	r6, r1
 800ef20:	4614      	mov	r4, r2
 800ef22:	4605      	mov	r5, r0
 800ef24:	b118      	cbz	r0, 800ef2e <__swbuf_r+0x12>
 800ef26:	6a03      	ldr	r3, [r0, #32]
 800ef28:	b90b      	cbnz	r3, 800ef2e <__swbuf_r+0x12>
 800ef2a:	f7fd ff6d 	bl	800ce08 <__sinit>
 800ef2e:	69a3      	ldr	r3, [r4, #24]
 800ef30:	60a3      	str	r3, [r4, #8]
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	071a      	lsls	r2, r3, #28
 800ef36:	d501      	bpl.n	800ef3c <__swbuf_r+0x20>
 800ef38:	6923      	ldr	r3, [r4, #16]
 800ef3a:	b943      	cbnz	r3, 800ef4e <__swbuf_r+0x32>
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f000 f82a 	bl	800ef98 <__swsetup_r>
 800ef44:	b118      	cbz	r0, 800ef4e <__swbuf_r+0x32>
 800ef46:	f04f 37ff 	mov.w	r7, #4294967295
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef4e:	6823      	ldr	r3, [r4, #0]
 800ef50:	6922      	ldr	r2, [r4, #16]
 800ef52:	b2f6      	uxtb	r6, r6
 800ef54:	1a98      	subs	r0, r3, r2
 800ef56:	6963      	ldr	r3, [r4, #20]
 800ef58:	4637      	mov	r7, r6
 800ef5a:	4283      	cmp	r3, r0
 800ef5c:	dc05      	bgt.n	800ef6a <__swbuf_r+0x4e>
 800ef5e:	4621      	mov	r1, r4
 800ef60:	4628      	mov	r0, r5
 800ef62:	f7ff fda9 	bl	800eab8 <_fflush_r>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	d1ed      	bne.n	800ef46 <__swbuf_r+0x2a>
 800ef6a:	68a3      	ldr	r3, [r4, #8]
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	60a3      	str	r3, [r4, #8]
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	1c5a      	adds	r2, r3, #1
 800ef74:	6022      	str	r2, [r4, #0]
 800ef76:	701e      	strb	r6, [r3, #0]
 800ef78:	6962      	ldr	r2, [r4, #20]
 800ef7a:	1c43      	adds	r3, r0, #1
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d004      	beq.n	800ef8a <__swbuf_r+0x6e>
 800ef80:	89a3      	ldrh	r3, [r4, #12]
 800ef82:	07db      	lsls	r3, r3, #31
 800ef84:	d5e1      	bpl.n	800ef4a <__swbuf_r+0x2e>
 800ef86:	2e0a      	cmp	r6, #10
 800ef88:	d1df      	bne.n	800ef4a <__swbuf_r+0x2e>
 800ef8a:	4621      	mov	r1, r4
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	f7ff fd93 	bl	800eab8 <_fflush_r>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d0d9      	beq.n	800ef4a <__swbuf_r+0x2e>
 800ef96:	e7d6      	b.n	800ef46 <__swbuf_r+0x2a>

0800ef98 <__swsetup_r>:
 800ef98:	b538      	push	{r3, r4, r5, lr}
 800ef9a:	4b29      	ldr	r3, [pc, #164]	@ (800f040 <__swsetup_r+0xa8>)
 800ef9c:	4605      	mov	r5, r0
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	460c      	mov	r4, r1
 800efa2:	b118      	cbz	r0, 800efac <__swsetup_r+0x14>
 800efa4:	6a03      	ldr	r3, [r0, #32]
 800efa6:	b90b      	cbnz	r3, 800efac <__swsetup_r+0x14>
 800efa8:	f7fd ff2e 	bl	800ce08 <__sinit>
 800efac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efb0:	0719      	lsls	r1, r3, #28
 800efb2:	d422      	bmi.n	800effa <__swsetup_r+0x62>
 800efb4:	06da      	lsls	r2, r3, #27
 800efb6:	d407      	bmi.n	800efc8 <__swsetup_r+0x30>
 800efb8:	2209      	movs	r2, #9
 800efba:	602a      	str	r2, [r5, #0]
 800efbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efc0:	f04f 30ff 	mov.w	r0, #4294967295
 800efc4:	81a3      	strh	r3, [r4, #12]
 800efc6:	e033      	b.n	800f030 <__swsetup_r+0x98>
 800efc8:	0758      	lsls	r0, r3, #29
 800efca:	d512      	bpl.n	800eff2 <__swsetup_r+0x5a>
 800efcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efce:	b141      	cbz	r1, 800efe2 <__swsetup_r+0x4a>
 800efd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efd4:	4299      	cmp	r1, r3
 800efd6:	d002      	beq.n	800efde <__swsetup_r+0x46>
 800efd8:	4628      	mov	r0, r5
 800efda:	f7fe ff1d 	bl	800de18 <_free_r>
 800efde:	2300      	movs	r3, #0
 800efe0:	6363      	str	r3, [r4, #52]	@ 0x34
 800efe2:	89a3      	ldrh	r3, [r4, #12]
 800efe4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800efe8:	81a3      	strh	r3, [r4, #12]
 800efea:	2300      	movs	r3, #0
 800efec:	6063      	str	r3, [r4, #4]
 800efee:	6923      	ldr	r3, [r4, #16]
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	f043 0308 	orr.w	r3, r3, #8
 800eff8:	81a3      	strh	r3, [r4, #12]
 800effa:	6923      	ldr	r3, [r4, #16]
 800effc:	b94b      	cbnz	r3, 800f012 <__swsetup_r+0x7a>
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f008:	d003      	beq.n	800f012 <__swsetup_r+0x7a>
 800f00a:	4621      	mov	r1, r4
 800f00c:	4628      	mov	r0, r5
 800f00e:	f000 f882 	bl	800f116 <__smakebuf_r>
 800f012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f016:	f013 0201 	ands.w	r2, r3, #1
 800f01a:	d00a      	beq.n	800f032 <__swsetup_r+0x9a>
 800f01c:	2200      	movs	r2, #0
 800f01e:	60a2      	str	r2, [r4, #8]
 800f020:	6962      	ldr	r2, [r4, #20]
 800f022:	4252      	negs	r2, r2
 800f024:	61a2      	str	r2, [r4, #24]
 800f026:	6922      	ldr	r2, [r4, #16]
 800f028:	b942      	cbnz	r2, 800f03c <__swsetup_r+0xa4>
 800f02a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f02e:	d1c5      	bne.n	800efbc <__swsetup_r+0x24>
 800f030:	bd38      	pop	{r3, r4, r5, pc}
 800f032:	0799      	lsls	r1, r3, #30
 800f034:	bf58      	it	pl
 800f036:	6962      	ldrpl	r2, [r4, #20]
 800f038:	60a2      	str	r2, [r4, #8]
 800f03a:	e7f4      	b.n	800f026 <__swsetup_r+0x8e>
 800f03c:	2000      	movs	r0, #0
 800f03e:	e7f7      	b.n	800f030 <__swsetup_r+0x98>
 800f040:	20000034 	.word	0x20000034

0800f044 <_raise_r>:
 800f044:	291f      	cmp	r1, #31
 800f046:	b538      	push	{r3, r4, r5, lr}
 800f048:	4605      	mov	r5, r0
 800f04a:	460c      	mov	r4, r1
 800f04c:	d904      	bls.n	800f058 <_raise_r+0x14>
 800f04e:	2316      	movs	r3, #22
 800f050:	6003      	str	r3, [r0, #0]
 800f052:	f04f 30ff 	mov.w	r0, #4294967295
 800f056:	bd38      	pop	{r3, r4, r5, pc}
 800f058:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f05a:	b112      	cbz	r2, 800f062 <_raise_r+0x1e>
 800f05c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f060:	b94b      	cbnz	r3, 800f076 <_raise_r+0x32>
 800f062:	4628      	mov	r0, r5
 800f064:	f000 f830 	bl	800f0c8 <_getpid_r>
 800f068:	4622      	mov	r2, r4
 800f06a:	4601      	mov	r1, r0
 800f06c:	4628      	mov	r0, r5
 800f06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f072:	f000 b817 	b.w	800f0a4 <_kill_r>
 800f076:	2b01      	cmp	r3, #1
 800f078:	d00a      	beq.n	800f090 <_raise_r+0x4c>
 800f07a:	1c59      	adds	r1, r3, #1
 800f07c:	d103      	bne.n	800f086 <_raise_r+0x42>
 800f07e:	2316      	movs	r3, #22
 800f080:	6003      	str	r3, [r0, #0]
 800f082:	2001      	movs	r0, #1
 800f084:	e7e7      	b.n	800f056 <_raise_r+0x12>
 800f086:	2100      	movs	r1, #0
 800f088:	4620      	mov	r0, r4
 800f08a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f08e:	4798      	blx	r3
 800f090:	2000      	movs	r0, #0
 800f092:	e7e0      	b.n	800f056 <_raise_r+0x12>

0800f094 <raise>:
 800f094:	4b02      	ldr	r3, [pc, #8]	@ (800f0a0 <raise+0xc>)
 800f096:	4601      	mov	r1, r0
 800f098:	6818      	ldr	r0, [r3, #0]
 800f09a:	f7ff bfd3 	b.w	800f044 <_raise_r>
 800f09e:	bf00      	nop
 800f0a0:	20000034 	.word	0x20000034

0800f0a4 <_kill_r>:
 800f0a4:	b538      	push	{r3, r4, r5, lr}
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	4d06      	ldr	r5, [pc, #24]	@ (800f0c4 <_kill_r+0x20>)
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	4608      	mov	r0, r1
 800f0ae:	4611      	mov	r1, r2
 800f0b0:	602b      	str	r3, [r5, #0]
 800f0b2:	f7f5 fd3a 	bl	8004b2a <_kill>
 800f0b6:	1c43      	adds	r3, r0, #1
 800f0b8:	d102      	bne.n	800f0c0 <_kill_r+0x1c>
 800f0ba:	682b      	ldr	r3, [r5, #0]
 800f0bc:	b103      	cbz	r3, 800f0c0 <_kill_r+0x1c>
 800f0be:	6023      	str	r3, [r4, #0]
 800f0c0:	bd38      	pop	{r3, r4, r5, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20004cd8 	.word	0x20004cd8

0800f0c8 <_getpid_r>:
 800f0c8:	f7f5 bd28 	b.w	8004b1c <_getpid>

0800f0cc <__swhatbuf_r>:
 800f0cc:	b570      	push	{r4, r5, r6, lr}
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d4:	4615      	mov	r5, r2
 800f0d6:	2900      	cmp	r1, #0
 800f0d8:	461e      	mov	r6, r3
 800f0da:	b096      	sub	sp, #88	@ 0x58
 800f0dc:	da0c      	bge.n	800f0f8 <__swhatbuf_r+0x2c>
 800f0de:	89a3      	ldrh	r3, [r4, #12]
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f0e6:	bf14      	ite	ne
 800f0e8:	2340      	movne	r3, #64	@ 0x40
 800f0ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	6031      	str	r1, [r6, #0]
 800f0f2:	602b      	str	r3, [r5, #0]
 800f0f4:	b016      	add	sp, #88	@ 0x58
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	466a      	mov	r2, sp
 800f0fa:	f000 f849 	bl	800f190 <_fstat_r>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	dbed      	blt.n	800f0de <__swhatbuf_r+0x12>
 800f102:	9901      	ldr	r1, [sp, #4]
 800f104:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f108:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f10c:	4259      	negs	r1, r3
 800f10e:	4159      	adcs	r1, r3
 800f110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f114:	e7eb      	b.n	800f0ee <__swhatbuf_r+0x22>

0800f116 <__smakebuf_r>:
 800f116:	898b      	ldrh	r3, [r1, #12]
 800f118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f11a:	079d      	lsls	r5, r3, #30
 800f11c:	4606      	mov	r6, r0
 800f11e:	460c      	mov	r4, r1
 800f120:	d507      	bpl.n	800f132 <__smakebuf_r+0x1c>
 800f122:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f126:	6023      	str	r3, [r4, #0]
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	2301      	movs	r3, #1
 800f12c:	6163      	str	r3, [r4, #20]
 800f12e:	b003      	add	sp, #12
 800f130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f132:	466a      	mov	r2, sp
 800f134:	ab01      	add	r3, sp, #4
 800f136:	f7ff ffc9 	bl	800f0cc <__swhatbuf_r>
 800f13a:	9f00      	ldr	r7, [sp, #0]
 800f13c:	4605      	mov	r5, r0
 800f13e:	4639      	mov	r1, r7
 800f140:	4630      	mov	r0, r6
 800f142:	f7fe fedb 	bl	800defc <_malloc_r>
 800f146:	b948      	cbnz	r0, 800f15c <__smakebuf_r+0x46>
 800f148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f14c:	059a      	lsls	r2, r3, #22
 800f14e:	d4ee      	bmi.n	800f12e <__smakebuf_r+0x18>
 800f150:	f023 0303 	bic.w	r3, r3, #3
 800f154:	f043 0302 	orr.w	r3, r3, #2
 800f158:	81a3      	strh	r3, [r4, #12]
 800f15a:	e7e2      	b.n	800f122 <__smakebuf_r+0xc>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f166:	81a3      	strh	r3, [r4, #12]
 800f168:	9b01      	ldr	r3, [sp, #4]
 800f16a:	6020      	str	r0, [r4, #0]
 800f16c:	b15b      	cbz	r3, 800f186 <__smakebuf_r+0x70>
 800f16e:	4630      	mov	r0, r6
 800f170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f174:	f000 f81e 	bl	800f1b4 <_isatty_r>
 800f178:	b128      	cbz	r0, 800f186 <__smakebuf_r+0x70>
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	f023 0303 	bic.w	r3, r3, #3
 800f180:	f043 0301 	orr.w	r3, r3, #1
 800f184:	81a3      	strh	r3, [r4, #12]
 800f186:	89a3      	ldrh	r3, [r4, #12]
 800f188:	431d      	orrs	r5, r3
 800f18a:	81a5      	strh	r5, [r4, #12]
 800f18c:	e7cf      	b.n	800f12e <__smakebuf_r+0x18>
	...

0800f190 <_fstat_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	2300      	movs	r3, #0
 800f194:	4d06      	ldr	r5, [pc, #24]	@ (800f1b0 <_fstat_r+0x20>)
 800f196:	4604      	mov	r4, r0
 800f198:	4608      	mov	r0, r1
 800f19a:	4611      	mov	r1, r2
 800f19c:	602b      	str	r3, [r5, #0]
 800f19e:	f7f5 fd23 	bl	8004be8 <_fstat>
 800f1a2:	1c43      	adds	r3, r0, #1
 800f1a4:	d102      	bne.n	800f1ac <_fstat_r+0x1c>
 800f1a6:	682b      	ldr	r3, [r5, #0]
 800f1a8:	b103      	cbz	r3, 800f1ac <_fstat_r+0x1c>
 800f1aa:	6023      	str	r3, [r4, #0]
 800f1ac:	bd38      	pop	{r3, r4, r5, pc}
 800f1ae:	bf00      	nop
 800f1b0:	20004cd8 	.word	0x20004cd8

0800f1b4 <_isatty_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	4d05      	ldr	r5, [pc, #20]	@ (800f1d0 <_isatty_r+0x1c>)
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	602b      	str	r3, [r5, #0]
 800f1c0:	f7f5 fd21 	bl	8004c06 <_isatty>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	d102      	bne.n	800f1ce <_isatty_r+0x1a>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	b103      	cbz	r3, 800f1ce <_isatty_r+0x1a>
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	bd38      	pop	{r3, r4, r5, pc}
 800f1d0:	20004cd8 	.word	0x20004cd8

0800f1d4 <roundf>:
 800f1d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f1d8:	3b7f      	subs	r3, #127	@ 0x7f
 800f1da:	2b16      	cmp	r3, #22
 800f1dc:	4601      	mov	r1, r0
 800f1de:	b510      	push	{r4, lr}
 800f1e0:	dc14      	bgt.n	800f20c <roundf+0x38>
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	da07      	bge.n	800f1f6 <roundf+0x22>
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800f1ec:	d101      	bne.n	800f1f2 <roundf+0x1e>
 800f1ee:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800f1f2:	4608      	mov	r0, r1
 800f1f4:	bd10      	pop	{r4, pc}
 800f1f6:	4a08      	ldr	r2, [pc, #32]	@ (800f218 <roundf+0x44>)
 800f1f8:	411a      	asrs	r2, r3
 800f1fa:	4202      	tst	r2, r0
 800f1fc:	d0f9      	beq.n	800f1f2 <roundf+0x1e>
 800f1fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f202:	4119      	asrs	r1, r3
 800f204:	4401      	add	r1, r0
 800f206:	ea21 0102 	bic.w	r1, r1, r2
 800f20a:	e7f2      	b.n	800f1f2 <roundf+0x1e>
 800f20c:	2b80      	cmp	r3, #128	@ 0x80
 800f20e:	d1f0      	bne.n	800f1f2 <roundf+0x1e>
 800f210:	f7f1 fcc8 	bl	8000ba4 <__addsf3>
 800f214:	4601      	mov	r1, r0
 800f216:	e7ec      	b.n	800f1f2 <roundf+0x1e>
 800f218:	007fffff 	.word	0x007fffff

0800f21c <_init>:
 800f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21e:	bf00      	nop
 800f220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f222:	bc08      	pop	{r3}
 800f224:	469e      	mov	lr, r3
 800f226:	4770      	bx	lr

0800f228 <_fini>:
 800f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22a:	bf00      	nop
 800f22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22e:	bc08      	pop	{r3}
 800f230:	469e      	mov	lr, r3
 800f232:	4770      	bx	lr
